/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g
 *     -                            On : 2013-06-07 19:40:59
 *     -                for the parser : DonutParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "DonutParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pDonutParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pDonutParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pDonutParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pDonutParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   DonutParserTokenNames[99+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "APPLY",
        (pANTLR3_UINT8) "ARGS",
        (pANTLR3_UINT8) "ARRAY",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "ASSIGN_OP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "CEQ",
        (pANTLR3_UINT8) "CGE",
        (pANTLR3_UINT8) "CGT",
        (pANTLR3_UINT8) "CLE",
        (pANTLR3_UINT8) "CLOS",
        (pANTLR3_UINT8) "CLT",
        (pANTLR3_UINT8) "CNE",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "COND",
        (pANTLR3_UINT8) "CONT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FALSE_LITERAL",
        (pANTLR3_UINT8) "FLOAT_LITERAL",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "INTERRUPT",
        (pANTLR3_UINT8) "INT_LITERAL",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "MUL",
        (pANTLR3_UINT8) "NONZERO_DIGIT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "NULL_LITERAL",
        (pANTLR3_UINT8) "OBJECT",
        (pANTLR3_UINT8) "OCT_DIGIT",
        (pANTLR3_UINT8) "OCT_LITERAL",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "PAIR",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "POST_OP",
        (pANTLR3_UINT8) "PRE_OP",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "SCOPE",
        (pANTLR3_UINT8) "SELF",
        (pANTLR3_UINT8) "STRING_DOUBLE",
        (pANTLR3_UINT8) "STRING_DOUBLE_ELEMENT",
        (pANTLR3_UINT8) "STRING_SINGLE",
        (pANTLR3_UINT8) "STRING_SINGLE_ELEMENT",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "TRUE_LITERAL",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "VARS",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'=>'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 DonutParser_source_return
	source    (pDonutParser ctx);
static 
 DonutParser_program_return
	program    (pDonutParser ctx);
static 
 DonutParser_exprlist_return
	exprlist    (pDonutParser ctx);
static 
 DonutParser_expr_return
	expr    (pDonutParser ctx);
static 
 DonutParser_expr8_return
	expr8    (pDonutParser ctx);
static 
 DonutParser_expr7_return
	expr7    (pDonutParser ctx);
static 
 DonutParser_expr6_return
	expr6    (pDonutParser ctx);
static 
 DonutParser_expr5_return
	expr5    (pDonutParser ctx);
static 
 DonutParser_expr4_return
	expr4    (pDonutParser ctx);
static 
 DonutParser_expr3_return
	expr3    (pDonutParser ctx);
static 
 DonutParser_expr2_return
	expr2    (pDonutParser ctx);
static 
 DonutParser_expr1_return
	expr1    (pDonutParser ctx);
static 
 DonutParser_term_return
	term    (pDonutParser ctx);
static 
 DonutParser_postfix_return
	postfix    (pDonutParser ctx);
static 
 DonutParser_primary_return
	primary    (pDonutParser ctx);
static 
 DonutParser_cond_return
	cond    (pDonutParser ctx);
static 
 DonutParser_block_return
	block    (pDonutParser ctx);
static 
 DonutParser_name_return
	name    (pDonutParser ctx);
static 
 DonutParser_varlist_return
	varlist    (pDonutParser ctx);
static 
 DonutParser_arglist_return
	arglist    (pDonutParser ctx);
static 
 DonutParser_array_return
	array    (pDonutParser ctx);
static 
 DonutParser_exprlist_for_literal_return
	exprlist_for_literal    (pDonutParser ctx);
static 
 DonutParser_object_return
	object    (pDonutParser ctx);
static 
 DonutParser_object_pair_return
	object_pair    (pDonutParser ctx);
static 
 DonutParser_literal_return
	literal    (pDonutParser ctx);
static 
 DonutParser_boolean_literal_return
	boolean_literal    (pDonutParser ctx);
static 
 DonutParser_numeric_literal_return
	numeric_literal    (pDonutParser ctx);
static 
 DonutParser_string_literal_return
	string_literal    (pDonutParser ctx);
static 
 ANTLR3_BOOLEAN
	synpred1_Donut    (pDonutParser ctx);
static void	DonutParserFree(pDonutParser ctx);
static void     DonutParserReset (pDonutParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return DonutParserNewSSD(instream, NULL);
}

/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pDonutParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pDonutParser) ANTLR3_CALLOC(1, sizeof(DonutParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in DonutParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our DonutParser interface
     */
    ctx->source	= source;
    ctx->program	= program;
    ctx->exprlist	= exprlist;
    ctx->expr	= expr;
    ctx->expr8	= expr8;
    ctx->expr7	= expr7;
    ctx->expr6	= expr6;
    ctx->expr5	= expr5;
    ctx->expr4	= expr4;
    ctx->expr3	= expr3;
    ctx->expr2	= expr2;
    ctx->expr1	= expr1;
    ctx->term	= term;
    ctx->postfix	= postfix;
    ctx->primary	= primary;
    ctx->cond	= cond;
    ctx->block	= block;
    ctx->name	= name;
    ctx->varlist	= varlist;
    ctx->arglist	= arglist;
    ctx->array	= array;
    ctx->exprlist_for_literal	= exprlist_for_literal;
    ctx->object	= object;
    ctx->object_pair	= object_pair;
    ctx->literal	= literal;
    ctx->boolean_literal	= boolean_literal;
    ctx->numeric_literal	= numeric_literal;
    ctx->string_literal	= string_literal;
    ctx->synpred1_Donut	= synpred1_Donut;
    ctx->free			= DonutParserFree;
    ctx->reset			= DonutParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */
ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);

ctx->vectors	= antlr3VectorFactoryNew(0);
    /* Install the token table
     */
    PSRSTATE->tokenNames   = DonutParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
DonutParserReset (pDonutParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 DonutParserFree(pDonutParser ctx)
 {
    /* Free any scope memory
     */

ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return DonutParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_program_in_source195  */
static	ANTLR3_BITWORD FOLLOW_program_in_source195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_program_in_source195	= { FOLLOW_program_in_source195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_source197  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_source197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_source197	= { FOLLOW_EOF_in_source197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_program209  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_program209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_program209	= { FOLLOW_exprlist_in_program209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist227  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist227	= { FOLLOW_expr_in_exprlist227_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_exprlist232  */
static	ANTLR3_BITWORD FOLLOW_84_in_exprlist232_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9010CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_exprlist232	= { FOLLOW_84_in_exprlist232_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist236  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist236	= { FOLLOW_expr_in_exprlist236_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_exprlist241  */
static	ANTLR3_BITWORD FOLLOW_84_in_exprlist241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_exprlist241	= { FOLLOW_84_in_exprlist241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr8_in_expr261  */
static	ANTLR3_BITWORD FOLLOW_expr8_in_expr261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr8_in_expr261	= { FOLLOW_expr8_in_expr261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cond_in_expr266  */
static	ANTLR3_BITWORD FOLLOW_cond_in_expr266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cond_in_expr266	= { FOLLOW_cond_in_expr266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expr271  */
static	ANTLR3_BITWORD FOLLOW_95_in_expr271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expr271	= { FOLLOW_95_in_expr271_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_expr273  */
static	ANTLR3_BITWORD FOLLOW_70_in_expr273_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9010CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_expr273	= { FOLLOW_70_in_expr273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr277  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr277	= { FOLLOW_expr_in_expr277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_expr280  */
static	ANTLR3_BITWORD FOLLOW_84_in_expr280_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9010CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_expr280	= { FOLLOW_84_in_expr280_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr284  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr284	= { FOLLOW_expr_in_expr284_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_expr287  */
static	ANTLR3_BITWORD FOLLOW_84_in_expr287_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CCC1) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_expr287	= { FOLLOW_84_in_expr287_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr291  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr291	= { FOLLOW_expr_in_expr291_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_expr294  */
static	ANTLR3_BITWORD FOLLOW_71_in_expr294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_expr294	= { FOLLOW_71_in_expr294_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_expr298  */
static	ANTLR3_BITWORD FOLLOW_block_in_expr298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_expr298	= { FOLLOW_block_in_expr298_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expr336  */
static	ANTLR3_BITWORD FOLLOW_98_in_expr336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expr336	= { FOLLOW_98_in_expr336_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_expr338  */
static	ANTLR3_BITWORD FOLLOW_70_in_expr338_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CCC1) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_expr338	= { FOLLOW_70_in_expr338_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr342  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr342	= { FOLLOW_expr_in_expr342_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_expr345  */
static	ANTLR3_BITWORD FOLLOW_71_in_expr345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_expr345	= { FOLLOW_71_in_expr345_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_expr349  */
static	ANTLR3_BITWORD FOLLOW_block_in_expr349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_expr349	= { FOLLOW_block_in_expr349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_expr378  */
static	ANTLR3_BITWORD FOLLOW_97_in_expr378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_expr378	= { FOLLOW_97_in_expr378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_expr382  */
static	ANTLR3_BITWORD FOLLOW_name_in_expr382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_expr382	= { FOLLOW_name_in_expr382_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_expr385  */
static	ANTLR3_BITWORD FOLLOW_87_in_expr385_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_expr385	= { FOLLOW_87_in_expr385_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr389  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr389	= { FOLLOW_expr_in_expr389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_expr410  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_expr410_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_expr410	= { FOLLOW_RETURN_in_expr410_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr412  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr412	= { FOLLOW_expr_in_expr412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERRUPT_in_expr425  */
static	ANTLR3_BITWORD FOLLOW_INTERRUPT_in_expr425_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERRUPT_in_expr425	= { FOLLOW_INTERRUPT_in_expr425_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr427  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr427	= { FOLLOW_expr_in_expr427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr7_in_expr8448  */
static	ANTLR3_BITWORD FOLLOW_expr7_in_expr8448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000891208) };
static  ANTLR3_BITSET_LIST FOLLOW_expr7_in_expr8448	= { FOLLOW_expr7_in_expr8448_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_expr8457  */
static	ANTLR3_BITWORD FOLLOW_87_in_expr8457_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_expr8457	= { FOLLOW_87_in_expr8457_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8462  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8462	= { FOLLOW_expr_in_expr8462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_expr8479  */
static	ANTLR3_BITWORD FOLLOW_76_in_expr8479_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_expr8479	= { FOLLOW_76_in_expr8479_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8483  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8483	= { FOLLOW_expr_in_expr8483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_80_in_expr8502  */
static	ANTLR3_BITWORD FOLLOW_80_in_expr8502_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_80_in_expr8502	= { FOLLOW_80_in_expr8502_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8506  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8506	= { FOLLOW_expr_in_expr8506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_73_in_expr8525  */
static	ANTLR3_BITWORD FOLLOW_73_in_expr8525_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_73_in_expr8525	= { FOLLOW_73_in_expr8525_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8529  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8529	= { FOLLOW_expr_in_expr8529_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_expr8548  */
static	ANTLR3_BITWORD FOLLOW_83_in_expr8548_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_expr8548	= { FOLLOW_83_in_expr8548_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8552  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8552	= { FOLLOW_expr_in_expr8552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_expr8571  */
static	ANTLR3_BITWORD FOLLOW_67_in_expr8571_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_expr8571	= { FOLLOW_67_in_expr8571_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8575  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8575	= { FOLLOW_expr_in_expr8575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr7605  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr7605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr7605	= { FOLLOW_expr6_in_expr7605_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_100_in_expr7612  */
static	ANTLR3_BITWORD FOLLOW_100_in_expr7612_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_100_in_expr7612	= { FOLLOW_100_in_expr7612_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr7616  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr7616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr7616	= { FOLLOW_expr6_in_expr7616_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6640  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6640	= { FOLLOW_expr5_in_expr6640_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_expr6647  */
static	ANTLR3_BITWORD FOLLOW_69_in_expr6647_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_expr6647	= { FOLLOW_69_in_expr6647_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6651  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6651	= { FOLLOW_expr5_in_expr6651_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5675  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5675	= { FOLLOW_expr4_in_expr5675_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_101_in_expr5682  */
static	ANTLR3_BITWORD FOLLOW_101_in_expr5682_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_101_in_expr5682	= { FOLLOW_101_in_expr5682_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5686  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5686_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5686	= { FOLLOW_expr4_in_expr5686_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4710  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4710_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4710	= { FOLLOW_expr3_in_expr4710_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_expr4717  */
static	ANTLR3_BITWORD FOLLOW_68_in_expr4717_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_expr4717	= { FOLLOW_68_in_expr4717_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4721  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4721	= { FOLLOW_expr3_in_expr4721_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3746  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000000000D600002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3746	= { FOLLOW_expr2_in_expr3746_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_85_in_expr3756  */
static	ANTLR3_BITWORD FOLLOW_85_in_expr3756_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_85_in_expr3756	= { FOLLOW_85_in_expr3756_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3760  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000000000D600002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3760	= { FOLLOW_expr2_in_expr3760_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_expr3777  */
static	ANTLR3_BITWORD FOLLOW_90_in_expr3777_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_expr3777	= { FOLLOW_90_in_expr3777_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3781  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000000000D600002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3781	= { FOLLOW_expr2_in_expr3781_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_expr3798  */
static	ANTLR3_BITWORD FOLLOW_88_in_expr3798_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_expr3798	= { FOLLOW_88_in_expr3798_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3802  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000000000D600002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3802	= { FOLLOW_expr2_in_expr3802_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_expr3819  */
static	ANTLR3_BITWORD FOLLOW_65_in_expr3819_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_expr3819	= { FOLLOW_65_in_expr3819_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3823  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000000000D600002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3823	= { FOLLOW_expr2_in_expr3823_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_expr3840  */
static	ANTLR3_BITWORD FOLLOW_86_in_expr3840_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_expr3840	= { FOLLOW_86_in_expr3840_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3844  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000000000D600002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3844	= { FOLLOW_expr2_in_expr3844_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_expr3861  */
static	ANTLR3_BITWORD FOLLOW_91_in_expr3861_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_expr3861	= { FOLLOW_91_in_expr3861_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3865  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000000000D600002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3865	= { FOLLOW_expr2_in_expr3865_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2892  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000004400) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2892	= { FOLLOW_expr1_in_expr2892_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_expr2901  */
static	ANTLR3_BITWORD FOLLOW_74_in_expr2901_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_expr2901	= { FOLLOW_74_in_expr2901_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2905  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000004400) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2905	= { FOLLOW_expr1_in_expr2905_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_expr2922  */
static	ANTLR3_BITWORD FOLLOW_78_in_expr2922_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_expr2922	= { FOLLOW_78_in_expr2922_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2926  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000004400) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2926	= { FOLLOW_expr1_in_expr2926_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1954  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000040104) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1954	= { FOLLOW_term_in_expr1954_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_72_in_expr1963  */
static	ANTLR3_BITWORD FOLLOW_72_in_expr1963_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_72_in_expr1963	= { FOLLOW_72_in_expr1963_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1967  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000040104) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1967	= { FOLLOW_term_in_expr1967_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_expr1984  */
static	ANTLR3_BITWORD FOLLOW_82_in_expr1984_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_expr1984	= { FOLLOW_82_in_expr1984_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1988  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000040104) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1988	= { FOLLOW_term_in_expr1988_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_expr11005  */
static	ANTLR3_BITWORD FOLLOW_66_in_expr11005_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_expr11005	= { FOLLOW_66_in_expr11005_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr11009  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr11009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000040104) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr11009	= { FOLLOW_term_in_expr11009_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_75_in_term1034  */
static	ANTLR3_BITWORD FOLLOW_75_in_term1034_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_75_in_term1034	= { FOLLOW_75_in_term1034_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1036  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1036	= { FOLLOW_term_in_term1036_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_79_in_term1051  */
static	ANTLR3_BITWORD FOLLOW_79_in_term1051_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_79_in_term1051	= { FOLLOW_79_in_term1051_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1053  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1053	= { FOLLOW_term_in_term1053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_term1068  */
static	ANTLR3_BITWORD FOLLOW_74_in_term1068_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_term1068	= { FOLLOW_74_in_term1068_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1070  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1070	= { FOLLOW_term_in_term1070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_term1083  */
static	ANTLR3_BITWORD FOLLOW_78_in_term1083_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_term1083	= { FOLLOW_78_in_term1083_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1085  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1085	= { FOLLOW_term_in_term1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_term1098  */
static	ANTLR3_BITWORD FOLLOW_64_in_term1098_bits[]	= { ANTLR3_UINT64_LIT(0x12C04816B0000000), ANTLR3_UINT64_LIT(0x000000081000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_term1098	= { FOLLOW_64_in_term1098_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1100  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1100	= { FOLLOW_term_in_term1100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_in_term1113  */
static	ANTLR3_BITWORD FOLLOW_postfix_in_term1113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_in_term1113	= { FOLLOW_postfix_in_term1113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_postfix1126  */
static	ANTLR3_BITWORD FOLLOW_primary_in_postfix1126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000010028840) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_postfix1126	= { FOLLOW_primary_in_postfix1126_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_75_in_postfix1135  */
static	ANTLR3_BITWORD FOLLOW_75_in_postfix1135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000010028840) };
static  ANTLR3_BITSET_LIST FOLLOW_75_in_postfix1135	= { FOLLOW_75_in_postfix1135_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_79_in_postfix1151  */
static	ANTLR3_BITWORD FOLLOW_79_in_postfix1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000010028840) };
static  ANTLR3_BITSET_LIST FOLLOW_79_in_postfix1151	= { FOLLOW_79_in_postfix1151_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_81_in_postfix1167  */
static	ANTLR3_BITWORD FOLLOW_81_in_postfix1167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_81_in_postfix1167	= { FOLLOW_81_in_postfix1167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_postfix1171  */
static	ANTLR3_BITWORD FOLLOW_name_in_postfix1171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000010028840) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_postfix1171	= { FOLLOW_name_in_postfix1171_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_postfix1188  */
static	ANTLR3_BITWORD FOLLOW_92_in_postfix1188_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_postfix1188	= { FOLLOW_92_in_postfix1188_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_postfix1192  */
static	ANTLR3_BITWORD FOLLOW_expr_in_postfix1192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_postfix1192	= { FOLLOW_expr_in_postfix1192_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_postfix1194  */
static	ANTLR3_BITWORD FOLLOW_93_in_postfix1194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000010028840) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_postfix1194	= { FOLLOW_93_in_postfix1194_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_postfix1211  */
static	ANTLR3_BITWORD FOLLOW_70_in_postfix1211_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_postfix1211	= { FOLLOW_70_in_postfix1211_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_postfix1215  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_postfix1215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_postfix1215	= { FOLLOW_arglist_in_postfix1215_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_postfix1217  */
static	ANTLR3_BITWORD FOLLOW_71_in_postfix1217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000010028840) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_postfix1217	= { FOLLOW_71_in_postfix1217_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primary1243  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primary1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primary1243	= { FOLLOW_literal_in_primary1243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_primary1248  */
static	ANTLR3_BITWORD FOLLOW_array_in_primary1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_primary1248	= { FOLLOW_array_in_primary1248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELF_in_primary1253  */
static	ANTLR3_BITWORD FOLLOW_SELF_in_primary1253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SELF_in_primary1253	= { FOLLOW_SELF_in_primary1253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_primary1258  */
static	ANTLR3_BITWORD FOLLOW_name_in_primary1258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_primary1258	= { FOLLOW_name_in_primary1258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_primary1273  */
static	ANTLR3_BITWORD FOLLOW_70_in_primary1273_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_primary1273	= { FOLLOW_70_in_primary1273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_primary1275  */
static	ANTLR3_BITWORD FOLLOW_expr_in_primary1275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_primary1275	= { FOLLOW_expr_in_primary1275_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_primary1277  */
static	ANTLR3_BITWORD FOLLOW_71_in_primary1277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_primary1277	= { FOLLOW_71_in_primary1277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_in_primary1291  */
static	ANTLR3_BITWORD FOLLOW_object_in_primary1291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_in_primary1291	= { FOLLOW_object_in_primary1291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_primary1296  */
static	ANTLR3_BITWORD FOLLOW_block_in_primary1296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_primary1296	= { FOLLOW_block_in_primary1296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_cond1307  */
static	ANTLR3_BITWORD FOLLOW_96_in_cond1307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_cond1307	= { FOLLOW_96_in_cond1307_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_cond1309  */
static	ANTLR3_BITWORD FOLLOW_70_in_cond1309_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_cond1309	= { FOLLOW_70_in_cond1309_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_cond1311  */
static	ANTLR3_BITWORD FOLLOW_expr_in_cond1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_cond1311	= { FOLLOW_expr_in_cond1311_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_cond1313  */
static	ANTLR3_BITWORD FOLLOW_71_in_cond1313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_cond1313	= { FOLLOW_71_in_cond1313_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_cond1317  */
static	ANTLR3_BITWORD FOLLOW_block_in_cond1317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_cond1317	= { FOLLOW_block_in_cond1317_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_cond1319  */
static	ANTLR3_BITWORD FOLLOW_94_in_cond1319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000900000000) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_cond1319	= { FOLLOW_94_in_cond1319_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_cond1326  */
static	ANTLR3_BITWORD FOLLOW_block_in_cond1326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_cond1326	= { FOLLOW_block_in_cond1326_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cond_in_cond1347  */
static	ANTLR3_BITWORD FOLLOW_cond_in_cond1347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cond_in_cond1347	= { FOLLOW_cond_in_cond1347_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_99_in_block1374  */
static	ANTLR3_BITWORD FOLLOW_99_in_block1374_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000004F9010CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_99_in_block1374	= { FOLLOW_99_in_block1374_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_block1376  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_block1376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_block1376	= { FOLLOW_exprlist_in_block1376_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_102_in_block1378  */
static	ANTLR3_BITWORD FOLLOW_102_in_block1378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_102_in_block1378	= { FOLLOW_102_in_block1378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_name1390  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_name1390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_name1390	= { FOLLOW_IDENT_in_name1390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1399  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1399	= { FOLLOW_name_in_varlist1399_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_varlist1403  */
static	ANTLR3_BITWORD FOLLOW_77_in_varlist1403_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_varlist1403	= { FOLLOW_77_in_varlist1403_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1406  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1406	= { FOLLOW_name_in_varlist1406_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_arglist1427  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_arglist1427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_arglist1427	= { FOLLOW_exprlist_for_literal_in_arglist1427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_array1442  */
static	ANTLR3_BITWORD FOLLOW_92_in_array1442_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000FB000EC41) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_array1442	= { FOLLOW_92_in_array1442_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_array1444  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_array1444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020002000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_array1444	= { FOLLOW_exprlist_for_literal_in_array1444_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_array1446  */
static	ANTLR3_BITWORD FOLLOW_77_in_array1446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_array1446	= { FOLLOW_77_in_array1446_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_array1449  */
static	ANTLR3_BITWORD FOLLOW_93_in_array1449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_array1449	= { FOLLOW_93_in_array1449_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1465  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1465	= { FOLLOW_expr_in_exprlist_for_literal1465_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_exprlist_for_literal1468  */
static	ANTLR3_BITWORD FOLLOW_77_in_exprlist_for_literal1468_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_exprlist_for_literal1468	= { FOLLOW_77_in_exprlist_for_literal1468_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1470  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1470	= { FOLLOW_expr_in_exprlist_for_literal1470_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_99_in_object1487  */
static	ANTLR3_BITWORD FOLLOW_99_in_object1487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_99_in_object1487	= { FOLLOW_99_in_object1487_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1490  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000004000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1490	= { FOLLOW_object_pair_in_object1490_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_object1493  */
static	ANTLR3_BITWORD FOLLOW_77_in_object1493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_object1493	= { FOLLOW_77_in_object1493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1495  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000004000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1495	= { FOLLOW_object_pair_in_object1495_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_object1500  */
static	ANTLR3_BITWORD FOLLOW_77_in_object1500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_object1500	= { FOLLOW_77_in_object1500_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_102_in_object1506  */
static	ANTLR3_BITWORD FOLLOW_102_in_object1506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_102_in_object1506	= { FOLLOW_102_in_object1506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_object_pair1522  */
static	ANTLR3_BITWORD FOLLOW_name_in_object_pair1522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_object_pair1522	= { FOLLOW_name_in_object_pair1522_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_89_in_object_pair1524  */
static	ANTLR3_BITWORD FOLLOW_89_in_object_pair1524_bits[]	= { ANTLR3_UINT64_LIT(0x12D0481EB0000000), ANTLR3_UINT64_LIT(0x0000000F9000CC41) };
static  ANTLR3_BITSET_LIST FOLLOW_89_in_object_pair1524	= { FOLLOW_89_in_object_pair1524_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_object_pair1526  */
static	ANTLR3_BITWORD FOLLOW_expr_in_object_pair1526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_object_pair1526	= { FOLLOW_expr_in_object_pair1526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numeric_literal_in_literal1545  */
static	ANTLR3_BITWORD FOLLOW_numeric_literal_in_literal1545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numeric_literal_in_literal1545	= { FOLLOW_numeric_literal_in_literal1545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_literal_in_literal1550  */
static	ANTLR3_BITWORD FOLLOW_boolean_literal_in_literal1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_literal_in_literal1550	= { FOLLOW_boolean_literal_in_literal1550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_literal1555  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_literal1555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_literal1555	= { FOLLOW_string_literal_in_literal1555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NULL_LITERAL_in_literal1560  */
static	ANTLR3_BITWORD FOLLOW_NULL_LITERAL_in_literal1560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NULL_LITERAL_in_literal1560	= { FOLLOW_NULL_LITERAL_in_literal1560_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_in_literal1565  */
static	ANTLR3_BITWORD FOLLOW_FUNC_in_literal1565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_in_literal1565	= { FOLLOW_FUNC_in_literal1565_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_literal1567  */
static	ANTLR3_BITWORD FOLLOW_70_in_literal1567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_literal1567	= { FOLLOW_70_in_literal1567_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_varlist_in_literal1569  */
static	ANTLR3_BITWORD FOLLOW_varlist_in_literal1569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_varlist_in_literal1569	= { FOLLOW_varlist_in_literal1569_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_literal1571  */
static	ANTLR3_BITWORD FOLLOW_71_in_literal1571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_literal1571	= { FOLLOW_71_in_literal1571_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_literal1573  */
static	ANTLR3_BITWORD FOLLOW_block_in_literal1573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_literal1573	= { FOLLOW_block_in_literal1573_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_in_synpred1_Donut1287  */
static	ANTLR3_BITWORD FOLLOW_object_in_synpred1_Donut1287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_in_synpred1_Donut1287	= { FOLLOW_object_in_synpred1_Donut1287_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start source
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:60:1: source : program EOF -> program ;
 */
static DonutParser_source_return
source(pDonutParser ctx)
{
    DonutParser_source_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EOF2;
    DonutParser_program_return program1;
    #undef	RETURN_TYPE_program1
    #define	RETURN_TYPE_program1 DonutParser_program_return

    pANTLR3_BASE_TREE EOF2_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_program;
    /* Initialize rule variables
     */

    root_0 = NULL;

    EOF2       = NULL;
    program1.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    EOF2_tree   = NULL;

    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_program   = NULL;
    #define CREATE_stream_program  if (stream_program == NULL) {stream_program = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule program"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:60:8: ( program EOF -> program )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:60:10: program EOF
        {
            FOLLOWPUSH(FOLLOW_program_in_source195);
            program1=program(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_program; stream_program->add(stream_program, program1.tree, NULL); }

            EOF2 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_source197);
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF2, NULL); }


            /* AST REWRITE
             * elements          : program
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 60:22: -> program
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_program == NULL ? NULL : stream_program->nextTree(stream_program));

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulesourceEx; /* Prevent compiler warnings */
    rulesourceEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_program != NULL) stream_program->free(stream_program);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end source */

/**
 * $ANTLR start program
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:62:1: program : exprlist -> ^( CLOS VARS exprlist ) ;
 */
static DonutParser_program_return
program(pDonutParser ctx)
{
    DonutParser_program_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_return exprlist3;
    #undef	RETURN_TYPE_exprlist3
    #define	RETURN_TYPE_exprlist3 DonutParser_exprlist_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist3.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:62:9: ( exprlist -> ^( CLOS VARS exprlist ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:62:11: exprlist
        {
            FOLLOWPUSH(FOLLOW_exprlist_in_program209);
            exprlist3=exprlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist3.tree, NULL); }

            /* AST REWRITE
             * elements          : exprlist
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 62:20: -> ^( CLOS VARS exprlist )
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:62:23: ^( CLOS VARS exprlist )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end program */

/**
 * $ANTLR start exprlist
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:1: exprlist : ( expr )? ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) ;
 */
static DonutParser_exprlist_return
exprlist(pDonutParser ctx)
{
    DonutParser_exprlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal5;
    pANTLR3_COMMON_TOKEN    char_literal7;
    DonutParser_expr_return expr4;
    #undef	RETURN_TYPE_expr4
    #define	RETURN_TYPE_expr4 DonutParser_expr_return

    DonutParser_expr_return expr6;
    #undef	RETURN_TYPE_expr6
    #define	RETURN_TYPE_expr6 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal5_tree;
    pANTLR3_BASE_TREE char_literal7_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_84;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal5       = NULL;
    char_literal7       = NULL;
    expr4.tree = NULL;

    expr6.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal5_tree   = NULL;
    char_literal7_tree   = NULL;

    stream_84   = NULL;
    #define CREATE_stream_84  if (stream_84 == NULL) {stream_84 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 84"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:10: ( ( expr )? ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:12: ( expr )? ( ( ';' )+ expr )* ( ';' )?
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:12: ( expr )?
            {
                int alt1=2;
                switch ( LA(1) )
                {
                    case FALSE_LITERAL:
                    case FLOAT_LITERAL:
                    case FUNC:
                    case HEX_LITERAL:
                    case IDENT:
                    case INTERRUPT:
                    case INT_LITERAL:
                    case NULL_LITERAL:
                    case OCT_LITERAL:
                    case RETURN:
                    case SELF:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case TRUE_LITERAL:
                    case 64:
                    case 70:
                    case 74:
                    case 75:
                    case 78:
                    case 79:
                    case 92:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:12: expr
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist227);
            	        expr4=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr4.tree, NULL); }

            	    }
            	    break;

                }
            }

            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:18: ( ( ';' )+ expr )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case 84:
                	{
                		switch ( LA(2) )
                		{
                		case FALSE_LITERAL:
                		case FLOAT_LITERAL:
                		case FUNC:
                		case HEX_LITERAL:
                		case IDENT:
                		case INTERRUPT:
                		case INT_LITERAL:
                		case NULL_LITERAL:
                		case OCT_LITERAL:
                		case RETURN:
                		case SELF:
                		case STRING_DOUBLE:
                		case STRING_SINGLE:
                		case TRUE_LITERAL:
                		case 64:
                		case 70:
                		case 74:
                		case 75:
                		case 78:
                		case 79:
                		case 84:
                		case 92:
                		case 95:
                		case 96:
                		case 97:
                		case 98:
                		case 99:
                			{
                				alt3=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:19: ( ';' )+ expr
            	    {
            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:19: ( ';' )+
            	        {
            	            int cnt2=0;

            	            for (;;)
            	            {
            	                int alt2=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case 84:
            	        		{
            	        			alt2=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt2)
            	        	{
            	        	    case 1:
            	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:20: ';'
            	        	        {
            	        	            char_literal5 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_exprlist232);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleexprlistEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return retval;
            	        	            }
            	        	             
            	        	            if ( BACKTRACKING==0 ) { CREATE_stream_84; stream_84->add(stream_84, char_literal5, NULL); }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt2 >= 1 )
            	        		{
            	        		    goto loop2;
            	        		}
            	        		if (BACKTRACKING>0)
            	        		{
            	        		    FAILEDFLAG = ANTLR3_TRUE;
            	        		    return retval;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleexprlistEx;
            	        	}
            	        	cnt2++;
            	            }
            	            loop2: ;	/* Jump to here if this rule does not match */
            	        }

            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist236);
            	        expr6=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:33: ( ';' )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case 84:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:34: ';'
            	    {
            	        char_literal7 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_exprlist241);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_84; stream_84->add(stream_84, char_literal7, NULL); }


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 64:40: -> ^( CONT ( expr )* )
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:43: ^( CONT ( expr )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
            	        , root_1));

            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:64:50: ( expr )*
            	        {
            	        	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	}
            	        	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlistEx; /* Prevent compiler warnings */
    ruleexprlistEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_84 != NULL) stream_84->free(stream_84);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist */

/**
 * $ANTLR start expr
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:66:1: expr : ( expr8 | cond | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' fd= block -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd) | 'while' '(' (fb= expr )? ')' fd= block -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd) | 'var' nm= name ( '=' val= expr )? -> ^( VAR $nm ( $val)? ) | RETURN expr -> ^( RETURN expr ) | INTERRUPT expr -> ^( INTERRUPT expr ) );
 */
static DonutParser_expr_return
expr(pDonutParser ctx)
{
    DonutParser_expr_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal10;
    pANTLR3_COMMON_TOKEN    char_literal11;
    pANTLR3_COMMON_TOKEN    char_literal12;
    pANTLR3_COMMON_TOKEN    char_literal13;
    pANTLR3_COMMON_TOKEN    char_literal14;
    pANTLR3_COMMON_TOKEN    string_literal15;
    pANTLR3_COMMON_TOKEN    char_literal16;
    pANTLR3_COMMON_TOKEN    char_literal17;
    pANTLR3_COMMON_TOKEN    string_literal18;
    pANTLR3_COMMON_TOKEN    char_literal19;
    pANTLR3_COMMON_TOKEN    RETURN20;
    pANTLR3_COMMON_TOKEN    INTERRUPT22;
    DonutParser_expr_return fa;
    #undef	RETURN_TYPE_fa
    #define	RETURN_TYPE_fa DonutParser_expr_return

    DonutParser_expr_return fb;
    #undef	RETURN_TYPE_fb
    #define	RETURN_TYPE_fb DonutParser_expr_return

    DonutParser_expr_return fc;
    #undef	RETURN_TYPE_fc
    #define	RETURN_TYPE_fc DonutParser_expr_return

    DonutParser_block_return fd;
    #undef	RETURN_TYPE_fd
    #define	RETURN_TYPE_fd DonutParser_block_return

    DonutParser_name_return nm;
    #undef	RETURN_TYPE_nm
    #define	RETURN_TYPE_nm DonutParser_name_return

    DonutParser_expr_return val;
    #undef	RETURN_TYPE_val
    #define	RETURN_TYPE_val DonutParser_expr_return

    DonutParser_expr8_return expr88;
    #undef	RETURN_TYPE_expr88
    #define	RETURN_TYPE_expr88 DonutParser_expr8_return

    DonutParser_cond_return cond9;
    #undef	RETURN_TYPE_cond9
    #define	RETURN_TYPE_cond9 DonutParser_cond_return

    DonutParser_expr_return expr21;
    #undef	RETURN_TYPE_expr21
    #define	RETURN_TYPE_expr21 DonutParser_expr_return

    DonutParser_expr_return expr23;
    #undef	RETURN_TYPE_expr23
    #define	RETURN_TYPE_expr23 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal10_tree;
    pANTLR3_BASE_TREE char_literal11_tree;
    pANTLR3_BASE_TREE char_literal12_tree;
    pANTLR3_BASE_TREE char_literal13_tree;
    pANTLR3_BASE_TREE char_literal14_tree;
    pANTLR3_BASE_TREE string_literal15_tree;
    pANTLR3_BASE_TREE char_literal16_tree;
    pANTLR3_BASE_TREE char_literal17_tree;
    pANTLR3_BASE_TREE string_literal18_tree;
    pANTLR3_BASE_TREE char_literal19_tree;
    pANTLR3_BASE_TREE RETURN20_tree;
    pANTLR3_BASE_TREE INTERRUPT22_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_98;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_97;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_95;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTERRUPT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_84;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RETURN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal10       = NULL;
    char_literal11       = NULL;
    char_literal12       = NULL;
    char_literal13       = NULL;
    char_literal14       = NULL;
    string_literal15       = NULL;
    char_literal16       = NULL;
    char_literal17       = NULL;
    string_literal18       = NULL;
    char_literal19       = NULL;
    RETURN20       = NULL;
    INTERRUPT22       = NULL;
    fa.tree = NULL;

    fb.tree = NULL;

    fc.tree = NULL;

    fd.tree = NULL;

    nm.tree = NULL;

    val.tree = NULL;

    expr88.tree = NULL;

    cond9.tree = NULL;

    expr21.tree = NULL;

    expr23.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal10_tree   = NULL;
    char_literal11_tree   = NULL;
    char_literal12_tree   = NULL;
    char_literal13_tree   = NULL;
    char_literal14_tree   = NULL;
    string_literal15_tree   = NULL;
    char_literal16_tree   = NULL;
    char_literal17_tree   = NULL;
    string_literal18_tree   = NULL;
    char_literal19_tree   = NULL;
    RETURN20_tree   = NULL;
    INTERRUPT22_tree   = NULL;

    stream_98   = NULL;
    #define CREATE_stream_98  if (stream_98 == NULL) {stream_98 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 98"); } 
    stream_97   = NULL;
    #define CREATE_stream_97  if (stream_97 == NULL) {stream_97 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 97"); } 
    stream_95   = NULL;
    #define CREATE_stream_95  if (stream_95 == NULL) {stream_95 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 95"); } 
    stream_INTERRUPT   = NULL;
    #define CREATE_stream_INTERRUPT  if (stream_INTERRUPT == NULL) {stream_INTERRUPT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTERRUPT"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_84   = NULL;
    #define CREATE_stream_84  if (stream_84 == NULL) {stream_84 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 84"); } 
    stream_RETURN   = NULL;
    #define CREATE_stream_RETURN  if (stream_RETURN == NULL) {stream_RETURN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RETURN"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:67:2: ( expr8 | cond | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' fd= block -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd) | 'while' '(' (fb= expr )? ')' fd= block -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd) | 'var' nm= name ( '=' val= expr )? -> ^( VAR $nm ( $val)? ) | RETURN expr -> ^( RETURN expr ) | INTERRUPT expr -> ^( INTERRUPT expr ) )

            ANTLR3_UINT32 alt10;

            alt10=7;

            switch ( LA(1) )
            {
            case FALSE_LITERAL:
            case FLOAT_LITERAL:
            case FUNC:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case NULL_LITERAL:
            case OCT_LITERAL:
            case SELF:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case TRUE_LITERAL:
            case 64:
            case 70:
            case 74:
            case 75:
            case 78:
            case 79:
            case 92:
            case 99:
            	{
            		alt10=1;
            	}
                break;
            case 96:
            	{
            		alt10=2;
            	}
                break;
            case 95:
            	{
            		alt10=3;
            	}
                break;
            case 98:
            	{
            		alt10=4;
            	}
                break;
            case 97:
            	{
            		alt10=5;
            	}
                break;
            case RETURN:
            	{
            		alt10=6;
            	}
                break;
            case INTERRUPT:
            	{
            		alt10=7;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 10;
                EXCEPTION->state        = 0;


                goto ruleexprEx;

            }

            switch (alt10)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:67:4: expr8
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_expr8_in_expr261);
        	        expr88=expr8(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr88.tree);

        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:68:4: cond
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_cond_in_expr266);
        	        cond9=cond(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cond9.tree);

        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:4: 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' fd= block
        	    {
        	        string_literal10 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_expr271);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_95; stream_95->add(stream_95, string_literal10, NULL); }


        	        char_literal11 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_expr273);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal11, NULL); }


        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:16: (fa= expr )?
        	        {
        	            int alt5=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 64:
        	                case 70:
        	                case 74:
        	                case 75:
        	                case 78:
        	                case 79:
        	                case 92:
        	                case 95:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                	{
        	                		alt5=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt5)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:16: fa= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr277);
        	        	        fa=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fa.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal12 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_expr280);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_84; stream_84->add(stream_84, char_literal12, NULL); }


        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:29: (fb= expr )?
        	        {
        	            int alt6=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 64:
        	                case 70:
        	                case 74:
        	                case 75:
        	                case 78:
        	                case 79:
        	                case 92:
        	                case 95:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                	{
        	                		alt6=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:29: fb= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr284);
        	        	        fb=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fb.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal13 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_expr287);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_84; stream_84->add(stream_84, char_literal13, NULL); }


        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:42: (fc= expr )?
        	        {
        	            int alt7=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 64:
        	                case 70:
        	                case 74:
        	                case 75:
        	                case 78:
        	                case 79:
        	                case 92:
        	                case 95:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                	{
        	                		alt7=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt7)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:42: fc= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr291);
        	        	        fc=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fc.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_expr294);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_71; stream_71->add(stream_71, char_literal14, NULL); }


        	        FOLLOWPUSH(FOLLOW_block_in_expr298);
        	        fd=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, fd.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : fb, fc, fd, fa
        	         * token labels      : 
        	         * rule labels       : retval, fa, fd, fb, fc
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fa;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fd;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fb;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fc;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_fa=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fa", fa.tree != NULL ? fa.tree : NULL);
        	        	stream_fd=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fd", fd.tree != NULL ? fd.tree : NULL);
        	        	stream_fb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fb", fb.tree != NULL ? fb.tree : NULL);
        	        	stream_fc=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fc", fc.tree != NULL ? fc.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 69:62: -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd)
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:65: ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR")
        	        	        , root_1));

        	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:71: ^( CONT ( $fa)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:79: ( $fa)?
        	        	            {
        	        	            	if ( (stream_fa != NULL && stream_fa->hasNext(stream_fa))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fa == NULL ? NULL : stream_fa->nextTree(stream_fa));

        	        	            	}
        	        	            	if ( stream_fa != NULL) stream_fa->reset(stream_fa);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:84: ^( CONT ( $fb)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:92: ( $fb)?
        	        	            {
        	        	            	if ( (stream_fb != NULL && stream_fb->hasNext(stream_fb))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fb == NULL ? NULL : stream_fb->nextTree(stream_fb));

        	        	            	}
        	        	            	if ( stream_fb != NULL) stream_fb->reset(stream_fb);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:97: ^( CONT ( $fc)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:69:105: ( $fc)?
        	        	            {
        	        	            	if ( (stream_fc != NULL && stream_fc->hasNext(stream_fc))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fc == NULL ? NULL : stream_fc->nextTree(stream_fc));

        	        	            	}
        	        	            	if ( stream_fc != NULL) stream_fc->reset(stream_fc);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fd == NULL ? NULL : stream_fd->nextTree(stream_fd));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_fa != NULL) stream_fa->free(stream_fa);
        	        	if (stream_fd != NULL) stream_fd->free(stream_fd);
        	        	if (stream_fb != NULL) stream_fb->free(stream_fb);
        	        	if (stream_fc != NULL) stream_fc->free(stream_fc);


        	        }
        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:70:4: 'while' '(' (fb= expr )? ')' fd= block
        	    {
        	        string_literal15 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_expr336);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_98; stream_98->add(stream_98, string_literal15, NULL); }


        	        char_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_expr338);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal16, NULL); }


        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:70:18: (fb= expr )?
        	        {
        	            int alt8=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 64:
        	                case 70:
        	                case 74:
        	                case 75:
        	                case 78:
        	                case 79:
        	                case 92:
        	                case 95:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                	{
        	                		alt8=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt8)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:70:18: fb= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr342);
        	        	        fb=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fb.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal17 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_expr345);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_71; stream_71->add(stream_71, char_literal17, NULL); }


        	        FOLLOWPUSH(FOLLOW_block_in_expr349);
        	        fd=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, fd.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : fd, fb
        	         * token labels      : 
        	         * rule labels       : retval, fd, fb
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fd;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fb;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_fd=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fd", fd.tree != NULL ? fd.tree : NULL);
        	        	stream_fb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fb", fb.tree != NULL ? fb.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 70:38: -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd)
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:70:41: ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR")
        	        	        , root_1));

        	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:70:47: ^( CONT )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:70:55: ^( CONT $fb)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_fb == NULL ? NULL : stream_fb->nextTree(stream_fb));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:70:67: ^( CONT )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fd == NULL ? NULL : stream_fd->nextTree(stream_fd));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_fd != NULL) stream_fd->free(stream_fd);
        	        	if (stream_fb != NULL) stream_fb->free(stream_fb);


        	        }
        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:71:4: 'var' nm= name ( '=' val= expr )?
        	    {
        	        string_literal18 = (pANTLR3_COMMON_TOKEN) MATCHT(97, &FOLLOW_97_in_expr378);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_97; stream_97->add(stream_97, string_literal18, NULL); }


        	        FOLLOWPUSH(FOLLOW_name_in_expr382);
        	        nm=name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, nm.tree, NULL); }

        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:71:18: ( '=' val= expr )?
        	        {
        	            int alt9=2;
        	            switch ( LA(1) )
        	            {
        	                case 87:
        	                	{
        	                		alt9=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt9)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:71:19: '=' val= expr
        	        	    {
        	        	        char_literal19 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_expr385);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal19, NULL); }


        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr389);
        	        	        val=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, val.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        /* AST REWRITE
        	         * elements          : val, nm
        	         * token labels      : 
        	         * rule labels       : val, retval, nm
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_val;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nm;

        	        	stream_val=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token val", val.tree != NULL ? val.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_nm=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token nm", nm.tree != NULL ? nm.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 71:34: -> ^( VAR $nm ( $val)? )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:71:37: ^( VAR $nm ( $val)? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_nm == NULL ? NULL : stream_nm->nextTree(stream_nm));

        	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:71:48: ( $val)?
        	        	        {
        	        	        	if ( (stream_val != NULL && stream_val->hasNext(stream_val))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_val == NULL ? NULL : stream_val->nextTree(stream_val));

        	        	        	}
        	        	        	if ( stream_val != NULL) stream_val->reset(stream_val);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_val != NULL) stream_val->free(stream_val);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_nm != NULL) stream_nm->free(stream_nm);


        	        }
        	    }
        	    break;
        	case 6:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:72:4: RETURN expr
        	    {
        	        RETURN20 = (pANTLR3_COMMON_TOKEN) MATCHT(RETURN, &FOLLOW_RETURN_in_expr410);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RETURN; stream_RETURN->add(stream_RETURN, RETURN20, NULL); }


        	        FOLLOWPUSH(FOLLOW_expr_in_expr412);
        	        expr21=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr21.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : RETURN, expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 72:16: -> ^( RETURN expr )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:72:19: ^( RETURN expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        stream_RETURN == NULL ? NULL : stream_RETURN->nextNode(stream_RETURN)
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:73:4: INTERRUPT expr
        	    {
        	        INTERRUPT22 = (pANTLR3_COMMON_TOKEN) MATCHT(INTERRUPT, &FOLLOW_INTERRUPT_in_expr425);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_INTERRUPT; stream_INTERRUPT->add(stream_INTERRUPT, INTERRUPT22, NULL); }


        	        FOLLOWPUSH(FOLLOW_expr_in_expr427);
        	        expr23=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr23.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : expr, INTERRUPT
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 73:19: -> ^( INTERRUPT expr )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:73:22: ^( INTERRUPT expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        stream_INTERRUPT == NULL ? NULL : stream_INTERRUPT->nextNode(stream_INTERRUPT)
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_98 != NULL) stream_98->free(stream_98);
        if (stream_97 != NULL) stream_97->free(stream_97);
        if (stream_95 != NULL) stream_95->free(stream_95);
        if (stream_INTERRUPT != NULL) stream_INTERRUPT->free(stream_INTERRUPT);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_84 != NULL) stream_84->free(stream_84);
        if (stream_RETURN != NULL) stream_RETURN->free(stream_RETURN);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_block != NULL) stream_block->free(stream_block);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr */

/**
 * $ANTLR start expr8
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:76:1: expr8 : (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )? ;
 */
static DonutParser_expr8_return
expr8(pDonutParser ctx)
{
    DonutParser_expr8_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal24;
    pANTLR3_COMMON_TOKEN    string_literal25;
    pANTLR3_COMMON_TOKEN    string_literal26;
    pANTLR3_COMMON_TOKEN    string_literal27;
    pANTLR3_COMMON_TOKEN    string_literal28;
    pANTLR3_COMMON_TOKEN    string_literal29;
    DonutParser_expr7_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr7_return

    DonutParser_expr_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal24_tree;
    pANTLR3_BASE_TREE string_literal25_tree;
    pANTLR3_BASE_TREE string_literal26_tree;
    pANTLR3_BASE_TREE string_literal27_tree;
    pANTLR3_BASE_TREE string_literal28_tree;
    pANTLR3_BASE_TREE string_literal29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_80;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_73;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr7;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal24       = NULL;
    string_literal25       = NULL;
    string_literal26       = NULL;
    string_literal27       = NULL;
    string_literal28       = NULL;
    string_literal29       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal24_tree   = NULL;
    string_literal25_tree   = NULL;
    string_literal26_tree   = NULL;
    string_literal27_tree   = NULL;
    string_literal28_tree   = NULL;
    string_literal29_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_80   = NULL;
    #define CREATE_stream_80  if (stream_80 == NULL) {stream_80 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 80"); } 
    stream_73   = NULL;
    #define CREATE_stream_73  if (stream_73 == NULL) {stream_73 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 73"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_expr7   = NULL;
    #define CREATE_stream_expr7  if (stream_expr7 == NULL) {stream_expr7 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr7"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:76:7: ( (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )? )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:76:9: (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )?
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:76:9: (a= expr7 -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:76:10: a= expr7
            {
                FOLLOWPUSH(FOLLOW_expr7_in_expr8448);
                a=expr7(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr8Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr7; stream_expr7->add(stream_expr7, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 76:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:77:2: ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )?
            {
                int alt11=7;
                switch ( LA(1) )
                {
                    case 87:
                    	{
                    		alt11=1;
                    	}
                        break;
                    case 76:
                    	{
                    		alt11=2;
                    	}
                        break;
                    case 80:
                    	{
                    		alt11=3;
                    	}
                        break;
                    case 73:
                    	{
                    		alt11=4;
                    	}
                        break;
                    case 83:
                    	{
                    		alt11=5;
                    	}
                        break;
                    case 67:
                    	{
                    		alt11=6;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:77:4: '=' b= expr
            	    {
            	        char_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_expr8457);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal24, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8462);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr8
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 77:16: -> ^( ASSIGN $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:77:19: ^( ASSIGN $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:78:4: '+=' b= expr
            	    {
            	        string_literal25 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_expr8479);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_76; stream_76->add(stream_76, string_literal25, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8483);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 78:16: -> ^( ASSIGN_OP ADD $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:78:19: ^( ASSIGN_OP ADD $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:79:4: '-=' b= expr
            	    {
            	        string_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(80, &FOLLOW_80_in_expr8502);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_80; stream_80->add(stream_80, string_literal26, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8506);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr8
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 79:16: -> ^( ASSIGN_OP SUB $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:79:19: ^( ASSIGN_OP SUB $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:80:4: '*=' b= expr
            	    {
            	        string_literal27 = (pANTLR3_COMMON_TOKEN) MATCHT(73, &FOLLOW_73_in_expr8525);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_73; stream_73->add(stream_73, string_literal27, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8529);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 80:16: -> ^( ASSIGN_OP MUL $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:80:19: ^( ASSIGN_OP MUL $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:81:4: '/=' b= expr
            	    {
            	        string_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_expr8548);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, string_literal28, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8552);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 81:16: -> ^( ASSIGN_OP DIV $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:81:19: ^( ASSIGN_OP DIV $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:82:4: '%=' b= expr
            	    {
            	        string_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_expr8571);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_67; stream_67->add(stream_67, string_literal29, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8575);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 82:16: -> ^( ASSIGN_OP MOD $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:82:19: ^( ASSIGN_OP MOD $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr8Ex; /* Prevent compiler warnings */
    ruleexpr8Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_80 != NULL) stream_80->free(stream_80);
        if (stream_73 != NULL) stream_73->free(stream_73);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_expr7 != NULL) stream_expr7->free(stream_expr7);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr8 */

/**
 * $ANTLR start expr7
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:1: expr7 : (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )* ;
 */
static DonutParser_expr7_return
expr7(pDonutParser ctx)
{
    DonutParser_expr7_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal30;
    DonutParser_expr6_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr6_return

    DonutParser_expr6_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr6_return

    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_100;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr6;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal30       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal30_tree   = NULL;

    stream_100   = NULL;
    #define CREATE_stream_100  if (stream_100 == NULL) {stream_100 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 100"); } 
    stream_expr6   = NULL;
    #define CREATE_stream_expr6  if (stream_expr6 == NULL) {stream_expr6 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr6"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:7: ( (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:9: (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:9: (a= expr6 -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:10: a= expr6
            {
                FOLLOWPUSH(FOLLOW_expr6_in_expr7605);
                a=expr6(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr7Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr6; stream_expr6->add(stream_expr6, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 86:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:23: ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case 100:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:24: '|' b= expr6
            	    {
            	        char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(100, &FOLLOW_100_in_expr7612);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr7Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_100; stream_100->add(stream_100, char_literal30, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr6_in_expr7616);
            	        b=expr6(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr7Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr6; stream_expr6->add(stream_expr6, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr7
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 86:36: -> ^( BIT_OR $expr7 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:86:39: ^( BIT_OR $expr7 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr7Ex; /* Prevent compiler warnings */
    ruleexpr7Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_100 != NULL) stream_100->free(stream_100);
        if (stream_expr6 != NULL) stream_expr6->free(stream_expr6);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr7 */

/**
 * $ANTLR start expr6
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:1: expr6 : (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )* ;
 */
static DonutParser_expr6_return
expr6(pDonutParser ctx)
{
    DonutParser_expr6_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal31;
    DonutParser_expr5_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr5_return

    DonutParser_expr5_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr5_return

    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr5;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal31       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal31_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_expr5   = NULL;
    #define CREATE_stream_expr5  if (stream_expr5 == NULL) {stream_expr5 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr5"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:7: ( (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:9: (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:9: (a= expr5 -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:10: a= expr5
            {
                FOLLOWPUSH(FOLLOW_expr5_in_expr6640);
                a=expr5(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr6Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr5; stream_expr5->add(stream_expr5, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 87:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:23: ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )*

            for (;;)
            {
                int alt13=2;
                switch ( LA(1) )
                {
                case 69:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:24: '&' b= expr5
            	    {
            	        char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_expr6647);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_69; stream_69->add(stream_69, char_literal31, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr5_in_expr6651);
            	        b=expr5(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr5; stream_expr5->add(stream_expr5, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr6
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 87:36: -> ^( BIT_AND $expr6 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:87:39: ^( BIT_AND $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr6Ex; /* Prevent compiler warnings */
    ruleexpr6Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_expr5 != NULL) stream_expr5->free(stream_expr5);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr6 */

/**
 * $ANTLR start expr5
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:1: expr5 : (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* ;
 */
static DonutParser_expr5_return
expr5(pDonutParser ctx)
{
    DonutParser_expr5_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal32;
    DonutParser_expr4_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr4_return

    DonutParser_expr4_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr4_return

    pANTLR3_BASE_TREE string_literal32_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_101;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr4;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal32       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal32_tree   = NULL;

    stream_101   = NULL;
    #define CREATE_stream_101  if (stream_101 == NULL) {stream_101 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 101"); } 
    stream_expr4   = NULL;
    #define CREATE_stream_expr4  if (stream_expr4 == NULL) {stream_expr4 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr4"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:7: ( (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:9: (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:9: (a= expr4 -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:10: a= expr4
            {
                FOLLOWPUSH(FOLLOW_expr4_in_expr5675);
                a=expr4(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr5Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr4; stream_expr4->add(stream_expr4, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 88:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:23: ( '||' b= expr4 -> ^( OR $expr5 $b) )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) )
                {
                case 101:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:24: '||' b= expr4
            	    {
            	        string_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(101, &FOLLOW_101_in_expr5682);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_101; stream_101->add(stream_101, string_literal32, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr4_in_expr5686);
            	        b=expr4(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr4; stream_expr4->add(stream_expr4, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr5, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 88:37: -> ^( OR $expr5 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:88:40: ^( OR $expr5 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr5Ex; /* Prevent compiler warnings */
    ruleexpr5Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_101 != NULL) stream_101->free(stream_101);
        if (stream_expr4 != NULL) stream_expr4->free(stream_expr4);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr5 */

/**
 * $ANTLR start expr4
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:1: expr4 : (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* ;
 */
static DonutParser_expr4_return
expr4(pDonutParser ctx)
{
    DonutParser_expr4_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal33;
    DonutParser_expr3_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr3_return

    DonutParser_expr3_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr3_return

    pANTLR3_BASE_TREE string_literal33_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr3;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal33       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal33_tree   = NULL;

    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_expr3   = NULL;
    #define CREATE_stream_expr3  if (stream_expr3 == NULL) {stream_expr3 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr3"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:7: ( (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:9: (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:9: (a= expr3 -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:10: a= expr3
            {
                FOLLOWPUSH(FOLLOW_expr3_in_expr4710);
                a=expr3(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr4Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr3; stream_expr3->add(stream_expr3, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 89:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:23: ( '&&' b= expr3 -> ^( AND $expr4 $b) )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) )
                {
                case 68:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:24: '&&' b= expr3
            	    {
            	        string_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_expr4717);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_68; stream_68->add(stream_68, string_literal33, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr3_in_expr4721);
            	        b=expr3(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr3; stream_expr3->add(stream_expr3, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr4, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 89:37: -> ^( AND $expr4 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:89:40: ^( AND $expr4 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr4Ex; /* Prevent compiler warnings */
    ruleexpr4Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_expr3 != NULL) stream_expr3->free(stream_expr3);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr4 */

/**
 * $ANTLR start expr3
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:91:1: expr3 : (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* ;
 */
static DonutParser_expr3_return
expr3(pDonutParser ctx)
{
    DonutParser_expr3_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    char_literal35;
    pANTLR3_COMMON_TOKEN    string_literal36;
    pANTLR3_COMMON_TOKEN    string_literal37;
    pANTLR3_COMMON_TOKEN    string_literal38;
    pANTLR3_COMMON_TOKEN    string_literal39;
    DonutParser_expr2_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr2_return

    DonutParser_expr2_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr2_return

    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE char_literal35_tree;
    pANTLR3_BASE_TREE string_literal36_tree;
    pANTLR3_BASE_TREE string_literal37_tree;
    pANTLR3_BASE_TREE string_literal38_tree;
    pANTLR3_BASE_TREE string_literal39_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_88;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_85;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal34       = NULL;
    char_literal35       = NULL;
    string_literal36       = NULL;
    string_literal37       = NULL;
    string_literal38       = NULL;
    string_literal39       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal34_tree   = NULL;
    char_literal35_tree   = NULL;
    string_literal36_tree   = NULL;
    string_literal37_tree   = NULL;
    string_literal38_tree   = NULL;
    string_literal39_tree   = NULL;

    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_88   = NULL;
    #define CREATE_stream_88  if (stream_88 == NULL) {stream_88 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 88"); } 
    stream_85   = NULL;
    #define CREATE_stream_85  if (stream_85 == NULL) {stream_85 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 85"); } 
    stream_expr2   = NULL;
    #define CREATE_stream_expr2  if (stream_expr2 == NULL) {stream_expr2 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr2"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:91:7: ( (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:91:9: (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:91:9: (a= expr2 -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:91:10: a= expr2
            {
                FOLLOWPUSH(FOLLOW_expr2_in_expr3746);
                a=expr2(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr3Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 91:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:92:2: ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*

            for (;;)
            {
                int alt16=7;
                switch ( LA(1) )
                {
                case 85:
                	{
                		alt16=1;
                	}
                    break;
                case 90:
                	{
                		alt16=2;
                	}
                    break;
                case 88:
                	{
                		alt16=3;
                	}
                    break;
                case 65:
                	{
                		alt16=4;
                	}
                    break;
                case 86:
                	{
                		alt16=5;
                	}
                    break;
                case 91:
                	{
                		alt16=6;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:92:4: '<' b= expr2
            	    {
            	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(85, &FOLLOW_85_in_expr3756);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_85; stream_85->add(stream_85, char_literal34, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3760);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 92:16: -> ^( CLT $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:92:19: ^( CLT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLT, (pANTLR3_UINT8)"CLT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:93:4: '>' b= expr2
            	    {
            	        char_literal35 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_expr3777);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_90; stream_90->add(stream_90, char_literal35, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3781);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 93:16: -> ^( CGT $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:93:19: ^( CGT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGT, (pANTLR3_UINT8)"CGT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:94:4: '==' b= expr2
            	    {
            	        string_literal36 = (pANTLR3_COMMON_TOKEN) MATCHT(88, &FOLLOW_88_in_expr3798);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_88; stream_88->add(stream_88, string_literal36, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3802);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 94:17: -> ^( CEQ $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:94:20: ^( CEQ $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CEQ, (pANTLR3_UINT8)"CEQ")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:95:4: '!=' b= expr2
            	    {
            	        string_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_expr3819);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_65; stream_65->add(stream_65, string_literal37, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3823);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 95:17: -> ^( CNE $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:95:20: ^( CNE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CNE, (pANTLR3_UINT8)"CNE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:96:4: '<=' b= expr2
            	    {
            	        string_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_expr3840);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, string_literal38, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3844);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 96:17: -> ^( CLE $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:96:20: ^( CLE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLE, (pANTLR3_UINT8)"CLE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:97:4: '>=' b= expr2
            	    {
            	        string_literal39 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_expr3861);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_91; stream_91->add(stream_91, string_literal39, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3865);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 97:17: -> ^( CGE $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:97:20: ^( CGE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGE, (pANTLR3_UINT8)"CGE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr3Ex; /* Prevent compiler warnings */
    ruleexpr3Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_65 != NULL) stream_65->free(stream_65);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_88 != NULL) stream_88->free(stream_88);
        if (stream_85 != NULL) stream_85->free(stream_85);
        if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr3 */

/**
 * $ANTLR start expr2
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:100:1: expr2 : (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* ;
 */
static DonutParser_expr2_return
expr2(pDonutParser ctx)
{
    DonutParser_expr2_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal40;
    pANTLR3_COMMON_TOKEN    char_literal41;
    DonutParser_expr1_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr1_return

    DonutParser_expr1_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr1_return

    pANTLR3_BASE_TREE char_literal40_tree;
    pANTLR3_BASE_TREE char_literal41_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_78;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_74;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal40       = NULL;
    char_literal41       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal40_tree   = NULL;
    char_literal41_tree   = NULL;

    stream_78   = NULL;
    #define CREATE_stream_78  if (stream_78 == NULL) {stream_78 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 78"); } 
    stream_74   = NULL;
    #define CREATE_stream_74  if (stream_74 == NULL) {stream_74 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 74"); } 
    stream_expr1   = NULL;
    #define CREATE_stream_expr1  if (stream_expr1 == NULL) {stream_expr1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr1"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:100:7: ( (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:100:9: (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:100:9: (a= expr1 -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:100:10: a= expr1
            {
                FOLLOWPUSH(FOLLOW_expr1_in_expr2892);
                a=expr1(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr2Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr1; stream_expr1->add(stream_expr1, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 100:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:101:2: ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*

            for (;;)
            {
                int alt17=3;
                switch ( LA(1) )
                {
                case 74:
                	{
                		alt17=1;
                	}
                    break;
                case 78:
                	{
                		alt17=2;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:101:4: '+' b= expr1
            	    {
            	        char_literal40 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_expr2901);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_74; stream_74->add(stream_74, char_literal40, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2905);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr2, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 101:16: -> ^( ADD $expr2 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:101:19: ^( ADD $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:102:4: '-' b= expr1
            	    {
            	        char_literal41 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_expr2922);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_78; stream_78->add(stream_78, char_literal41, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2926);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr2
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 102:16: -> ^( SUB $expr2 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:102:19: ^( SUB $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr2Ex; /* Prevent compiler warnings */
    ruleexpr2Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_78 != NULL) stream_78->free(stream_78);
        if (stream_74 != NULL) stream_74->free(stream_74);
        if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr2 */

/**
 * $ANTLR start expr1
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:105:1: expr1 : (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* ;
 */
static DonutParser_expr1_return
expr1(pDonutParser ctx)
{
    DonutParser_expr1_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal42;
    pANTLR3_COMMON_TOKEN    char_literal43;
    pANTLR3_COMMON_TOKEN    char_literal44;
    DonutParser_term_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_term_return

    DonutParser_term_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_term_return

    pANTLR3_BASE_TREE char_literal42_tree;
    pANTLR3_BASE_TREE char_literal43_tree;
    pANTLR3_BASE_TREE char_literal44_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_72;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal42       = NULL;
    char_literal43       = NULL;
    char_literal44       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal42_tree   = NULL;
    char_literal43_tree   = NULL;
    char_literal44_tree   = NULL;

    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_72   = NULL;
    #define CREATE_stream_72  if (stream_72 == NULL) {stream_72 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 72"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:105:8: ( (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:105:10: (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:105:10: (a= term -> $a)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:105:11: a= term
            {
                FOLLOWPUSH(FOLLOW_term_in_expr1954);
                a=term(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr1Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 105:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:106:2: ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*

            for (;;)
            {
                int alt18=4;
                switch ( LA(1) )
                {
                case 72:
                	{
                		alt18=1;
                	}
                    break;
                case 82:
                	{
                		alt18=2;
                	}
                    break;
                case 66:
                	{
                		alt18=3;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:106:4: '*' b= term
            	    {
            	        char_literal42 = (pANTLR3_COMMON_TOKEN) MATCHT(72, &FOLLOW_72_in_expr1963);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_72; stream_72->add(stream_72, char_literal42, NULL); }


            	        FOLLOWPUSH(FOLLOW_term_in_expr1967);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr1
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 106:15: -> ^( MUL $expr1 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:106:18: ^( MUL $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:107:4: '/' b= term
            	    {
            	        char_literal43 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_expr1984);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_82; stream_82->add(stream_82, char_literal43, NULL); }


            	        FOLLOWPUSH(FOLLOW_term_in_expr1988);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 107:15: -> ^( DIV $expr1 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:107:18: ^( DIV $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:108:4: '%' b= term
            	    {
            	        char_literal44 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_expr11005);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_66; stream_66->add(stream_66, char_literal44, NULL); }


            	        FOLLOWPUSH(FOLLOW_term_in_expr11009);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 108:15: -> ^( MOD $expr1 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:108:18: ^( MOD $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr1Ex; /* Prevent compiler warnings */
    ruleexpr1Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_72 != NULL) stream_72->free(stream_72);
        if (stream_term != NULL) stream_term->free(stream_term);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr1 */

/**
 * $ANTLR start term
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:111:1: term : ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix );
 */
static DonutParser_term_return
term(pDonutParser ctx)
{
    DonutParser_term_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal45;
    pANTLR3_COMMON_TOKEN    string_literal47;
    pANTLR3_COMMON_TOKEN    char_literal49;
    pANTLR3_COMMON_TOKEN    char_literal51;
    pANTLR3_COMMON_TOKEN    char_literal53;
    DonutParser_term_return term46;
    #undef	RETURN_TYPE_term46
    #define	RETURN_TYPE_term46 DonutParser_term_return

    DonutParser_term_return term48;
    #undef	RETURN_TYPE_term48
    #define	RETURN_TYPE_term48 DonutParser_term_return

    DonutParser_term_return term50;
    #undef	RETURN_TYPE_term50
    #define	RETURN_TYPE_term50 DonutParser_term_return

    DonutParser_term_return term52;
    #undef	RETURN_TYPE_term52
    #define	RETURN_TYPE_term52 DonutParser_term_return

    DonutParser_term_return term54;
    #undef	RETURN_TYPE_term54
    #define	RETURN_TYPE_term54 DonutParser_term_return

    DonutParser_postfix_return postfix55;
    #undef	RETURN_TYPE_postfix55
    #define	RETURN_TYPE_postfix55 DonutParser_postfix_return

    pANTLR3_BASE_TREE string_literal45_tree;
    pANTLR3_BASE_TREE string_literal47_tree;
    pANTLR3_BASE_TREE char_literal49_tree;
    pANTLR3_BASE_TREE char_literal51_tree;
    pANTLR3_BASE_TREE char_literal53_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_79;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_78;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_74;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_75;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal45       = NULL;
    string_literal47       = NULL;
    char_literal49       = NULL;
    char_literal51       = NULL;
    char_literal53       = NULL;
    term46.tree = NULL;

    term48.tree = NULL;

    term50.tree = NULL;

    term52.tree = NULL;

    term54.tree = NULL;

    postfix55.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal45_tree   = NULL;
    string_literal47_tree   = NULL;
    char_literal49_tree   = NULL;
    char_literal51_tree   = NULL;
    char_literal53_tree   = NULL;

    stream_79   = NULL;
    #define CREATE_stream_79  if (stream_79 == NULL) {stream_79 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 79"); } 
    stream_78   = NULL;
    #define CREATE_stream_78  if (stream_78 == NULL) {stream_78 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 78"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_74   = NULL;
    #define CREATE_stream_74  if (stream_74 == NULL) {stream_74 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 74"); } 
    stream_75   = NULL;
    #define CREATE_stream_75  if (stream_75 == NULL) {stream_75 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 75"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:112:2: ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix )

            ANTLR3_UINT32 alt19;

            alt19=6;

            switch ( LA(1) )
            {
            case 75:
            	{
            		alt19=1;
            	}
                break;
            case 79:
            	{
            		alt19=2;
            	}
                break;
            case 74:
            	{
            		alt19=3;
            	}
                break;
            case 78:
            	{
            		alt19=4;
            	}
                break;
            case 64:
            	{
            		alt19=5;
            	}
                break;
            case FALSE_LITERAL:
            case FLOAT_LITERAL:
            case FUNC:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case NULL_LITERAL:
            case OCT_LITERAL:
            case SELF:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case TRUE_LITERAL:
            case 70:
            case 92:
            case 99:
            	{
            		alt19=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:112:4: '++' term
        	    {
        	        string_literal45 = (pANTLR3_COMMON_TOKEN) MATCHT(75, &FOLLOW_75_in_term1034);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_75; stream_75->add(stream_75, string_literal45, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1036);
        	        term46=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term46.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 112:14: -> ^( PRE_OP ADD term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:112:17: ^( PRE_OP ADD term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:113:4: '--' term
        	    {
        	        string_literal47 = (pANTLR3_COMMON_TOKEN) MATCHT(79, &FOLLOW_79_in_term1051);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_79; stream_79->add(stream_79, string_literal47, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1053);
        	        term48=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term48.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 113:14: -> ^( PRE_OP SUB term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:113:17: ^( PRE_OP SUB term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:114:4: '+' term
        	    {
        	        char_literal49 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_term1068);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_74; stream_74->add(stream_74, char_literal49, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1070);
        	        term50=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term50.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 114:13: -> ^( PLUS term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:114:16: ^( PLUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUS, (pANTLR3_UINT8)"PLUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:115:4: '-' term
        	    {
        	        char_literal51 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_term1083);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_78; stream_78->add(stream_78, char_literal51, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1085);
        	        term52=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term52.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 115:13: -> ^( MINUS term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:115:16: ^( MINUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUS, (pANTLR3_UINT8)"MINUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:116:4: '!' term
        	    {
        	        char_literal53 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_term1098);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_64; stream_64->add(stream_64, char_literal53, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1100);
        	        term54=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term54.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 116:13: -> ^( NOT term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:116:16: ^( NOT term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:117:4: postfix
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_postfix_in_term1113);
        	        postfix55=postfix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, postfix55.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_79 != NULL) stream_79->free(stream_79);
        if (stream_78 != NULL) stream_78->free(stream_78);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_74 != NULL) stream_74->free(stream_74);
        if (stream_75 != NULL) stream_75->free(stream_75);
        if (stream_term != NULL) stream_term->free(stream_term);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end term */

/**
 * $ANTLR start postfix
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:119:1: postfix : (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )* ;
 */
static DonutParser_postfix_return
postfix(pDonutParser ctx)
{
    DonutParser_postfix_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal56;
    pANTLR3_COMMON_TOKEN    string_literal57;
    pANTLR3_COMMON_TOKEN    char_literal58;
    pANTLR3_COMMON_TOKEN    char_literal59;
    pANTLR3_COMMON_TOKEN    char_literal60;
    pANTLR3_COMMON_TOKEN    char_literal61;
    pANTLR3_COMMON_TOKEN    char_literal62;
    DonutParser_primary_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p DonutParser_primary_return

    DonutParser_name_return n;
    #undef	RETURN_TYPE_n
    #define	RETURN_TYPE_n DonutParser_name_return

    DonutParser_expr_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e DonutParser_expr_return

    DonutParser_arglist_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_arglist_return

    pANTLR3_BASE_TREE string_literal56_tree;
    pANTLR3_BASE_TREE string_literal57_tree;
    pANTLR3_BASE_TREE char_literal58_tree;
    pANTLR3_BASE_TREE char_literal59_tree;
    pANTLR3_BASE_TREE char_literal60_tree;
    pANTLR3_BASE_TREE char_literal61_tree;
    pANTLR3_BASE_TREE char_literal62_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_79;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_93;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_92;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_81;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_75;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arglist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal56       = NULL;
    string_literal57       = NULL;
    char_literal58       = NULL;
    char_literal59       = NULL;
    char_literal60       = NULL;
    char_literal61       = NULL;
    char_literal62       = NULL;
    p.tree = NULL;

    n.tree = NULL;

    e.tree = NULL;

    a.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal56_tree   = NULL;
    string_literal57_tree   = NULL;
    char_literal58_tree   = NULL;
    char_literal59_tree   = NULL;
    char_literal60_tree   = NULL;
    char_literal61_tree   = NULL;
    char_literal62_tree   = NULL;

    stream_79   = NULL;
    #define CREATE_stream_79  if (stream_79 == NULL) {stream_79 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 79"); } 
    stream_93   = NULL;
    #define CREATE_stream_93  if (stream_93 == NULL) {stream_93 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 93"); } 
    stream_92   = NULL;
    #define CREATE_stream_92  if (stream_92 == NULL) {stream_92 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 92"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_81   = NULL;
    #define CREATE_stream_81  if (stream_81 == NULL) {stream_81 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 81"); } 
    stream_75   = NULL;
    #define CREATE_stream_75  if (stream_75 == NULL) {stream_75 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 75"); } 
    stream_arglist   = NULL;
    #define CREATE_stream_arglist  if (stream_arglist == NULL) {stream_arglist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arglist"); }
    stream_primary   = NULL;
    #define CREATE_stream_primary  if (stream_primary == NULL) {stream_primary = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary"); }
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:120:2: ( (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:120:4: (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )*
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:120:4: (p= primary -> $p)
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:120:5: p= primary
            {
                FOLLOWPUSH(FOLLOW_primary_in_postfix1126);
                p=primary(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_primary; stream_primary->add(stream_primary, p.tree, NULL); }

                /* AST REWRITE
                 * elements          : p
                 * token labels      : 
                 * rule labels       : retval, p
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_p=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", p.tree != NULL ? p.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 120:14: -> $p
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_p != NULL) stream_p->free(stream_p);


                }
            }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:121:2: ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )*

            for (;;)
            {
                int alt20=6;
                switch ( LA(1) )
                {
                case 75:
                	{
                		alt20=1;
                	}
                    break;
                case 79:
                	{
                		alt20=2;
                	}
                    break;
                case 81:
                	{
                		alt20=3;
                	}
                    break;
                case 92:
                	{
                		alt20=4;
                	}
                    break;
                case 70:
                	{
                		alt20=5;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:121:4: '++'
            	    {
            	        string_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(75, &FOLLOW_75_in_postfix1135);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_75; stream_75->add(stream_75, string_literal56, NULL); }


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 121:9: -> ^( POST_OP ADD $postfix)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:121:12: ^( POST_OP ADD $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:122:4: '--'
            	    {
            	        string_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(79, &FOLLOW_79_in_postfix1151);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_79; stream_79->add(stream_79, string_literal57, NULL); }


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 122:9: -> ^( POST_OP SUB $postfix)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:122:12: ^( POST_OP SUB $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:123:4: '.' n= name
            	    {
            	        char_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(81, &FOLLOW_81_in_postfix1167);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_81; stream_81->add(stream_81, char_literal58, NULL); }


            	        FOLLOWPUSH(FOLLOW_name_in_postfix1171);
            	        n=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, n.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : n, postfix
            	         * token labels      : 
            	         * rule labels       : retval, n
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_n;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_n=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n.tree != NULL ? n.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 123:15: -> ^( DOT $postfix $n)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:123:18: ^( DOT $postfix $n)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n == NULL ? NULL : stream_n->nextTree(stream_n));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_n != NULL) stream_n->free(stream_n);


            	        }
            	    }
            	    break;
            	case 4:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:124:4: '[' e= expr ']'
            	    {
            	        char_literal59 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_postfix1188);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_92; stream_92->add(stream_92, char_literal59, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_postfix1192);
            	        e=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

            	        char_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(93, &FOLLOW_93_in_postfix1194);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_93; stream_93->add(stream_93, char_literal60, NULL); }


            	        /* AST REWRITE
            	         * elements          : postfix, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 124:19: -> ^( DOT $postfix $e)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:124:22: ^( DOT $postfix $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;
            	case 5:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:125:4: '(' a= arglist ')'
            	    {
            	        char_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_postfix1211);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal61, NULL); }


            	        FOLLOWPUSH(FOLLOW_arglist_in_postfix1215);
            	        a=arglist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_arglist; stream_arglist->add(stream_arglist, a.tree, NULL); }

            	        char_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_postfix1217);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_71; stream_71->add(stream_71, char_literal62, NULL); }


            	        /* AST REWRITE
            	         * elements          : a, postfix
            	         * token labels      : 
            	         * rule labels       : retval, a
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 125:22: -> ^( APPLY $postfix $a)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:125:25: ^( APPLY $postfix $a)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, APPLY, (pANTLR3_UINT8)"APPLY")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_a != NULL) stream_a->free(stream_a);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepostfixEx; /* Prevent compiler warnings */
    rulepostfixEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_79 != NULL) stream_79->free(stream_79);
        if (stream_93 != NULL) stream_93->free(stream_93);
        if (stream_92 != NULL) stream_92->free(stream_92);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_81 != NULL) stream_81->free(stream_81);
        if (stream_75 != NULL) stream_75->free(stream_75);
        if (stream_arglist != NULL) stream_arglist->free(stream_arglist);
        if (stream_primary != NULL) stream_primary->free(stream_primary);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end postfix */

/**
 * $ANTLR start primary
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:128:1: primary : ( literal | array | SELF | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | ( object )=> object | block );
 */
static DonutParser_primary_return
primary(pDonutParser ctx)
{
    DonutParser_primary_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SELF65;
    pANTLR3_COMMON_TOKEN    char_literal67;
    pANTLR3_COMMON_TOKEN    char_literal69;
    DonutParser_literal_return literal63;
    #undef	RETURN_TYPE_literal63
    #define	RETURN_TYPE_literal63 DonutParser_literal_return

    DonutParser_array_return array64;
    #undef	RETURN_TYPE_array64
    #define	RETURN_TYPE_array64 DonutParser_array_return

    DonutParser_name_return name66;
    #undef	RETURN_TYPE_name66
    #define	RETURN_TYPE_name66 DonutParser_name_return

    DonutParser_expr_return expr68;
    #undef	RETURN_TYPE_expr68
    #define	RETURN_TYPE_expr68 DonutParser_expr_return

    DonutParser_object_return object70;
    #undef	RETURN_TYPE_object70
    #define	RETURN_TYPE_object70 DonutParser_object_return

    DonutParser_block_return block71;
    #undef	RETURN_TYPE_block71
    #define	RETURN_TYPE_block71 DonutParser_block_return

    pANTLR3_BASE_TREE SELF65_tree;
    pANTLR3_BASE_TREE char_literal67_tree;
    pANTLR3_BASE_TREE char_literal69_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    SELF65       = NULL;
    char_literal67       = NULL;
    char_literal69       = NULL;
    literal63.tree = NULL;

    array64.tree = NULL;

    name66.tree = NULL;

    expr68.tree = NULL;

    object70.tree = NULL;

    block71.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    SELF65_tree   = NULL;
    char_literal67_tree   = NULL;
    char_literal69_tree   = NULL;

    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:129:2: ( literal | array | SELF | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | ( object )=> object | block )

            ANTLR3_UINT32 alt21;

            alt21=7;

            switch ( LA(1) )
            {
            case FALSE_LITERAL:
            case FLOAT_LITERAL:
            case FUNC:
            case HEX_LITERAL:
            case INT_LITERAL:
            case NULL_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case TRUE_LITERAL:
            	{
            		alt21=1;
            	}
                break;
            case 92:
            	{
            		alt21=2;
            	}
                break;
            case SELF:
            	{
            		alt21=3;
            	}
                break;
            case IDENT:
            	{
            		alt21=4;
            	}
                break;
            case 70:
            	{
            		alt21=5;
            	}
                break;
            case 99:
            	{
            		switch ( LA(2) )
            		{
            		case IDENT:
            			{
            				{
            				    int LA21_7 = LA(3);
            				    if ( (synpred1_Donut(ctx)) && (LA21_7 == 89))
            				    {
            				        alt21=6;
            				    }
            				    else if ( (((LA21_7 >= 65) && (LA21_7 <= 70)) || ((LA21_7 >= 72) && (LA21_7 <= 76)) || ((LA21_7 >= 78) && (LA21_7 <= 88)) || ((LA21_7 >= 90) && (LA21_7 <= 92)) || ((LA21_7 >= 100) && (LA21_7 <= 102))))
            				    {
            				        alt21=7;
            				    }
            				    else
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }


            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 21;
            				        EXCEPTION->state        = 7;


            				        goto ruleprimaryEx;

            				    }
            				}
            			}
            		    break;
            		case 102:
            			{
            				{
            				    int LA21_8 = LA(3);
            				    if ( (synpred1_Donut(ctx)))
            				    {
            				        alt21=6;
            				    }
            				    else if ( (ANTLR3_TRUE))
            				    {
            				        alt21=7;
            				    }
            				    else
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }


            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 21;
            				        EXCEPTION->state        = 8;


            				        goto ruleprimaryEx;

            				    }
            				}
            			}
            		    break;
            		case FALSE_LITERAL:
            		case FLOAT_LITERAL:
            		case FUNC:
            		case HEX_LITERAL:
            		case INTERRUPT:
            		case INT_LITERAL:
            		case NULL_LITERAL:
            		case OCT_LITERAL:
            		case RETURN:
            		case SELF:
            		case STRING_DOUBLE:
            		case STRING_SINGLE:
            		case TRUE_LITERAL:
            		case 64:
            		case 70:
            		case 74:
            		case 75:
            		case 78:
            		case 79:
            		case 84:
            		case 92:
            		case 95:
            		case 96:
            		case 97:
            		case 98:
            		case 99:
            			{
            				alt21=7;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }

            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 21;
            		    EXCEPTION->state        = 6;


            		    goto ruleprimaryEx;

            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 21;
                EXCEPTION->state        = 0;


                goto ruleprimaryEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:129:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_literal_in_primary1243);
        	        literal63=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal63.tree);

        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:130:4: array
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_array_in_primary1248);
        	        array64=array(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array64.tree);

        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:131:4: SELF
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        SELF65 = (pANTLR3_COMMON_TOKEN) MATCHT(SELF, &FOLLOW_SELF_in_primary1253);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        SELF65_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SELF65));
        	        ADAPTOR->addChild(ADAPTOR, root_0, SELF65_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:132:4: name
        	    {
        	        FOLLOWPUSH(FOLLOW_name_in_primary1258);
        	        name66=name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name66.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : name
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 132:9: -> ^( DOT SCOPE name )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:132:12: ^( DOT SCOPE name )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SCOPE, (pANTLR3_UINT8)"SCOPE")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:133:4: '(' expr ')'
        	    {
        	        char_literal67 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_primary1273);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal67, NULL); }


        	        FOLLOWPUSH(FOLLOW_expr_in_primary1275);
        	        expr68=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr68.tree, NULL); }

        	        char_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_primary1277);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_71; stream_71->add(stream_71, char_literal69, NULL); }


        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 133:17: -> expr
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:134:4: ( object )=> object
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_object_in_primary1291);
        	        object70=object(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object70.tree);

        	    }
        	    break;
        	case 7:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:135:4: block
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_block_in_primary1296);
        	        block71=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block71.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end primary */

/**
 * $ANTLR start cond
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:138:1: cond : 'if' '(' expr ')' a= block 'else' (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) ) ;
 */
static DonutParser_cond_return
cond(pDonutParser ctx)
{
    DonutParser_cond_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal72;
    pANTLR3_COMMON_TOKEN    char_literal73;
    pANTLR3_COMMON_TOKEN    char_literal75;
    pANTLR3_COMMON_TOKEN    string_literal76;
    DonutParser_block_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_block_return

    DonutParser_block_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_block_return

    DonutParser_cond_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c DonutParser_cond_return

    DonutParser_expr_return expr74;
    #undef	RETURN_TYPE_expr74
    #define	RETURN_TYPE_expr74 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal72_tree;
    pANTLR3_BASE_TREE char_literal73_tree;
    pANTLR3_BASE_TREE char_literal75_tree;
    pANTLR3_BASE_TREE string_literal76_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_96;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_94;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal72       = NULL;
    char_literal73       = NULL;
    char_literal75       = NULL;
    string_literal76       = NULL;
    a.tree = NULL;

    b.tree = NULL;

    c.tree = NULL;

    expr74.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal72_tree   = NULL;
    char_literal73_tree   = NULL;
    char_literal75_tree   = NULL;
    string_literal76_tree   = NULL;

    stream_96   = NULL;
    #define CREATE_stream_96  if (stream_96 == NULL) {stream_96 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 96"); } 
    stream_94   = NULL;
    #define CREATE_stream_94  if (stream_94 == NULL) {stream_94 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 94"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_cond   = NULL;
    #define CREATE_stream_cond  if (stream_cond == NULL) {stream_cond = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule cond"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:139:2: ( 'if' '(' expr ')' a= block 'else' (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:139:4: 'if' '(' expr ')' a= block 'else' (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) )
        {
            string_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(96, &FOLLOW_96_in_cond1307);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_96; stream_96->add(stream_96, string_literal72, NULL); }


            char_literal73 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_cond1309);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal73, NULL); }


            FOLLOWPUSH(FOLLOW_expr_in_cond1311);
            expr74=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr74.tree, NULL); }

            char_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_cond1313);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_71; stream_71->add(stream_71, char_literal75, NULL); }


            FOLLOWPUSH(FOLLOW_block_in_cond1317);
            a=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, a.tree, NULL); }

            string_literal76 = (pANTLR3_COMMON_TOKEN) MATCHT(94, &FOLLOW_94_in_cond1319);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_94; stream_94->add(stream_94, string_literal76, NULL); }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:140:3: (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) )
            {
                int alt22=2;
                switch ( LA(1) )
                {
                case 99:
                	{
                		alt22=1;
                	}
                    break;
                case 96:
                	{
                		alt22=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 22;
                    EXCEPTION->state        = 0;


                    goto rulecondEx;

                }

                switch (alt22)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:140:4: b= block
            	    {
            	        FOLLOWPUSH(FOLLOW_block_in_cond1326);
            	        b=block(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : a, b, expr
            	         * token labels      : 
            	         * rule labels       : retval, b, a
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);
            	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 140:12: -> ^( COND expr $a $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:140:15: ^( COND expr $a $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND, (pANTLR3_UINT8)"COND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);
            	        	if (stream_a != NULL) stream_a->free(stream_a);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:141:4: c= cond
            	    {
            	        FOLLOWPUSH(FOLLOW_cond_in_cond1347);
            	        c=cond(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_cond; stream_cond->add(stream_cond, c.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr, c, a
            	         * token labels      : 
            	         * rule labels       : retval, c, a
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_c=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c.tree != NULL ? c.tree : NULL);
            	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 141:11: -> ^( COND expr $a $c)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:141:14: ^( COND expr $a $c)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND, (pANTLR3_UINT8)"COND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_c == NULL ? NULL : stream_c->nextTree(stream_c));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_c != NULL) stream_c->free(stream_c);
            	        	if (stream_a != NULL) stream_a->free(stream_a);


            	        }
            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondEx; /* Prevent compiler warnings */
    rulecondEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_96 != NULL) stream_96->free(stream_96);
        if (stream_94 != NULL) stream_94->free(stream_94);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_block != NULL) stream_block->free(stream_block);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_cond != NULL) stream_cond->free(stream_cond);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end cond */

/**
 * $ANTLR start block
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:145:1: block : '{' exprlist '}' -> exprlist ;
 */
static DonutParser_block_return
block(pDonutParser ctx)
{
    DonutParser_block_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal77;
    pANTLR3_COMMON_TOKEN    char_literal79;
    DonutParser_exprlist_return exprlist78;
    #undef	RETURN_TYPE_exprlist78
    #define	RETURN_TYPE_exprlist78 DonutParser_exprlist_return

    pANTLR3_BASE_TREE char_literal77_tree;
    pANTLR3_BASE_TREE char_literal79_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_99;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_102;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal77       = NULL;
    char_literal79       = NULL;
    exprlist78.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal77_tree   = NULL;
    char_literal79_tree   = NULL;

    stream_99   = NULL;
    #define CREATE_stream_99  if (stream_99 == NULL) {stream_99 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 99"); } 
    stream_102   = NULL;
    #define CREATE_stream_102  if (stream_102 == NULL) {stream_102 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 102"); } 
    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:145:6: ( '{' exprlist '}' -> exprlist )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:145:8: '{' exprlist '}'
        {
            char_literal77 = (pANTLR3_COMMON_TOKEN) MATCHT(99, &FOLLOW_99_in_block1374);
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_99; stream_99->add(stream_99, char_literal77, NULL); }


            FOLLOWPUSH(FOLLOW_exprlist_in_block1376);
            exprlist78=exprlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist78.tree, NULL); }

            char_literal79 = (pANTLR3_COMMON_TOKEN) MATCHT(102, &FOLLOW_102_in_block1378);
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_102; stream_102->add(stream_102, char_literal79, NULL); }


            /* AST REWRITE
             * elements          : exprlist
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 145:25: -> exprlist
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_99 != NULL) stream_99->free(stream_99);
        if (stream_102 != NULL) stream_102->free(stream_102);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end block */

/**
 * $ANTLR start name
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:147:1: name : IDENT ;
 */
static DonutParser_name_return
name(pDonutParser ctx)
{
    DonutParser_name_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT80;

    pANTLR3_BASE_TREE IDENT80_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    IDENT80       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    IDENT80_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:147:6: ( IDENT )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:147:8: IDENT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            IDENT80 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_name1390);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) {
            IDENT80_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT80));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT80_tree);
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start varlist
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:1: varlist : ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) ;
 */
static DonutParser_varlist_return
varlist(pDonutParser ctx)
{
    DonutParser_varlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal82;
    DonutParser_name_return name81;
    #undef	RETURN_TYPE_name81
    #define	RETURN_TYPE_name81 DonutParser_name_return

    DonutParser_name_return name83;
    #undef	RETURN_TYPE_name83
    #define	RETURN_TYPE_name83 DonutParser_name_return

    pANTLR3_BASE_TREE char_literal82_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal82       = NULL;
    name81.tree = NULL;

    name83.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal82_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:9: ( ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:11: ( name ( ( ',' ) name )* )?
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:11: ( name ( ( ',' ) name )* )?
            {
                int alt24=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt24=1;
                    	}
                        break;
                }

                switch (alt24)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:12: name ( ( ',' ) name )*
            	    {
            	        FOLLOWPUSH(FOLLOW_name_in_varlist1399);
            	        name81=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name81.tree, NULL); }

            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:17: ( ( ',' ) name )*

            	        for (;;)
            	        {
            	            int alt23=2;
            	            switch ( LA(1) )
            	            {
            	            case 77:
            	            	{
            	            		alt23=1;
            	            	}
            	                break;

            	            }

            	            switch (alt23)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:18: ( ',' ) name
            	        	    {
            	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:18: ( ',' )
            	        	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:19: ','
            	        	        {
            	        	            char_literal82 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_varlist1403);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulevarlistEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return retval;
            	        	            }
            	        	             
            	        	            if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal82, NULL); }


            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_name_in_varlist1406);
            	        	        name83=name(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevarlistEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name83.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop23;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop23: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : name
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 149:33: -> ^( VARS ( name )* )
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:36: ^( VARS ( name )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        , root_1));

            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:149:43: ( name )*
            	        {
            	        	while ( (stream_name != NULL && stream_name->hasNext(stream_name))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        	}
            	        	if (stream_name != NULL) stream_name->reset(stream_name);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulevarlistEx; /* Prevent compiler warnings */
    rulevarlistEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_name != NULL) stream_name->free(stream_name);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end varlist */

/**
 * $ANTLR start arglist
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:151:1: arglist : exprlist_for_literal -> ^( ARGS exprlist_for_literal ) ;
 */
static DonutParser_arglist_return
arglist(pDonutParser ctx)
{
    DonutParser_arglist_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_for_literal_return exprlist_for_literal84;
    #undef	RETURN_TYPE_exprlist_for_literal84
    #define	RETURN_TYPE_exprlist_for_literal84 DonutParser_exprlist_for_literal_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist_for_literal84.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:151:9: ( exprlist_for_literal -> ^( ARGS exprlist_for_literal ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:151:11: exprlist_for_literal
        {
            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_arglist1427);
            exprlist_for_literal84=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearglistEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal84.tree, NULL); }

            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 151:32: -> ^( ARGS exprlist_for_literal )
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:151:35: ^( ARGS exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGS, (pANTLR3_UINT8)"ARGS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end arglist */

/**
 * $ANTLR start array
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:152:1: array : '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) ;
 */
static DonutParser_array_return
array(pDonutParser ctx)
{
    DonutParser_array_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal85;
    pANTLR3_COMMON_TOKEN    char_literal87;
    pANTLR3_COMMON_TOKEN    char_literal88;
    DonutParser_exprlist_for_literal_return exprlist_for_literal86;
    #undef	RETURN_TYPE_exprlist_for_literal86
    #define	RETURN_TYPE_exprlist_for_literal86 DonutParser_exprlist_for_literal_return

    pANTLR3_BASE_TREE char_literal85_tree;
    pANTLR3_BASE_TREE char_literal87_tree;
    pANTLR3_BASE_TREE char_literal88_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_93;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_92;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal85       = NULL;
    char_literal87       = NULL;
    char_literal88       = NULL;
    exprlist_for_literal86.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal85_tree   = NULL;
    char_literal87_tree   = NULL;
    char_literal88_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_93   = NULL;
    #define CREATE_stream_93  if (stream_93 == NULL) {stream_93 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 93"); } 
    stream_92   = NULL;
    #define CREATE_stream_92  if (stream_92 == NULL) {stream_92 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 92"); } 
    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:152:7: ( '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:152:9: '[' exprlist_for_literal ( ',' )? ']'
        {
            char_literal85 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_array1442);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_92; stream_92->add(stream_92, char_literal85, NULL); }


            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_array1444);
            exprlist_for_literal86=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal86.tree, NULL); }

            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:152:34: ( ',' )?
            {
                int alt25=2;
                switch ( LA(1) )
                {
                    case 77:
                    	{
                    		alt25=1;
                    	}
                        break;
                }

                switch (alt25)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:152:34: ','
            	    {
            	        char_literal87 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_array1446);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrayEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal87, NULL); }


            	    }
            	    break;

                }
            }

            char_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(93, &FOLLOW_93_in_array1449);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_93; stream_93->add(stream_93, char_literal88, NULL); }


            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 152:43: -> ^( ARRAY exprlist_for_literal )
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:152:46: ^( ARRAY exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY, (pANTLR3_UINT8)"ARRAY")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_93 != NULL) stream_93->free(stream_93);
        if (stream_92 != NULL) stream_92->free(stream_92);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end array */

/**
 * $ANTLR start exprlist_for_literal
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:1: exprlist_for_literal : ( expr ( ',' expr )* )? -> ( expr )* ;
 */
static DonutParser_exprlist_for_literal_return
exprlist_for_literal(pDonutParser ctx)
{
    DonutParser_exprlist_for_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal90;
    DonutParser_expr_return expr89;
    #undef	RETURN_TYPE_expr89
    #define	RETURN_TYPE_expr89 DonutParser_expr_return

    DonutParser_expr_return expr91;
    #undef	RETURN_TYPE_expr91
    #define	RETURN_TYPE_expr91 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal90_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal90       = NULL;
    expr89.tree = NULL;

    expr91.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal90_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:22: ( ( expr ( ',' expr )* )? -> ( expr )* )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:24: ( expr ( ',' expr )* )?
        {
            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:24: ( expr ( ',' expr )* )?
            {
                int alt27=2;
                switch ( LA(1) )
                {
                    case FALSE_LITERAL:
                    case FLOAT_LITERAL:
                    case FUNC:
                    case HEX_LITERAL:
                    case IDENT:
                    case INTERRUPT:
                    case INT_LITERAL:
                    case NULL_LITERAL:
                    case OCT_LITERAL:
                    case RETURN:
                    case SELF:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case TRUE_LITERAL:
                    case 64:
                    case 70:
                    case 74:
                    case 75:
                    case 78:
                    case 79:
                    case 92:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    	{
                    		alt27=1;
                    	}
                        break;
                }

                switch (alt27)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:25: expr ( ',' expr )*
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1465);
            	        expr89=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlist_for_literalEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr89.tree, NULL); }

            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:30: ( ',' expr )*

            	        for (;;)
            	        {
            	            int alt26=2;
            	            switch ( LA(1) )
            	            {
            	            case 77:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case FALSE_LITERAL:
            	            		case FLOAT_LITERAL:
            	            		case FUNC:
            	            		case HEX_LITERAL:
            	            		case IDENT:
            	            		case INTERRUPT:
            	            		case INT_LITERAL:
            	            		case NULL_LITERAL:
            	            		case OCT_LITERAL:
            	            		case RETURN:
            	            		case SELF:
            	            		case STRING_DOUBLE:
            	            		case STRING_SINGLE:
            	            		case TRUE_LITERAL:
            	            		case 64:
            	            		case 70:
            	            		case 74:
            	            		case 75:
            	            		case 78:
            	            		case 79:
            	            		case 92:
            	            		case 95:
            	            		case 96:
            	            		case 97:
            	            		case 98:
            	            		case 99:
            	            			{
            	            				alt26=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:31: ',' expr
            	        	    {
            	        	        char_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_exprlist_for_literal1468);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal90, NULL); }


            	        	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1470);
            	        	        expr91=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr91.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop26;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop26: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 153:44: -> ( expr )*
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:153:47: ( expr )*
            	    {
            	    	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	    	{
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	    	}
            	    	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlist_for_literalEx; /* Prevent compiler warnings */
    ruleexprlist_for_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist_for_literal */

/**
 * $ANTLR start object
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:1: object : '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) ;
 */
static DonutParser_object_return
object(pDonutParser ctx)
{
    DonutParser_object_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal92;
    pANTLR3_COMMON_TOKEN    char_literal94;
    pANTLR3_COMMON_TOKEN    char_literal96;
    pANTLR3_COMMON_TOKEN    char_literal97;
    DonutParser_object_pair_return object_pair93;
    #undef	RETURN_TYPE_object_pair93
    #define	RETURN_TYPE_object_pair93 DonutParser_object_pair_return

    DonutParser_object_pair_return object_pair95;
    #undef	RETURN_TYPE_object_pair95
    #define	RETURN_TYPE_object_pair95 DonutParser_object_pair_return

    pANTLR3_BASE_TREE char_literal92_tree;
    pANTLR3_BASE_TREE char_literal94_tree;
    pANTLR3_BASE_TREE char_literal96_tree;
    pANTLR3_BASE_TREE char_literal97_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_99;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_102;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_object_pair;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal92       = NULL;
    char_literal94       = NULL;
    char_literal96       = NULL;
    char_literal97       = NULL;
    object_pair93.tree = NULL;

    object_pair95.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal92_tree   = NULL;
    char_literal94_tree   = NULL;
    char_literal96_tree   = NULL;
    char_literal97_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_99   = NULL;
    #define CREATE_stream_99  if (stream_99 == NULL) {stream_99 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 99"); } 
    stream_102   = NULL;
    #define CREATE_stream_102  if (stream_102 == NULL) {stream_102 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 102"); } 
    stream_object_pair   = NULL;
    #define CREATE_stream_object_pair  if (stream_object_pair == NULL) {stream_object_pair = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule object_pair"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:8: ( '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:10: '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}'
        {
            char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(99, &FOLLOW_99_in_object1487);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_99; stream_99->add(stream_99, char_literal92, NULL); }


            // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:14: ( object_pair ( ',' object_pair )* ( ',' )? )?
            {
                int alt30=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:15: object_pair ( ',' object_pair )* ( ',' )?
            	    {
            	        FOLLOWPUSH(FOLLOW_object_pair_in_object1490);
            	        object_pair93=object_pair(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair93.tree, NULL); }

            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:27: ( ',' object_pair )*

            	        for (;;)
            	        {
            	            int alt28=2;
            	            switch ( LA(1) )
            	            {
            	            case 77:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case IDENT:
            	            			{
            	            				alt28=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt28)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:28: ',' object_pair
            	        	    {
            	        	        char_literal94 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_object1493);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal94, NULL); }


            	        	        FOLLOWPUSH(FOLLOW_object_pair_in_object1495);
            	        	        object_pair95=object_pair(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair95.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop28;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop28: ; /* Jump out to here if this rule does not match */


            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:46: ( ',' )?
            	        {
            	            int alt29=2;
            	            switch ( LA(1) )
            	            {
            	                case 77:
            	                	{
            	                		alt29=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt29)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:47: ','
            	        	    {
            	        	        char_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_object1500);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal96, NULL); }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            char_literal97 = (pANTLR3_COMMON_TOKEN) MATCHT(102, &FOLLOW_102_in_object1506);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_102; stream_102->add(stream_102, char_literal97, NULL); }


            /* AST REWRITE
             * elements          : object_pair
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 155:59: -> ^( OBJECT ( object_pair )* )
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:62: ^( OBJECT ( object_pair )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJECT, (pANTLR3_UINT8)"OBJECT")
            	        , root_1));

            	        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:155:71: ( object_pair )*
            	        {
            	        	while ( (stream_object_pair != NULL && stream_object_pair->hasNext(stream_object_pair))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_object_pair == NULL ? NULL : stream_object_pair->nextTree(stream_object_pair));

            	        	}
            	        	if (stream_object_pair != NULL) stream_object_pair->reset(stream_object_pair);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobjectEx; /* Prevent compiler warnings */
    ruleobjectEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_99 != NULL) stream_99->free(stream_99);
        if (stream_102 != NULL) stream_102->free(stream_102);
        if (stream_object_pair != NULL) stream_object_pair->free(stream_object_pair);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object */

/**
 * $ANTLR start object_pair
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:156:1: object_pair : name '=>' expr -> ^( PAIR name expr ) ;
 */
static DonutParser_object_pair_return
object_pair(pDonutParser ctx)
{
    DonutParser_object_pair_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal99;
    DonutParser_name_return name98;
    #undef	RETURN_TYPE_name98
    #define	RETURN_TYPE_name98 DonutParser_name_return

    DonutParser_expr_return expr100;
    #undef	RETURN_TYPE_expr100
    #define	RETURN_TYPE_expr100 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal99_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_89;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal99       = NULL;
    name98.tree = NULL;

    expr100.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal99_tree   = NULL;

    stream_89   = NULL;
    #define CREATE_stream_89  if (stream_89 == NULL) {stream_89 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 89"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:156:13: ( name '=>' expr -> ^( PAIR name expr ) )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:156:15: name '=>' expr
        {
            FOLLOWPUSH(FOLLOW_name_in_object_pair1522);
            name98=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name98.tree, NULL); }

            string_literal99 = (pANTLR3_COMMON_TOKEN) MATCHT(89, &FOLLOW_89_in_object_pair1524);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_89; stream_89->add(stream_89, string_literal99, NULL); }


            FOLLOWPUSH(FOLLOW_expr_in_object_pair1526);
            expr100=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr100.tree, NULL); }

            /* AST REWRITE
             * elements          : name, expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 156:30: -> ^( PAIR name expr )
            	{
            	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:156:33: ^( PAIR name expr )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAIR, (pANTLR3_UINT8)"PAIR")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_pairEx; /* Prevent compiler warnings */
    ruleobject_pairEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_89 != NULL) stream_89->free(stream_89);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object_pair */

/**
 * $ANTLR start literal
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:158:1: literal : ( numeric_literal | boolean_literal | string_literal | NULL_LITERAL | FUNC '(' varlist ')' block -> ^( CLOS varlist block ) );
 */
static DonutParser_literal_return
literal(pDonutParser ctx)
{
    DonutParser_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NULL_LITERAL104;
    pANTLR3_COMMON_TOKEN    FUNC105;
    pANTLR3_COMMON_TOKEN    char_literal106;
    pANTLR3_COMMON_TOKEN    char_literal108;
    DonutParser_numeric_literal_return numeric_literal101;
    #undef	RETURN_TYPE_numeric_literal101
    #define	RETURN_TYPE_numeric_literal101 DonutParser_numeric_literal_return

    DonutParser_boolean_literal_return boolean_literal102;
    #undef	RETURN_TYPE_boolean_literal102
    #define	RETURN_TYPE_boolean_literal102 DonutParser_boolean_literal_return

    DonutParser_string_literal_return string_literal103;
    #undef	RETURN_TYPE_string_literal103
    #define	RETURN_TYPE_string_literal103 DonutParser_string_literal_return

    DonutParser_varlist_return varlist107;
    #undef	RETURN_TYPE_varlist107
    #define	RETURN_TYPE_varlist107 DonutParser_varlist_return

    DonutParser_block_return block109;
    #undef	RETURN_TYPE_block109
    #define	RETURN_TYPE_block109 DonutParser_block_return

    pANTLR3_BASE_TREE NULL_LITERAL104_tree;
    pANTLR3_BASE_TREE FUNC105_tree;
    pANTLR3_BASE_TREE char_literal106_tree;
    pANTLR3_BASE_TREE char_literal108_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FUNC;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_varlist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    /* Initialize rule variables
     */

    root_0 = NULL;

    NULL_LITERAL104       = NULL;
    FUNC105       = NULL;
    char_literal106       = NULL;
    char_literal108       = NULL;
    numeric_literal101.tree = NULL;

    boolean_literal102.tree = NULL;

    string_literal103.tree = NULL;

    varlist107.tree = NULL;

    block109.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    NULL_LITERAL104_tree   = NULL;
    FUNC105_tree   = NULL;
    char_literal106_tree   = NULL;
    char_literal108_tree   = NULL;

    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_FUNC   = NULL;
    #define CREATE_stream_FUNC  if (stream_FUNC == NULL) {stream_FUNC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FUNC"); } 
    stream_varlist   = NULL;
    #define CREATE_stream_varlist  if (stream_varlist == NULL) {stream_varlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule varlist"); }
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:159:2: ( numeric_literal | boolean_literal | string_literal | NULL_LITERAL | FUNC '(' varlist ')' block -> ^( CLOS varlist block ) )

            ANTLR3_UINT32 alt31;

            alt31=5;

            switch ( LA(1) )
            {
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case INT_LITERAL:
            case OCT_LITERAL:
            	{
            		alt31=1;
            	}
                break;
            case FALSE_LITERAL:
            case TRUE_LITERAL:
            	{
            		alt31=2;
            	}
                break;
            case STRING_DOUBLE:
            case STRING_SINGLE:
            	{
            		alt31=3;
            	}
                break;
            case NULL_LITERAL:
            	{
            		alt31=4;
            	}
                break;
            case FUNC:
            	{
            		alt31=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 31;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;

            }

            switch (alt31)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:159:4: numeric_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_numeric_literal_in_literal1545);
        	        numeric_literal101=numeric_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, numeric_literal101.tree);

        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:160:4: boolean_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_boolean_literal_in_literal1550);
        	        boolean_literal102=boolean_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, boolean_literal102.tree);

        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:161:4: string_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_string_literal_in_literal1555);
        	        string_literal103=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, string_literal103.tree);

        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:162:4: NULL_LITERAL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        NULL_LITERAL104 = (pANTLR3_COMMON_TOKEN) MATCHT(NULL_LITERAL, &FOLLOW_NULL_LITERAL_in_literal1560);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NULL_LITERAL104_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NULL_LITERAL104));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NULL_LITERAL104_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:163:4: FUNC '(' varlist ')' block
        	    {
        	        FUNC105 = (pANTLR3_COMMON_TOKEN) MATCHT(FUNC, &FOLLOW_FUNC_in_literal1565);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_FUNC; stream_FUNC->add(stream_FUNC, FUNC105, NULL); }


        	        char_literal106 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_literal1567);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal106, NULL); }


        	        FOLLOWPUSH(FOLLOW_varlist_in_literal1569);
        	        varlist107=varlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_varlist; stream_varlist->add(stream_varlist, varlist107.tree, NULL); }

        	        char_literal108 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_literal1571);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_71; stream_71->add(stream_71, char_literal108, NULL); }


        	        FOLLOWPUSH(FOLLOW_block_in_literal1573);
        	        block109=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, block109.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : varlist, block
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 163:31: -> ^( CLOS varlist block )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:163:34: ^( CLOS varlist block )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_varlist == NULL ? NULL : stream_varlist->nextTree(stream_varlist));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_block == NULL ? NULL : stream_block->nextTree(stream_block));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_FUNC != NULL) stream_FUNC->free(stream_FUNC);
        if (stream_varlist != NULL) stream_varlist->free(stream_varlist);
        if (stream_block != NULL) stream_block->free(stream_block);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end literal */

/**
 * $ANTLR start boolean_literal
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:166:1: boolean_literal : ( TRUE_LITERAL | FALSE_LITERAL );
 */
static DonutParser_boolean_literal_return
boolean_literal(pDonutParser ctx)
{
    DonutParser_boolean_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set110;

    pANTLR3_BASE_TREE set110_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set110       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set110_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:166:17: ( TRUE_LITERAL | FALSE_LITERAL )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set110=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == FALSE_LITERAL || LA(1) == TRUE_LITERAL )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set110))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleboolean_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleboolean_literalEx; /* Prevent compiler warnings */
    ruleboolean_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end boolean_literal */

/**
 * $ANTLR start numeric_literal
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:168:1: numeric_literal : ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL );
 */
static DonutParser_numeric_literal_return
numeric_literal(pDonutParser ctx)
{
    DonutParser_numeric_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set111;

    pANTLR3_BASE_TREE set111_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set111       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set111_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:169:2: ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set111=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == FLOAT_LITERAL || LA(1) == HEX_LITERAL || LA(1) == INT_LITERAL || LA(1) == OCT_LITERAL )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set111))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulenumeric_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenumeric_literalEx; /* Prevent compiler warnings */
    rulenumeric_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end numeric_literal */

/**
 * $ANTLR start string_literal
 * d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:174:1: string_literal : ( STRING_SINGLE | STRING_DOUBLE );
 */
static DonutParser_string_literal_return
string_literal(pDonutParser ctx)
{
    DonutParser_string_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set112;

    pANTLR3_BASE_TREE set112_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set112       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set112_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:174:16: ( STRING_SINGLE | STRING_DOUBLE )
        // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set112=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == STRING_DOUBLE || LA(1) == STRING_SINGLE )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set112))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end string_literal */

// $ANTLR start synpred1_Donut
static void synpred1_Donut_fragment(pDonutParser ctx )
{
    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:134:4: ( object )
    // d:/Dropbox/src/chisa/src/donut/src/parser\\Donut.g:134:5: object
    {
        FOLLOWPUSH(FOLLOW_object_in_synpred1_Donut1287);
        object(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_DonutEx;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_DonutEx; /* Prevent compiler warnings */
rulesynpred1_DonutEx: ;

}
// $ANTLR end synpred1_Donut
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred1_Donut(pDonutParser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Donut_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
