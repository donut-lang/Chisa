/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g
 *     -                            On : 2012-11-08 21:44:48
 *     -                 for the lexer : DonutLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "DonutLexer.h"
/* ----------------------------------------- */


/** String literals used by DonutLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x25, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x26, 0x26,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x2A, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x2B, 0x2B,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x2B, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x2D, 0x2D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x2D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x2F, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x3D, 0x3E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x66, 0x75, 0x6E, 0x63,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x74, 0x72, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x7C, 0x7C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pDonutLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pDonutLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pDonutLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pDonutLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))


/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER
#undef	    RULEMEMO
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE 
 void
	mT__53    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__54    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__55    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__56    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__57    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__58    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__59    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__60    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__61    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__62    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__63    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__64    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__65    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__66    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__67    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__68    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__69    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__70    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__71    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__72    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__73    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__74    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__75    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__76    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__77    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__78    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__79    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__80    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__81    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__82    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__83    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__84    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__85    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__86    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mT__87    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mIDENT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mLETTER    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mSTRING_SINGLE    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mSTRING_SINGLE_ELEMENT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mSTRING_DOUBLE    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mSTRING_DOUBLE_ELEMENT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mESC_SEQ    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mHEX_LITERAL    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mOCT_LITERAL    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mINT_LITERAL    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mFLOAT_LITERAL    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mDIGIT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mNONZERO_DIGIT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mEXPONENT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mHEX_DIGIT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mOCT_DIGIT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mCOMMENT    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mWS    (pDonutLexer ctx);
static ANTLR3_INLINE 
 void
	mTokens    (pDonutLexer ctx);
static void	DonutLexerFree(pDonutLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
DonutLexerFree  (pDonutLexer ctx)
{
    LEXER->free(LEXER);

    ANTLR3_FREE(ctx);
}

static void
DonutLexerReset (pDonutLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called DonutLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pDonutLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pDonutLexer DonutLexerNew
(
pANTLR3_INPUT_STREAM
 instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return DonutLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called DonutLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pDonutLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pDonutLexer DonutLexerNewSSD
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pDonutLexer ctx; // Context structure we will build and return

    ctx = (pDonutLexer) ANTLR3_CALLOC(1, sizeof(DonutLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in DonutLexer.h here so you can get a sense
     * of what goes where.
     */

    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);

    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our DonutLexer interface
     */
    ctx->mT__53	= mT__53;
    ctx->mT__54	= mT__54;
    ctx->mT__55	= mT__55;
    ctx->mT__56	= mT__56;
    ctx->mT__57	= mT__57;
    ctx->mT__58	= mT__58;
    ctx->mT__59	= mT__59;
    ctx->mT__60	= mT__60;
    ctx->mT__61	= mT__61;
    ctx->mT__62	= mT__62;
    ctx->mT__63	= mT__63;
    ctx->mT__64	= mT__64;
    ctx->mT__65	= mT__65;
    ctx->mT__66	= mT__66;
    ctx->mT__67	= mT__67;
    ctx->mT__68	= mT__68;
    ctx->mT__69	= mT__69;
    ctx->mT__70	= mT__70;
    ctx->mT__71	= mT__71;
    ctx->mT__72	= mT__72;
    ctx->mT__73	= mT__73;
    ctx->mT__74	= mT__74;
    ctx->mT__75	= mT__75;
    ctx->mT__76	= mT__76;
    ctx->mT__77	= mT__77;
    ctx->mT__78	= mT__78;
    ctx->mT__79	= mT__79;
    ctx->mT__80	= mT__80;
    ctx->mT__81	= mT__81;
    ctx->mT__82	= mT__82;
    ctx->mT__83	= mT__83;
    ctx->mT__84	= mT__84;
    ctx->mT__85	= mT__85;
    ctx->mT__86	= mT__86;
    ctx->mT__87	= mT__87;
    ctx->mIDENT	= mIDENT;
    ctx->mLETTER	= mLETTER;
    ctx->mSTRING_SINGLE	= mSTRING_SINGLE;
    ctx->mSTRING_SINGLE_ELEMENT	= mSTRING_SINGLE_ELEMENT;
    ctx->mSTRING_DOUBLE	= mSTRING_DOUBLE;
    ctx->mSTRING_DOUBLE_ELEMENT	= mSTRING_DOUBLE_ELEMENT;
    ctx->mESC_SEQ	= mESC_SEQ;
    ctx->mHEX_LITERAL	= mHEX_LITERAL;
    ctx->mOCT_LITERAL	= mOCT_LITERAL;
    ctx->mINT_LITERAL	= mINT_LITERAL;
    ctx->mFLOAT_LITERAL	= mFLOAT_LITERAL;
    ctx->mDIGIT	= mDIGIT;
    ctx->mNONZERO_DIGIT	= mNONZERO_DIGIT;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mHEX_DIGIT	= mHEX_DIGIT;
    ctx->mOCT_DIGIT	= mOCT_DIGIT;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mWS	= mWS;
    ctx->mTokens	= mTokens;

    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;

    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);

    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= DonutLexerFree;
    ctx->reset          = DonutLexerReset;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    198:1: FLOAT_LITERAL : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );
 */
static const ANTLR3_INT32 dfa15_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR3_INT32 dfa15_accept[5] =
    {
	-1, -1, 2, 1, 3
    };
static const ANTLR3_INT32 dfa15_special[5] =
    {
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa15_T_empty	    NULL

static const ANTLR3_INT32 dfa15_T0[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

static const ANTLR3_INT32 dfa15_T1[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa15_transitions[] =
{
    dfa15_T0, dfa15_T1, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 15
 */
static
ANTLR3_CYCLIC_DFA cdfa15
    =	{
	    15,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"198:1: FLOAT_LITERAL : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa15_eot,	    /* EOT table			    */
	    dfa15_eof,	    /* EOF table			    */
	    dfa15_min,	    /* Minimum tokens for each state    */
	    dfa15_max,	    /* Maximum tokens for each state    */
	    dfa15_accept,	/* Accept table			    */
	    dfa15_special,	/* Special transition states	    */
	    dfa15_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 15
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | IDENT | STRING_SINGLE | STRING_DOUBLE | HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL | COMMENT | WS );
 */
static const ANTLR3_INT32 dfa20_eot[71] =
    {
	-1, 30, 32, -1, -1, -1, 34, 37, -1, 40, 41, 45, -1, 47, 50, 52, -1, -1, 
	23, 23, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 
	23, 23, -1, 63, -1, 58, 23, 23, 23, -1, 23, 68, 69, 70, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_eof[71] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_min[71] =
    {
	9, 61, 61, -1, -1, -1, 61, 43, -1, 45, 48, 47, -1, 61, 61, 61, -1, -1, 
	97, 114, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, 
	110, 117, -1, 46, -1, 46, 115, 99, 101, -1, 101, 36, 36, 36, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_max[71] =
    {
	125, 61, 61, -1, -1, -1, 61, 61, -1, 61, 57, 61, -1, 61, 62, 61, -1, -1, 
	117, 114, -1, -1, -1, -1, -1, -1, 120, 101, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	108, 110, 117, -1, 101, -1, 101, 115, 99, 101, -1, 101, 122, 122, 122, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa20_accept[71] =
    {
	-1, -1, -1, 5, 6, 7, -1, -1, 13, -1, -1, -1, 20, -1, -1, -1, 28, 29, -1, 
	-1, 33, 34, 35, 36, 37, 38, -1, -1, 44, 2, 1, 4, 3, 9, 8, 11, 12, 10, 15, 
	16, 14, 17, 42, 19, 43, 18, 22, 21, 24, 25, 23, 27, 26, -1, -1, -1, 39, 
	-1, 41, -1, -1, -1, -1, 40, -1, -1, -1, -1, 31, 32, 30
    };
static const ANTLR3_INT32 dfa20_special[71] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa20_T_empty	    NULL

static const ANTLR3_INT32 dfa20_T0[] =
    {
	33
    };

static const ANTLR3_INT32 dfa20_T1[] =
    {
	23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
	23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23
    };

static const ANTLR3_INT32 dfa20_T2[] =
    {
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39
    };

static const ANTLR3_INT32 dfa20_T3[] =
    {
	42, -1, 57, 57, 57, 57, 57, 57, 57, 57, 42, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 42
    };

static const ANTLR3_INT32 dfa20_T4[] =
    {
	29
    };

static const ANTLR3_INT32 dfa20_T5[] =
    {
	42, -1, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 42
    };

static const ANTLR3_INT32 dfa20_T6[] =
    {
	66
    };

static const ANTLR3_INT32 dfa20_T7[] =
    {
	62
    };

static const ANTLR3_INT32 dfa20_T8[] =
    {
	28, 28, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 28, 1, 25, -1, 23, 2, 3, 24, 4, 5, 6, 7, 8, 9, 10, 
	11, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, -1, 12, 13, 14, 15, -1, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 16, -1, 17, -1, 23, -1, 23, 23, 23, 23, 
	23, 18, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 19, 23, 23, 
	23, 23, 23, 23, 20, 21, 22
    };

static const ANTLR3_INT32 dfa20_T9[] =
    {
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42
    };

static const ANTLR3_INT32 dfa20_T10[] =
    {
	44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43
    };

static const ANTLR3_INT32 dfa20_T11[] =
    {
	48, 49
    };

static const ANTLR3_INT32 dfa20_T12[] =
    {
	64
    };

static const ANTLR3_INT32 dfa20_T13[] =
    {
	67
    };

static const ANTLR3_INT32 dfa20_T14[] =
    {
	60
    };

static const ANTLR3_INT32 dfa20_T15[] =
    {
	42, -1, 57, 57, 57, 57, 57, 57, 57, 57, 42, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 56
    };

static const ANTLR3_INT32 dfa20_T16[] =
    {
	65
    };

static const ANTLR3_INT32 dfa20_T17[] =
    {
	46
    };

static const ANTLR3_INT32 dfa20_T18[] =
    {
	61
    };

static const ANTLR3_INT32 dfa20_T19[] =
    {
	55
    };

static const ANTLR3_INT32 dfa20_T20[] =
    {
	31
    };

static const ANTLR3_INT32 dfa20_T21[] =
    {
	53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 54
    };

static const ANTLR3_INT32 dfa20_T22[] =
    {
	51
    };

static const ANTLR3_INT32 dfa20_T23[] =
    {
	35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	36
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa20_transitions[] =
{
    dfa20_T8, dfa20_T4, dfa20_T20, NULL, NULL, NULL, dfa20_T0, dfa20_T23, 
    NULL, dfa20_T2, dfa20_T9, dfa20_T10, NULL, dfa20_T17, dfa20_T11, dfa20_T22, 
    NULL, NULL, dfa20_T21, dfa20_T19, NULL, NULL, NULL, NULL, NULL, NULL, 
    dfa20_T15, dfa20_T5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, dfa20_T14, dfa20_T18, dfa20_T7, NULL, 
    dfa20_T3, NULL, dfa20_T5, dfa20_T12, dfa20_T16, dfa20_T6, NULL, dfa20_T13, 
    dfa20_T1, dfa20_T1, dfa20_T1, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 20
 */
static
ANTLR3_CYCLIC_DFA cdfa20
    =	{
	    20,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | IDENT | STRING_SINGLE | STRING_DOUBLE | HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL | COMMENT | WS );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa20_eot,	    /* EOT table			    */
	    dfa20_eof,	    /* EOF table			    */
	    dfa20_min,	    /* Minimum tokens for each state    */
	    dfa20_max,	    /* Maximum tokens for each state    */
	    dfa20_accept,	/* Accept table			    */
	    dfa20_special,	/* Special transition states	    */
	    dfa20_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 20
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:7: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__53
 *
 * Looks to match the characters the constitute the token T__53
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__53(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__53;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:7:7: ( '!' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:7:9: '!'
    {
        MATCHC('!');
        if  (HASEXCEPTION())
        {
            goto ruleT__53Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__53Ex; /* Prevent compiler warnings */
    ruleT__53Ex: ;

}
// $ANTLR end T__53

//   Comes from: 8:7: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__54
 *
 * Looks to match the characters the constitute the token T__54
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__54(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__54;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:8:7: ( '!=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:8:9: '!='
    {
        MATCHS(lit_1);
        if  (HASEXCEPTION())
        {
            goto ruleT__54Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__54Ex; /* Prevent compiler warnings */
    ruleT__54Ex: ;

}
// $ANTLR end T__54

//   Comes from: 9:7: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__55
 *
 * Looks to match the characters the constitute the token T__55
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__55(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__55;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:9:7: ( '%' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:9:9: '%'
    {
        MATCHC('%');
        if  (HASEXCEPTION())
        {
            goto ruleT__55Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__55Ex; /* Prevent compiler warnings */
    ruleT__55Ex: ;

}
// $ANTLR end T__55

//   Comes from: 10:7: ( '%=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__56
 *
 * Looks to match the characters the constitute the token T__56
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__56(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__56;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:10:7: ( '%=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:10:9: '%='
    {
        MATCHS(lit_2);
        if  (HASEXCEPTION())
        {
            goto ruleT__56Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__56Ex; /* Prevent compiler warnings */
    ruleT__56Ex: ;

}
// $ANTLR end T__56

//   Comes from: 11:7: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__57
 *
 * Looks to match the characters the constitute the token T__57
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__57(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__57;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:11:7: ( '&&' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:11:9: '&&'
    {
        MATCHS(lit_3);
        if  (HASEXCEPTION())
        {
            goto ruleT__57Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__57Ex; /* Prevent compiler warnings */
    ruleT__57Ex: ;

}
// $ANTLR end T__57

//   Comes from: 12:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__58
 *
 * Looks to match the characters the constitute the token T__58
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__58(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__58;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:12:7: ( '(' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:12:9: '('
    {
        MATCHC('(');
        if  (HASEXCEPTION())
        {
            goto ruleT__58Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__58Ex; /* Prevent compiler warnings */
    ruleT__58Ex: ;

}
// $ANTLR end T__58

//   Comes from: 13:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__59
 *
 * Looks to match the characters the constitute the token T__59
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__59(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__59;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:13:7: ( ')' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:13:9: ')'
    {
        MATCHC(')');
        if  (HASEXCEPTION())
        {
            goto ruleT__59Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__59Ex; /* Prevent compiler warnings */
    ruleT__59Ex: ;

}
// $ANTLR end T__59

//   Comes from: 14:7: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__60
 *
 * Looks to match the characters the constitute the token T__60
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__60(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__60;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:14:7: ( '*' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:14:9: '*'
    {
        MATCHC('*');
        if  (HASEXCEPTION())
        {
            goto ruleT__60Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__60Ex; /* Prevent compiler warnings */
    ruleT__60Ex: ;

}
// $ANTLR end T__60

//   Comes from: 15:7: ( '*=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__61
 *
 * Looks to match the characters the constitute the token T__61
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__61(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__61;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:15:7: ( '*=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:15:9: '*='
    {
        MATCHS(lit_4);
        if  (HASEXCEPTION())
        {
            goto ruleT__61Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__61Ex; /* Prevent compiler warnings */
    ruleT__61Ex: ;

}
// $ANTLR end T__61

//   Comes from: 16:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__62
 *
 * Looks to match the characters the constitute the token T__62
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__62(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__62;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:16:7: ( '+' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:16:9: '+'
    {
        MATCHC('+');
        if  (HASEXCEPTION())
        {
            goto ruleT__62Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__62Ex; /* Prevent compiler warnings */
    ruleT__62Ex: ;

}
// $ANTLR end T__62

//   Comes from: 17:7: ( '++' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__63
 *
 * Looks to match the characters the constitute the token T__63
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__63(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__63;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:17:7: ( '++' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:17:9: '++'
    {
        MATCHS(lit_5);
        if  (HASEXCEPTION())
        {
            goto ruleT__63Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__63Ex; /* Prevent compiler warnings */
    ruleT__63Ex: ;

}
// $ANTLR end T__63

//   Comes from: 18:7: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__64
 *
 * Looks to match the characters the constitute the token T__64
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__64(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__64;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:18:7: ( '+=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:18:9: '+='
    {
        MATCHS(lit_6);
        if  (HASEXCEPTION())
        {
            goto ruleT__64Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__64Ex; /* Prevent compiler warnings */
    ruleT__64Ex: ;

}
// $ANTLR end T__64

//   Comes from: 19:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__65
 *
 * Looks to match the characters the constitute the token T__65
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__65(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__65;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:19:7: ( ',' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:19:9: ','
    {
        MATCHC(',');
        if  (HASEXCEPTION())
        {
            goto ruleT__65Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__65Ex; /* Prevent compiler warnings */
    ruleT__65Ex: ;

}
// $ANTLR end T__65

//   Comes from: 20:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__66
 *
 * Looks to match the characters the constitute the token T__66
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__66(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__66;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:20:7: ( '-' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:20:9: '-'
    {
        MATCHC('-');
        if  (HASEXCEPTION())
        {
            goto ruleT__66Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__66Ex; /* Prevent compiler warnings */
    ruleT__66Ex: ;

}
// $ANTLR end T__66

//   Comes from: 21:7: ( '--' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__67
 *
 * Looks to match the characters the constitute the token T__67
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__67(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__67;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:21:7: ( '--' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:21:9: '--'
    {
        MATCHS(lit_7);
        if  (HASEXCEPTION())
        {
            goto ruleT__67Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__67Ex; /* Prevent compiler warnings */
    ruleT__67Ex: ;

}
// $ANTLR end T__67

//   Comes from: 22:7: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__68
 *
 * Looks to match the characters the constitute the token T__68
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__68(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__68;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:22:7: ( '-=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:22:9: '-='
    {
        MATCHS(lit_8);
        if  (HASEXCEPTION())
        {
            goto ruleT__68Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__68Ex; /* Prevent compiler warnings */
    ruleT__68Ex: ;

}
// $ANTLR end T__68

//   Comes from: 23:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__69
 *
 * Looks to match the characters the constitute the token T__69
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__69(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__69;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:23:7: ( '.' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:23:9: '.'
    {
        MATCHC('.');
        if  (HASEXCEPTION())
        {
            goto ruleT__69Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__69Ex; /* Prevent compiler warnings */
    ruleT__69Ex: ;

}
// $ANTLR end T__69

//   Comes from: 24:7: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__70
 *
 * Looks to match the characters the constitute the token T__70
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__70(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__70;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:24:7: ( '/' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:24:9: '/'
    {
        MATCHC('/');
        if  (HASEXCEPTION())
        {
            goto ruleT__70Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__70Ex; /* Prevent compiler warnings */
    ruleT__70Ex: ;

}
// $ANTLR end T__70

//   Comes from: 25:7: ( '/=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__71
 *
 * Looks to match the characters the constitute the token T__71
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__71(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__71;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:25:7: ( '/=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:25:9: '/='
    {
        MATCHS(lit_9);
        if  (HASEXCEPTION())
        {
            goto ruleT__71Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__71Ex; /* Prevent compiler warnings */
    ruleT__71Ex: ;

}
// $ANTLR end T__71

//   Comes from: 26:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__72
 *
 * Looks to match the characters the constitute the token T__72
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__72(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__72;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:26:7: ( ';' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:26:9: ';'
    {
        MATCHC(';');
        if  (HASEXCEPTION())
        {
            goto ruleT__72Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__72Ex; /* Prevent compiler warnings */
    ruleT__72Ex: ;

}
// $ANTLR end T__72

//   Comes from: 27:7: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__73
 *
 * Looks to match the characters the constitute the token T__73
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__73(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__73;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:27:7: ( '<' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:27:9: '<'
    {
        MATCHC('<');
        if  (HASEXCEPTION())
        {
            goto ruleT__73Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__73Ex; /* Prevent compiler warnings */
    ruleT__73Ex: ;

}
// $ANTLR end T__73

//   Comes from: 28:7: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__74
 *
 * Looks to match the characters the constitute the token T__74
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__74(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__74;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:28:7: ( '<=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:28:9: '<='
    {
        MATCHS(lit_10);
        if  (HASEXCEPTION())
        {
            goto ruleT__74Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__74Ex; /* Prevent compiler warnings */
    ruleT__74Ex: ;

}
// $ANTLR end T__74

//   Comes from: 29:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__75
 *
 * Looks to match the characters the constitute the token T__75
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__75(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__75;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:29:7: ( '=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:29:9: '='
    {
        MATCHC('=');
        if  (HASEXCEPTION())
        {
            goto ruleT__75Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__75Ex; /* Prevent compiler warnings */
    ruleT__75Ex: ;

}
// $ANTLR end T__75

//   Comes from: 30:7: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__76
 *
 * Looks to match the characters the constitute the token T__76
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__76(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__76;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:30:7: ( '==' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:30:9: '=='
    {
        MATCHS(lit_11);
        if  (HASEXCEPTION())
        {
            goto ruleT__76Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__76Ex; /* Prevent compiler warnings */
    ruleT__76Ex: ;

}
// $ANTLR end T__76

//   Comes from: 31:7: ( '=>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__77
 *
 * Looks to match the characters the constitute the token T__77
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__77(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__77;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:31:7: ( '=>' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:31:9: '=>'
    {
        MATCHS(lit_12);
        if  (HASEXCEPTION())
        {
            goto ruleT__77Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__77Ex; /* Prevent compiler warnings */
    ruleT__77Ex: ;

}
// $ANTLR end T__77

//   Comes from: 32:7: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__78
 *
 * Looks to match the characters the constitute the token T__78
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__78(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__78;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:32:7: ( '>' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:32:9: '>'
    {
        MATCHC('>');
        if  (HASEXCEPTION())
        {
            goto ruleT__78Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__78Ex; /* Prevent compiler warnings */
    ruleT__78Ex: ;

}
// $ANTLR end T__78

//   Comes from: 33:7: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__79
 *
 * Looks to match the characters the constitute the token T__79
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__79(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__79;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:33:7: ( '>=' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:33:9: '>='
    {
        MATCHS(lit_13);
        if  (HASEXCEPTION())
        {
            goto ruleT__79Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__79Ex; /* Prevent compiler warnings */
    ruleT__79Ex: ;

}
// $ANTLR end T__79

//   Comes from: 34:7: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__80
 *
 * Looks to match the characters the constitute the token T__80
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__80(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__80;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:34:7: ( '[' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:34:9: '['
    {
        MATCHC('[');
        if  (HASEXCEPTION())
        {
            goto ruleT__80Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__80Ex; /* Prevent compiler warnings */
    ruleT__80Ex: ;

}
// $ANTLR end T__80

//   Comes from: 35:7: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__81
 *
 * Looks to match the characters the constitute the token T__81
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__81(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__81;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:35:7: ( ']' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:35:9: ']'
    {
        MATCHC(']');
        if  (HASEXCEPTION())
        {
            goto ruleT__81Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__81Ex; /* Prevent compiler warnings */
    ruleT__81Ex: ;

}
// $ANTLR end T__81

//   Comes from: 36:7: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__82
 *
 * Looks to match the characters the constitute the token T__82
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__82(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__82;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:36:7: ( 'false' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:36:9: 'false'
    {
        MATCHS(lit_14);
        if  (HASEXCEPTION())
        {
            goto ruleT__82Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__82Ex; /* Prevent compiler warnings */
    ruleT__82Ex: ;

}
// $ANTLR end T__82

//   Comes from: 37:7: ( 'func' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__83
 *
 * Looks to match the characters the constitute the token T__83
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__83(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__83;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:37:7: ( 'func' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:37:9: 'func'
    {
        MATCHS(lit_15);
        if  (HASEXCEPTION())
        {
            goto ruleT__83Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__83Ex; /* Prevent compiler warnings */
    ruleT__83Ex: ;

}
// $ANTLR end T__83

//   Comes from: 38:7: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__84
 *
 * Looks to match the characters the constitute the token T__84
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__84(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__84;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:38:7: ( 'true' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:38:9: 'true'
    {
        MATCHS(lit_16);
        if  (HASEXCEPTION())
        {
            goto ruleT__84Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__84Ex; /* Prevent compiler warnings */
    ruleT__84Ex: ;

}
// $ANTLR end T__84

//   Comes from: 39:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__85
 *
 * Looks to match the characters the constitute the token T__85
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__85(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__85;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:39:7: ( '{' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:39:9: '{'
    {
        MATCHC('{');
        if  (HASEXCEPTION())
        {
            goto ruleT__85Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__85Ex; /* Prevent compiler warnings */
    ruleT__85Ex: ;

}
// $ANTLR end T__85

//   Comes from: 40:7: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__86
 *
 * Looks to match the characters the constitute the token T__86
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__86(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__86;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:40:7: ( '||' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:40:9: '||'
    {
        MATCHS(lit_17);
        if  (HASEXCEPTION())
        {
            goto ruleT__86Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__86Ex; /* Prevent compiler warnings */
    ruleT__86Ex: ;

}
// $ANTLR end T__86

//   Comes from: 41:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__87
 *
 * Looks to match the characters the constitute the token T__87
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__87(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__87;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:41:7: ( '}' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:41:9: '}'
    {
        MATCHC('}');
        if  (HASEXCEPTION())
        {
            goto ruleT__87Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__87Ex; /* Prevent compiler warnings */
    ruleT__87Ex: ;

}
// $ANTLR end T__87

//   Comes from: 154:6: ( LETTER ( LETTER | DIGIT )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENT
 *
 * Looks to match the characters the constitute the token IDENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIDENT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IDENT;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:154:6: ( LETTER ( LETTER | DIGIT )* )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:155:2: LETTER ( LETTER | DIGIT )*
    {
        /* 155:2: LETTER ( LETTER | DIGIT )* */
        mLETTER(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleIDENTEx;
        }



        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:155:9: ( LETTER | DIGIT )*

        for (;;)
        {
            int alt1=2;
            switch ( LA(1) )
            {
            case '$':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt1=1;
            	}
                break;

            }

            switch (alt1)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	    {
        	        if ( LA(1) == '$' || ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= '@') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleIDENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleIDENTEx; /* Prevent compiler warnings */
    ruleIDENTEx: ;

}
// $ANTLR end IDENT

//   Comes from: 159:7: ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '@' | '$' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LETTER
 *
 * Looks to match the characters the constitute the token LETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLETTER(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:159:7: ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '@' | '$' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    {
        if ( LA(1) == '$' || ((LA(1) >= '@') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleLETTEREx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleLETTEREx; /* Prevent compiler warnings */
    ruleLETTEREx: ;

}
// $ANTLR end LETTER

//   Comes from: 166:14: ( '\\'' ( STRING_SINGLE_ELEMENT )* '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_SINGLE
 *
 * Looks to match the characters the constitute the token STRING_SINGLE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_SINGLE(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING_SINGLE;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:166:14: ( '\\'' ( STRING_SINGLE_ELEMENT )* '\\'' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:166:16: '\\'' ( STRING_SINGLE_ELEMENT )* '\\''
    {
        MATCHC('\'');
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_SINGLEEx;
        }


        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:166:21: ( STRING_SINGLE_ELEMENT )*

        for (;;)
        {
            int alt2=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA2_0 = LA(1);
                if ( (((LA2_0 >= 0x0000) && (LA2_0 <= '\t')) || ((LA2_0 >= 0x000B) && (LA2_0 <= '\f')) || ((LA2_0 >= 0x000E) && (LA2_0 <= '&')) || ((LA2_0 >= '(') && (LA2_0 <= 0xFFFF))))
                {
                    alt2=1;
                }

            }
            switch (alt2)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleSTRING_SINGLEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;	/* break out of the loop */
        	    break;
            }
        }
        loop2: ; /* Jump out to here if this rule does not match */


        MATCHC('\'');
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_SINGLEEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSTRING_SINGLEEx; /* Prevent compiler warnings */
    ruleSTRING_SINGLEEx: ;

}
// $ANTLR end STRING_SINGLE

//   Comes from: 170:22: (~ ( '\\'' | '\\r' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_SINGLE_ELEMENT
 *
 * Looks to match the characters the constitute the token STRING_SINGLE_ELEMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_SINGLE_ELEMENT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:170:22: (~ ( '\\'' | '\\r' | '\\n' ) )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    {
        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= 0xFFFF)) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleSTRING_SINGLE_ELEMENTEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleSTRING_SINGLE_ELEMENTEx; /* Prevent compiler warnings */
    ruleSTRING_SINGLE_ELEMENTEx: ;

}
// $ANTLR end STRING_SINGLE_ELEMENT

//   Comes from: 171:14: ( '\"' ( STRING_DOUBLE_ELEMENT )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_DOUBLE
 *
 * Looks to match the characters the constitute the token STRING_DOUBLE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_DOUBLE(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING_DOUBLE;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:171:14: ( '\"' ( STRING_DOUBLE_ELEMENT )* '\"' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:171:16: '\"' ( STRING_DOUBLE_ELEMENT )* '\"'
    {
        MATCHC('"');
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_DOUBLEEx;
        }


        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:171:20: ( STRING_DOUBLE_ELEMENT )*

        for (;;)
        {
            int alt3=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA3_0 = LA(1);
                if ( (((LA3_0 >= 0x0000) && (LA3_0 <= '\t')) || ((LA3_0 >= 0x000B) && (LA3_0 <= '\f')) || ((LA3_0 >= 0x000E) && (LA3_0 <= '!')) || ((LA3_0 >= '#') && (LA3_0 <= 0xFFFF))))
                {
                    alt3=1;
                }

            }
            switch (alt3)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:171:20: STRING_DOUBLE_ELEMENT
        	    {
        	        /* 171:20: STRING_DOUBLE_ELEMENT */
        	        mSTRING_DOUBLE_ELEMENT(ctx );
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTRING_DOUBLEEx;
        	        }



        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */


        MATCHC('"');
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_DOUBLEEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSTRING_DOUBLEEx; /* Prevent compiler warnings */
    ruleSTRING_DOUBLEEx: ;

}
// $ANTLR end STRING_DOUBLE

//   Comes from: 175:22: ( ESC_SEQ |~ ( '\\\\' | '\"' | '\\r' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_DOUBLE_ELEMENT
 *
 * Looks to match the characters the constitute the token STRING_DOUBLE_ELEMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_DOUBLE_ELEMENT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    {
        //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:175:22: ( ESC_SEQ |~ ( '\\\\' | '\"' | '\\r' | '\\n' ) )

        ANTLR3_UINT32 alt4;

        alt4=2;

        {
            int LA4_0 = LA(1);
            if ( (LA4_0 == '\\'))
            {
                alt4=1;
            }
            else if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '\t')) || ((LA4_0 >= 0x000B) && (LA4_0 <= '\f')) || ((LA4_0 >= 0x000E) && (LA4_0 <= '!')) || ((LA4_0 >= '#') && (LA4_0 <= '[')) || ((LA4_0 >= ']') && (LA4_0 <= 0xFFFF))))
            {
                alt4=2;
            }
            else
            {

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruleSTRING_DOUBLE_ELEMENTEx;

            }
        }
        switch (alt4)
        {
    	case 1:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:175:24: ESC_SEQ
    	    {
    	        /* 175:24: ESC_SEQ */
    	        mESC_SEQ(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_DOUBLE_ELEMENTEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:175:34: ~ ( '\\\\' | '\"' | '\\r' | '\\n' )
    	    {
    	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleSTRING_DOUBLE_ELEMENTEx;
    	        }


    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleSTRING_DOUBLE_ELEMENTEx; /* Prevent compiler warnings */
    ruleSTRING_DOUBLE_ELEMENTEx: ;

}
// $ANTLR end STRING_DOUBLE_ELEMENT

//   Comes from: 179:2: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\"' | '\\'' | '\\\\' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESC_SEQ(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:179:2: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\"' | '\\'' | '\\\\' )? )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:179:3: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\"' | '\\'' | '\\\\' )?
    {
        MATCHC('\\');
        if  (HASEXCEPTION())
        {
            goto ruleESC_SEQEx;
        }


        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:180:3: ( 'b' | 't' | 'n' | 'f' | 'r' | '\"' | '\\'' | '\\\\' )?
        {
            int alt5=2;
            switch ( LA(1) )
            {
                case '"':
                case '\'':
                case '\\':
                case 'b':
                case 'f':
                case 'n':
                case 'r':
                case 't':
                	{
                		alt5=1;
                	}
                    break;
            }

            switch (alt5)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	    {
        	        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleESC_SEQEx;
        	        }


        	    }
        	    break;

            }
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 190:12: ( '0' ( 'x' | 'X' ) ( HEX_DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_LITERAL
 *
 * Looks to match the characters the constitute the token HEX_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_LITERAL(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = HEX_LITERAL;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:190:12: ( '0' ( 'x' | 'X' ) ( HEX_DIGIT )+ )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:191:2: '0' ( 'x' | 'X' ) ( HEX_DIGIT )+
    {
        MATCHC('0');
        if  (HASEXCEPTION())
        {
            goto ruleHEX_LITERALEx;
        }


        if ( LA(1) == 'X' || LA(1) == 'x' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleHEX_LITERALEx;
        }


        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:191:16: ( HEX_DIGIT )+
        {
            int cnt6=0;

            for (;;)
            {
                int alt6=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        		{
        			alt6=1;
        		}
        	    break;

        	}

        	switch (alt6)
        	{
        	    case 1:
        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleHEX_LITERALEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt6 >= 1 )
        		{
        		    goto loop6;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleHEX_LITERALEx;
        	}
        	cnt6++;
            }
            loop6: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleHEX_LITERALEx; /* Prevent compiler warnings */
    ruleHEX_LITERALEx: ;

}
// $ANTLR end HEX_LITERAL

//   Comes from: 193:13: ( '0' ( OCT_DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCT_LITERAL
 *
 * Looks to match the characters the constitute the token OCT_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCT_LITERAL(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OCT_LITERAL;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:193:13: ( '0' ( OCT_DIGIT )+ )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:194:2: '0' ( OCT_DIGIT )+
    {
        MATCHC('0');
        if  (HASEXCEPTION())
        {
            goto ruleOCT_LITERALEx;
        }


        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:194:6: ( OCT_DIGIT )+
        {
            int cnt7=0;

            for (;;)
            {
                int alt7=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        		{
        			alt7=1;
        		}
        	    break;

        	}

        	switch (alt7)
        	{
        	    case 1:
        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleOCT_LITERALEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt7 >= 1 )
        		{
        		    goto loop7;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleOCT_LITERALEx;
        	}
        	cnt7++;
            }
            loop7: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleOCT_LITERALEx; /* Prevent compiler warnings */
    ruleOCT_LITERALEx: ;

}
// $ANTLR end OCT_LITERAL

//   Comes from: 196:13: ( NONZERO_DIGIT ( DIGIT )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT_LITERAL
 *
 * Looks to match the characters the constitute the token INT_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINT_LITERAL(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INT_LITERAL;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:196:13: ( NONZERO_DIGIT ( DIGIT )* )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:196:15: NONZERO_DIGIT ( DIGIT )*
    {
        /* 196:15: NONZERO_DIGIT ( DIGIT )* */
        mNONZERO_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINT_LITERALEx;
        }



        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:196:29: ( DIGIT )*

        for (;;)
        {
            int alt8=2;
            switch ( LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            	{
            		alt8=1;
            	}
                break;

            }

            switch (alt8)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleINT_LITERALEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop8;	/* break out of the loop */
        	    break;
            }
        }
        loop8: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleINT_LITERALEx; /* Prevent compiler warnings */
    ruleINT_LITERALEx: ;

}
// $ANTLR end INT_LITERAL

//   Comes from: 199:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT_LITERAL
 *
 * Looks to match the characters the constitute the token FLOAT_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT_LITERAL(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT_LITERAL;


    {
        //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:199:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )

        ANTLR3_UINT32 alt15;

        alt15=3;

        alt15 = cdfa15.predict(ctx, RECOGNIZER, ISTREAM, &cdfa15);
        if  (HASEXCEPTION())
        {
            goto ruleFLOAT_LITERALEx;
        }

        switch (alt15)
        {
    	case 1:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:199:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
    	    {
    	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:199:9: ( '0' .. '9' )+
    	        {
    	            int cnt9=0;

    	            for (;;)
    	            {
    	                int alt9=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt9=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt9)
    	        	{
    	        	    case 1:
    	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    	        	        {
    	        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	            {
    	        	                CONSUME();
    	        	            }
    	        	            else
    	        	            {
    	        	                CONSTRUCTEX();
    	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	                LRECOVER();
    	        	                goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt9 >= 1 )
    	        		{
    	        		    goto loop9;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOAT_LITERALEx;
    	        	}
    	        	cnt9++;
    	            }
    	            loop9: ;	/* Jump to here if this rule does not match */
    	        }

    	        MATCHC('.');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOAT_LITERALEx;
    	        }


    	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:199:25: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt10=2;
    	            switch ( LA(1) )
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt10=1;
    	            	}
    	                break;

    	            }

    	            switch (alt10)
    	            {
    	        	case 1:
    	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    	        	    {
    	        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	        {
    	        	            CONSUME();
    	        	        }
    	        	        else
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();
    	        	            goto ruleFLOAT_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop10;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop10: ; /* Jump out to here if this rule does not match */


    	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:199:37: ( EXPONENT )?
    	        {
    	            int alt11=2;
    	            switch ( LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt11=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt11)
    	            {
    	        	case 1:
    	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:199:37: EXPONENT
    	        	    {
    	        	        /* 199:37: EXPONENT */
    	        	        mEXPONENT(ctx );
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOAT_LITERALEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:200:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
    	    {
    	        MATCHC('.');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOAT_LITERALEx;
    	        }


    	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:200:13: ( '0' .. '9' )+
    	        {
    	            int cnt12=0;

    	            for (;;)
    	            {
    	                int alt12=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt12=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt12)
    	        	{
    	        	    case 1:
    	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    	        	        {
    	        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	            {
    	        	                CONSUME();
    	        	            }
    	        	            else
    	        	            {
    	        	                CONSTRUCTEX();
    	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	                LRECOVER();
    	        	                goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt12 >= 1 )
    	        		{
    	        		    goto loop12;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOAT_LITERALEx;
    	        	}
    	        	cnt12++;
    	            }
    	            loop12: ;	/* Jump to here if this rule does not match */
    	        }

    	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:200:25: ( EXPONENT )?
    	        {
    	            int alt13=2;
    	            switch ( LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt13=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt13)
    	            {
    	        	case 1:
    	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:200:25: EXPONENT
    	        	    {
    	        	        /* 200:25: EXPONENT */
    	        	        mEXPONENT(ctx );
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOAT_LITERALEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:201:9: ( '0' .. '9' )+ EXPONENT
    	    {
    	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:201:9: ( '0' .. '9' )+
    	        {
    	            int cnt14=0;

    	            for (;;)
    	            {
    	                int alt14=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt14=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt14)
    	        	{
    	        	    case 1:
    	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    	        	        {
    	        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	            {
    	        	                CONSUME();
    	        	            }
    	        	            else
    	        	            {
    	        	                CONSTRUCTEX();
    	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	                LRECOVER();
    	        	                goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt14 >= 1 )
    	        		{
    	        		    goto loop14;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOAT_LITERALEx;
    	        	}
    	        	cnt14++;
    	            }
    	            loop14: ;	/* Jump to here if this rule does not match */
    	        }

    	        /* 201:9: ( '0' .. '9' )+ EXPONENT */
    	        mEXPONENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOAT_LITERALEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleFLOAT_LITERALEx; /* Prevent compiler warnings */
    ruleFLOAT_LITERALEx: ;

}
// $ANTLR end FLOAT_LITERAL

//   Comes from: 206:7: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIGIT
 *
 * Looks to match the characters the constitute the token DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDIGIT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:206:7: ( '0' .. '9' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleDIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleDIGITEx; /* Prevent compiler warnings */
    ruleDIGITEx: ;

}
// $ANTLR end DIGIT

//   Comes from: 209:15: ( '1' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NONZERO_DIGIT
 *
 * Looks to match the characters the constitute the token NONZERO_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNONZERO_DIGIT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:209:15: ( '1' .. '9' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    {
        if ( ((LA(1) >= '1') && (LA(1) <= '9')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleNONZERO_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleNONZERO_DIGITEx; /* Prevent compiler warnings */
    ruleNONZERO_DIGITEx: ;

}
// $ANTLR end NONZERO_DIGIT

//   Comes from: 211:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:211:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:211:4: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleEXPONENTEx;
        }


        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:211:14: ( '+' | '-' )?
        {
            int alt16=2;
            switch ( LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt16=1;
                	}
                    break;
            }

            switch (alt16)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }

        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:211:25: ( '0' .. '9' )+
        {
            int cnt17=0;

            for (;;)
            {
                int alt17=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt17=1;
        		}
        	    break;

        	}

        	switch (alt17)
        	{
        	    case 1:
        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt17 >= 1 )
        		{
        		    goto loop17;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt17++;
            }
            loop17: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 213:2: ( ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_DIGIT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:213:2: ( ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' ) )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleHEX_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 216:2: ( '0' .. '7' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCT_DIGIT
 *
 * Looks to match the characters the constitute the token OCT_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCT_DIGIT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:216:2: ( '0' .. '7' )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleOCT_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleOCT_DIGITEx; /* Prevent compiler warnings */
    ruleOCT_DIGITEx: ;

}
// $ANTLR end OCT_DIGIT

//   Comes from: 218:8: ( '//' (~ ( '\\r' | '\\n' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:218:8: ( '//' (~ ( '\\r' | '\\n' ) )* )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:218:10: '//' (~ ( '\\r' | '\\n' ) )*
    {
        MATCHS(lit_18);
        if  (HASEXCEPTION())
        {
            goto ruleCOMMENTEx;
        }




        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:218:15: (~ ( '\\r' | '\\n' ) )*

        for (;;)
        {
            int alt18=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA18_0 = LA(1);
                if ( (((LA18_0 >= 0x0000) && (LA18_0 <= '\t')) || ((LA18_0 >= 0x000B) && (LA18_0 <= '\f')) || ((LA18_0 >= 0x000E) && (LA18_0 <= 0xFFFF))))
                {
                    alt18=1;
                }

            }
            switch (alt18)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop18;	/* break out of the loop */
        	    break;
            }
        }
        loop18: ; /* Jump out to here if this rule does not match */


        {
            LEXSTATE->channel=HIDDEN;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 219:3: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pDonutLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;


    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:219:3: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:219:5: ( ' ' | '\\t' | '\\r' | '\\n' )+
    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:219:5: ( ' ' | '\\t' | '\\r' | '\\n' )+
        {
            int cnt19=0;

            for (;;)
            {
                int alt19=2;
        	switch ( LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt19=1;
        		}
        	    break;

        	}

        	switch (alt19)
        	{
        	    case 1:
        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        	        {
        	            if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt19 >= 1 )
        		{
        		    goto loop19;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleWSEx;
        	}
        	cnt19++;
            }
            loop19: ;	/* Jump to here if this rule does not match */
        }

        {
            LEXSTATE->channel=HIDDEN;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void
mTokens(pDonutLexer ctx)
{
    {
        //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:8: ( T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | IDENT | STRING_SINGLE | STRING_DOUBLE | HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL | COMMENT | WS )

        ANTLR3_UINT32 alt20;

        alt20=44;

        alt20 = cdfa20.predict(ctx, RECOGNIZER, ISTREAM, &cdfa20);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt20)
        {
    	case 1:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:10: T__53
    	    {
    	        /* 1:10: T__53 */
    	        mT__53(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:16: T__54
    	    {
    	        /* 1:16: T__54 */
    	        mT__54(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:22: T__55
    	    {
    	        /* 1:22: T__55 */
    	        mT__55(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:28: T__56
    	    {
    	        /* 1:28: T__56 */
    	        mT__56(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:34: T__57
    	    {
    	        /* 1:34: T__57 */
    	        mT__57(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:40: T__58
    	    {
    	        /* 1:40: T__58 */
    	        mT__58(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:46: T__59
    	    {
    	        /* 1:46: T__59 */
    	        mT__59(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:52: T__60
    	    {
    	        /* 1:52: T__60 */
    	        mT__60(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:58: T__61
    	    {
    	        /* 1:58: T__61 */
    	        mT__61(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:64: T__62
    	    {
    	        /* 1:64: T__62 */
    	        mT__62(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:70: T__63
    	    {
    	        /* 1:70: T__63 */
    	        mT__63(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:76: T__64
    	    {
    	        /* 1:76: T__64 */
    	        mT__64(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:82: T__65
    	    {
    	        /* 1:82: T__65 */
    	        mT__65(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:88: T__66
    	    {
    	        /* 1:88: T__66 */
    	        mT__66(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:94: T__67
    	    {
    	        /* 1:94: T__67 */
    	        mT__67(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:100: T__68
    	    {
    	        /* 1:100: T__68 */
    	        mT__68(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:106: T__69
    	    {
    	        /* 1:106: T__69 */
    	        mT__69(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:112: T__70
    	    {
    	        /* 1:112: T__70 */
    	        mT__70(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:118: T__71
    	    {
    	        /* 1:118: T__71 */
    	        mT__71(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:124: T__72
    	    {
    	        /* 1:124: T__72 */
    	        mT__72(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:130: T__73
    	    {
    	        /* 1:130: T__73 */
    	        mT__73(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:136: T__74
    	    {
    	        /* 1:136: T__74 */
    	        mT__74(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:142: T__75
    	    {
    	        /* 1:142: T__75 */
    	        mT__75(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:148: T__76
    	    {
    	        /* 1:148: T__76 */
    	        mT__76(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:154: T__77
    	    {
    	        /* 1:154: T__77 */
    	        mT__77(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:160: T__78
    	    {
    	        /* 1:160: T__78 */
    	        mT__78(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:166: T__79
    	    {
    	        /* 1:166: T__79 */
    	        mT__79(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:172: T__80
    	    {
    	        /* 1:172: T__80 */
    	        mT__80(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:178: T__81
    	    {
    	        /* 1:178: T__81 */
    	        mT__81(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:184: T__82
    	    {
    	        /* 1:184: T__82 */
    	        mT__82(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:190: T__83
    	    {
    	        /* 1:190: T__83 */
    	        mT__83(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:196: T__84
    	    {
    	        /* 1:196: T__84 */
    	        mT__84(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:202: T__85
    	    {
    	        /* 1:202: T__85 */
    	        mT__85(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:208: T__86
    	    {
    	        /* 1:208: T__86 */
    	        mT__86(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:214: T__87
    	    {
    	        /* 1:214: T__87 */
    	        mT__87(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:220: IDENT
    	    {
    	        /* 1:220: IDENT */
    	        mIDENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:226: STRING_SINGLE
    	    {
    	        /* 1:226: STRING_SINGLE */
    	        mSTRING_SINGLE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:240: STRING_DOUBLE
    	    {
    	        /* 1:240: STRING_DOUBLE */
    	        mSTRING_DOUBLE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:254: HEX_LITERAL
    	    {
    	        /* 1:254: HEX_LITERAL */
    	        mHEX_LITERAL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:266: OCT_LITERAL
    	    {
    	        /* 1:266: OCT_LITERAL */
    	        mOCT_LITERAL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:278: INT_LITERAL
    	    {
    	        /* 1:278: INT_LITERAL */
    	        mINT_LITERAL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:290: FLOAT_LITERAL
    	    {
    	        /* 1:290: FLOAT_LITERAL */
    	        mFLOAT_LITERAL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:304: COMMENT
    	    {
    	        /* 1:304: COMMENT */
    	        mCOMMENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:1:312: WS
    	    {
    	        /* 1:312: WS */
    	        mWS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */


/* End of code
 * =============================================================================
 */
