/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g
 *     -                            On : 2012-11-19 20:47:33
 *     -                for the parser : DonutParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "DonutParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pDonutParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pDonutParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pDonutParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pDonutParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   DonutParserTokenNames[95+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "APPLY",
        (pANTLR3_UINT8) "ARGS",
        (pANTLR3_UINT8) "ARRAY",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "ASSIGN_OP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "CEQ",
        (pANTLR3_UINT8) "CGE",
        (pANTLR3_UINT8) "CGT",
        (pANTLR3_UINT8) "CLE",
        (pANTLR3_UINT8) "CLOS",
        (pANTLR3_UINT8) "CLT",
        (pANTLR3_UINT8) "CNE",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "CONT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT_LITERAL",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "IDX",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "INT_LITERAL",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "MUL",
        (pANTLR3_UINT8) "NONZERO_DIGIT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "OBJECT",
        (pANTLR3_UINT8) "OCT_DIGIT",
        (pANTLR3_UINT8) "OCT_LITERAL",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "PAIR",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "POST_OP",
        (pANTLR3_UINT8) "PRE_OP",
        (pANTLR3_UINT8) "SCOPE",
        (pANTLR3_UINT8) "STRING_DOUBLE",
        (pANTLR3_UINT8) "STRING_DOUBLE_ELEMENT",
        (pANTLR3_UINT8) "STRING_SINGLE",
        (pANTLR3_UINT8) "STRING_SINGLE_ELEMENT",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "VARS",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'=>'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'func'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 DonutParser_source_return
	source    (pDonutParser ctx);
static 
 DonutParser_program_return
	program    (pDonutParser ctx);
static 
 DonutParser_exprlist_return
	exprlist    (pDonutParser ctx);
static 
 DonutParser_expr_return
	expr    (pDonutParser ctx);
static 
 DonutParser_expr8_return
	expr8    (pDonutParser ctx);
static 
 DonutParser_expr7_return
	expr7    (pDonutParser ctx);
static 
 DonutParser_expr6_return
	expr6    (pDonutParser ctx);
static 
 DonutParser_expr5_return
	expr5    (pDonutParser ctx);
static 
 DonutParser_expr4_return
	expr4    (pDonutParser ctx);
static 
 DonutParser_expr3_return
	expr3    (pDonutParser ctx);
static 
 DonutParser_expr2_return
	expr2    (pDonutParser ctx);
static 
 DonutParser_expr1_return
	expr1    (pDonutParser ctx);
static 
 DonutParser_term_return
	term    (pDonutParser ctx);
static 
 DonutParser_postfix_return
	postfix    (pDonutParser ctx);
static 
 DonutParser_primary_return
	primary    (pDonutParser ctx);
static 
 DonutParser_name_return
	name    (pDonutParser ctx);
static 
 DonutParser_varlist_return
	varlist    (pDonutParser ctx);
static 
 DonutParser_arglist_return
	arglist    (pDonutParser ctx);
static 
 DonutParser_array_return
	array    (pDonutParser ctx);
static 
 DonutParser_exprlist_for_literal_return
	exprlist_for_literal    (pDonutParser ctx);
static 
 DonutParser_object_return
	object    (pDonutParser ctx);
static 
 DonutParser_object_pair_return
	object_pair    (pDonutParser ctx);
static 
 DonutParser_literal_return
	literal    (pDonutParser ctx);
static 
 DonutParser_boolean_literal_return
	boolean_literal    (pDonutParser ctx);
static 
 DonutParser_numeric_literal_return
	numeric_literal    (pDonutParser ctx);
static 
 DonutParser_string_literal_return
	string_literal    (pDonutParser ctx);
static void	DonutParserFree(pDonutParser ctx);
static void     DonutParserReset (pDonutParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return DonutParserNewSSD(instream, NULL);
}

/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pDonutParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pDonutParser) ANTLR3_CALLOC(1, sizeof(DonutParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in DonutParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our DonutParser interface
     */
    ctx->source	= source;
    ctx->program	= program;
    ctx->exprlist	= exprlist;
    ctx->expr	= expr;
    ctx->expr8	= expr8;
    ctx->expr7	= expr7;
    ctx->expr6	= expr6;
    ctx->expr5	= expr5;
    ctx->expr4	= expr4;
    ctx->expr3	= expr3;
    ctx->expr2	= expr2;
    ctx->expr1	= expr1;
    ctx->term	= term;
    ctx->postfix	= postfix;
    ctx->primary	= primary;
    ctx->name	= name;
    ctx->varlist	= varlist;
    ctx->arglist	= arglist;
    ctx->array	= array;
    ctx->exprlist_for_literal	= exprlist_for_literal;
    ctx->object	= object;
    ctx->object_pair	= object_pair;
    ctx->literal	= literal;
    ctx->boolean_literal	= boolean_literal;
    ctx->numeric_literal	= numeric_literal;
    ctx->string_literal	= string_literal;
    ctx->free			= DonutParserFree;
    ctx->reset			= DonutParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */
ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);

ctx->vectors	= antlr3VectorFactoryNew(0);
    /* Install the token table
     */
    PSRSTATE->tokenNames   = DonutParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
DonutParserReset (pDonutParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 DonutParserFree(pDonutParser ctx)
 {
    /* Free any scope memory
     */

ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return DonutParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_program_in_source195  */
static	ANTLR3_BITWORD FOLLOW_program_in_source195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_program_in_source195	= { FOLLOW_program_in_source195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_source197  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_source197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_source197	= { FOLLOW_EOF_in_source197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_program209  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_program209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_program209	= { FOLLOW_exprlist_in_program209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist227  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist227	= { FOLLOW_expr_in_exprlist227_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_exprlist232  */
static	ANTLR3_BITWORD FOLLOW_77_in_exprlist232_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_exprlist232	= { FOLLOW_77_in_exprlist232_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist236  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist236	= { FOLLOW_expr_in_exprlist236_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_exprlist241  */
static	ANTLR3_BITWORD FOLLOW_77_in_exprlist241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_exprlist241	= { FOLLOW_77_in_exprlist241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_expr261  */
static	ANTLR3_BITWORD FOLLOW_90_in_expr261_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_expr261	= { FOLLOW_90_in_expr261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_expr263  */
static	ANTLR3_BITWORD FOLLOW_63_in_expr263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_expr263	= { FOLLOW_63_in_expr263_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_varlist_in_expr265  */
static	ANTLR3_BITWORD FOLLOW_varlist_in_expr265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_varlist_in_expr265	= { FOLLOW_varlist_in_expr265_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_expr267  */
static	ANTLR3_BITWORD FOLLOW_64_in_expr267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_expr267	= { FOLLOW_64_in_expr267_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expr269  */
static	ANTLR3_BITWORD FOLLOW_95_in_expr269_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000004FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expr269	= { FOLLOW_95_in_expr269_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr271  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr271	= { FOLLOW_exprlist_in_expr271_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expr273  */
static	ANTLR3_BITWORD FOLLOW_98_in_expr273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expr273	= { FOLLOW_98_in_expr273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_expr288  */
static	ANTLR3_BITWORD FOLLOW_91_in_expr288_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_expr288	= { FOLLOW_91_in_expr288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_expr290  */
static	ANTLR3_BITWORD FOLLOW_63_in_expr290_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_expr290	= { FOLLOW_63_in_expr290_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr292  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr292	= { FOLLOW_expr_in_expr292_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_expr294  */
static	ANTLR3_BITWORD FOLLOW_64_in_expr294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_expr294	= { FOLLOW_64_in_expr294_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expr296  */
static	ANTLR3_BITWORD FOLLOW_95_in_expr296_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000004FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expr296	= { FOLLOW_95_in_expr296_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr300  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr300	= { FOLLOW_exprlist_in_expr300_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expr302  */
static	ANTLR3_BITWORD FOLLOW_98_in_expr302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expr302	= { FOLLOW_98_in_expr302_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_expr304  */
static	ANTLR3_BITWORD FOLLOW_87_in_expr304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_expr304	= { FOLLOW_87_in_expr304_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expr306  */
static	ANTLR3_BITWORD FOLLOW_95_in_expr306_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000004FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expr306	= { FOLLOW_95_in_expr306_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr310  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr310	= { FOLLOW_exprlist_in_expr310_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expr312  */
static	ANTLR3_BITWORD FOLLOW_98_in_expr312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expr312	= { FOLLOW_98_in_expr312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_89_in_expr331  */
static	ANTLR3_BITWORD FOLLOW_89_in_expr331_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_89_in_expr331	= { FOLLOW_89_in_expr331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_expr333  */
static	ANTLR3_BITWORD FOLLOW_63_in_expr333_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_expr333	= { FOLLOW_63_in_expr333_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr337  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr337	= { FOLLOW_expr_in_expr337_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_expr340  */
static	ANTLR3_BITWORD FOLLOW_77_in_expr340_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_expr340	= { FOLLOW_77_in_expr340_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr344  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr344	= { FOLLOW_expr_in_expr344_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_expr347  */
static	ANTLR3_BITWORD FOLLOW_77_in_expr347_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200199) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_expr347	= { FOLLOW_77_in_expr347_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr351  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr351	= { FOLLOW_expr_in_expr351_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_expr354  */
static	ANTLR3_BITWORD FOLLOW_64_in_expr354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_expr354	= { FOLLOW_64_in_expr354_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expr356  */
static	ANTLR3_BITWORD FOLLOW_95_in_expr356_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000004FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expr356	= { FOLLOW_95_in_expr356_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr360  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr360	= { FOLLOW_exprlist_in_expr360_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expr362  */
static	ANTLR3_BITWORD FOLLOW_98_in_expr362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expr362	= { FOLLOW_98_in_expr362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_expr400  */
static	ANTLR3_BITWORD FOLLOW_94_in_expr400_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_expr400	= { FOLLOW_94_in_expr400_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_expr402  */
static	ANTLR3_BITWORD FOLLOW_63_in_expr402_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200199) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_expr402	= { FOLLOW_63_in_expr402_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr406  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr406	= { FOLLOW_expr_in_expr406_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_expr409  */
static	ANTLR3_BITWORD FOLLOW_64_in_expr409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_expr409	= { FOLLOW_64_in_expr409_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expr411  */
static	ANTLR3_BITWORD FOLLOW_95_in_expr411_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000004FF202198) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expr411	= { FOLLOW_95_in_expr411_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr415  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr415	= { FOLLOW_exprlist_in_expr415_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expr417  */
static	ANTLR3_BITWORD FOLLOW_98_in_expr417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expr417	= { FOLLOW_98_in_expr417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr8_in_expr446  */
static	ANTLR3_BITWORD FOLLOW_expr8_in_expr446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr8_in_expr446	= { FOLLOW_expr8_in_expr446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr7_in_expr8457  */
static	ANTLR3_BITWORD FOLLOW_expr7_in_expr8457_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002), ANTLR3_UINT64_LIT(0x0000000000011224) };
static  ANTLR3_BITSET_LIST FOLLOW_expr7_in_expr8457	= { FOLLOW_expr7_in_expr8457_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_80_in_expr8466  */
static	ANTLR3_BITWORD FOLLOW_80_in_expr8466_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_80_in_expr8466	= { FOLLOW_80_in_expr8466_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8471  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8471	= { FOLLOW_expr_in_expr8471_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_expr8488  */
static	ANTLR3_BITWORD FOLLOW_69_in_expr8488_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_expr8488	= { FOLLOW_69_in_expr8488_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8492  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8492	= { FOLLOW_expr_in_expr8492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_73_in_expr8511  */
static	ANTLR3_BITWORD FOLLOW_73_in_expr8511_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_73_in_expr8511	= { FOLLOW_73_in_expr8511_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8515  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8515	= { FOLLOW_expr_in_expr8515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_expr8534  */
static	ANTLR3_BITWORD FOLLOW_66_in_expr8534_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_expr8534	= { FOLLOW_66_in_expr8534_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8538  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8538	= { FOLLOW_expr_in_expr8538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_expr8557  */
static	ANTLR3_BITWORD FOLLOW_76_in_expr8557_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_expr8557	= { FOLLOW_76_in_expr8557_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8561  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8561	= { FOLLOW_expr_in_expr8561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_expr8580  */
static	ANTLR3_BITWORD FOLLOW_60_in_expr8580_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_expr8580	= { FOLLOW_60_in_expr8580_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8584  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8584	= { FOLLOW_expr_in_expr8584_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr7614  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr7614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr7614	= { FOLLOW_expr6_in_expr7614_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_expr7621  */
static	ANTLR3_BITWORD FOLLOW_96_in_expr7621_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_expr7621	= { FOLLOW_96_in_expr7621_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr7625  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr7625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr7625	= { FOLLOW_expr6_in_expr7625_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6649  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6649_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6649	= { FOLLOW_expr5_in_expr6649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_expr6656  */
static	ANTLR3_BITWORD FOLLOW_62_in_expr6656_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_expr6656	= { FOLLOW_62_in_expr6656_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6660  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6660_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6660	= { FOLLOW_expr5_in_expr6660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5684  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5684_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5684	= { FOLLOW_expr4_in_expr5684_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_expr5691  */
static	ANTLR3_BITWORD FOLLOW_97_in_expr5691_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_expr5691	= { FOLLOW_97_in_expr5691_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5695  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5695	= { FOLLOW_expr4_in_expr5695_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4719  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4719_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4719	= { FOLLOW_expr3_in_expr4719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_expr4726  */
static	ANTLR3_BITWORD FOLLOW_61_in_expr4726_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_expr4726	= { FOLLOW_61_in_expr4726_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4730  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4730_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4730	= { FOLLOW_expr3_in_expr4730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3755  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3755_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000002), ANTLR3_UINT64_LIT(0x00000000001AC000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3755	= { FOLLOW_expr2_in_expr3755_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_expr3765  */
static	ANTLR3_BITWORD FOLLOW_78_in_expr3765_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_expr3765	= { FOLLOW_78_in_expr3765_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3769  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3769_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000002), ANTLR3_UINT64_LIT(0x00000000001AC000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3769	= { FOLLOW_expr2_in_expr3769_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_expr3786  */
static	ANTLR3_BITWORD FOLLOW_83_in_expr3786_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_expr3786	= { FOLLOW_83_in_expr3786_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3790  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3790_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000002), ANTLR3_UINT64_LIT(0x00000000001AC000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3790	= { FOLLOW_expr2_in_expr3790_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_81_in_expr3807  */
static	ANTLR3_BITWORD FOLLOW_81_in_expr3807_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_81_in_expr3807	= { FOLLOW_81_in_expr3807_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3811  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3811_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000002), ANTLR3_UINT64_LIT(0x00000000001AC000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3811	= { FOLLOW_expr2_in_expr3811_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_expr3828  */
static	ANTLR3_BITWORD FOLLOW_58_in_expr3828_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_expr3828	= { FOLLOW_58_in_expr3828_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3832  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3832_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000002), ANTLR3_UINT64_LIT(0x00000000001AC000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3832	= { FOLLOW_expr2_in_expr3832_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_79_in_expr3849  */
static	ANTLR3_BITWORD FOLLOW_79_in_expr3849_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_79_in_expr3849	= { FOLLOW_79_in_expr3849_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3853  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3853_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000002), ANTLR3_UINT64_LIT(0x00000000001AC000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3853	= { FOLLOW_expr2_in_expr3853_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_expr3870  */
static	ANTLR3_BITWORD FOLLOW_84_in_expr3870_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_expr3870	= { FOLLOW_84_in_expr3870_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3874  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3874_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000002), ANTLR3_UINT64_LIT(0x00000000001AC000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3874	= { FOLLOW_expr2_in_expr3874_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2901  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000088) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2901	= { FOLLOW_expr1_in_expr2901_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_expr2910  */
static	ANTLR3_BITWORD FOLLOW_67_in_expr2910_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_expr2910	= { FOLLOW_67_in_expr2910_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2914  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000088) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2914	= { FOLLOW_expr1_in_expr2914_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_expr2931  */
static	ANTLR3_BITWORD FOLLOW_71_in_expr2931_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_expr2931	= { FOLLOW_71_in_expr2931_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2935  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000088) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2935	= { FOLLOW_expr1_in_expr2935_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1963  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1963_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000002), ANTLR3_UINT64_LIT(0x0000000000000802) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1963	= { FOLLOW_term_in_expr1963_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_expr1972  */
static	ANTLR3_BITWORD FOLLOW_65_in_expr1972_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_expr1972	= { FOLLOW_65_in_expr1972_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1976  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1976_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000002), ANTLR3_UINT64_LIT(0x0000000000000802) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1976	= { FOLLOW_term_in_expr1976_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_75_in_expr1993  */
static	ANTLR3_BITWORD FOLLOW_75_in_expr1993_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_75_in_expr1993	= { FOLLOW_75_in_expr1993_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1997  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1997_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000002), ANTLR3_UINT64_LIT(0x0000000000000802) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1997	= { FOLLOW_term_in_expr1997_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_expr11014  */
static	ANTLR3_BITWORD FOLLOW_59_in_expr11014_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_expr11014	= { FOLLOW_59_in_expr11014_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr11018  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr11018_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000002), ANTLR3_UINT64_LIT(0x0000000000000802) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr11018	= { FOLLOW_term_in_expr11018_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_term1043  */
static	ANTLR3_BITWORD FOLLOW_68_in_term1043_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_term1043	= { FOLLOW_68_in_term1043_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1045  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1045	= { FOLLOW_term_in_term1045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_72_in_term1060  */
static	ANTLR3_BITWORD FOLLOW_72_in_term1060_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_72_in_term1060	= { FOLLOW_72_in_term1060_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1062  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1062	= { FOLLOW_term_in_term1062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_term1077  */
static	ANTLR3_BITWORD FOLLOW_67_in_term1077_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_term1077	= { FOLLOW_67_in_term1077_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1079  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1079	= { FOLLOW_term_in_term1079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_term1092  */
static	ANTLR3_BITWORD FOLLOW_71_in_term1092_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_term1092	= { FOLLOW_71_in_term1092_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1094  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1094_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1094	= { FOLLOW_term_in_term1094_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_term1107  */
static	ANTLR3_BITWORD FOLLOW_57_in_term1107_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000B1200198) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_term1107	= { FOLLOW_57_in_term1107_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1109  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1109	= { FOLLOW_term_in_term1109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_in_term1122  */
static	ANTLR3_BITWORD FOLLOW_postfix_in_term1122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_in_term1122	= { FOLLOW_postfix_in_term1122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_postfix1135  */
static	ANTLR3_BITWORD FOLLOW_primary_in_postfix1135_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000002), ANTLR3_UINT64_LIT(0x0000000000200510) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_postfix1135	= { FOLLOW_primary_in_postfix1135_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_postfix1144  */
static	ANTLR3_BITWORD FOLLOW_68_in_postfix1144_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000002), ANTLR3_UINT64_LIT(0x0000000000200510) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_postfix1144	= { FOLLOW_68_in_postfix1144_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_72_in_postfix1160  */
static	ANTLR3_BITWORD FOLLOW_72_in_postfix1160_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000002), ANTLR3_UINT64_LIT(0x0000000000200510) };
static  ANTLR3_BITSET_LIST FOLLOW_72_in_postfix1160	= { FOLLOW_72_in_postfix1160_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_postfix1176  */
static	ANTLR3_BITWORD FOLLOW_74_in_postfix1176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_postfix1176	= { FOLLOW_74_in_postfix1176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_postfix1180  */
static	ANTLR3_BITWORD FOLLOW_name_in_postfix1180_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000002), ANTLR3_UINT64_LIT(0x0000000000200510) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_postfix1180	= { FOLLOW_name_in_postfix1180_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_85_in_postfix1197  */
static	ANTLR3_BITWORD FOLLOW_85_in_postfix1197_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_85_in_postfix1197	= { FOLLOW_85_in_postfix1197_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_postfix1201  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_postfix1201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_postfix1201	= { FOLLOW_arglist_in_postfix1201_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_postfix1203  */
static	ANTLR3_BITWORD FOLLOW_86_in_postfix1203_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000002), ANTLR3_UINT64_LIT(0x0000000000200510) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_postfix1203	= { FOLLOW_86_in_postfix1203_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_postfix1220  */
static	ANTLR3_BITWORD FOLLOW_63_in_postfix1220_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_postfix1220	= { FOLLOW_63_in_postfix1220_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_postfix1224  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_postfix1224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_postfix1224	= { FOLLOW_arglist_in_postfix1224_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_postfix1226  */
static	ANTLR3_BITWORD FOLLOW_64_in_postfix1226_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000002), ANTLR3_UINT64_LIT(0x0000000000200510) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_postfix1226	= { FOLLOW_64_in_postfix1226_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primary1252  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primary1252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primary1252	= { FOLLOW_literal_in_primary1252_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_primary1257  */
static	ANTLR3_BITWORD FOLLOW_array_in_primary1257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_primary1257	= { FOLLOW_array_in_primary1257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_primary1262  */
static	ANTLR3_BITWORD FOLLOW_name_in_primary1262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_primary1262	= { FOLLOW_name_in_primary1262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_primary1277  */
static	ANTLR3_BITWORD FOLLOW_63_in_primary1277_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_primary1277	= { FOLLOW_63_in_primary1277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_primary1279  */
static	ANTLR3_BITWORD FOLLOW_expr_in_primary1279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_primary1279	= { FOLLOW_expr_in_primary1279_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_primary1281  */
static	ANTLR3_BITWORD FOLLOW_64_in_primary1281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_primary1281	= { FOLLOW_64_in_primary1281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_in_primary1290  */
static	ANTLR3_BITWORD FOLLOW_object_in_primary1290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_in_primary1290	= { FOLLOW_object_in_primary1290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_name1301  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_name1301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_name1301	= { FOLLOW_IDENT_in_name1301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1310  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1310	= { FOLLOW_name_in_varlist1310_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_varlist1314  */
static	ANTLR3_BITWORD FOLLOW_70_in_varlist1314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_varlist1314	= { FOLLOW_70_in_varlist1314_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1317  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1317	= { FOLLOW_name_in_varlist1317_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_arglist1338  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_arglist1338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_arglist1338	= { FOLLOW_exprlist_for_literal_in_arglist1338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_85_in_array1353  */
static	ANTLR3_BITWORD FOLLOW_85_in_array1353_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF6001D8) };
static  ANTLR3_BITSET_LIST FOLLOW_85_in_array1353	= { FOLLOW_85_in_array1353_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_array1355  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_array1355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400040) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_array1355	= { FOLLOW_exprlist_for_literal_in_array1355_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_array1357  */
static	ANTLR3_BITWORD FOLLOW_70_in_array1357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_array1357	= { FOLLOW_70_in_array1357_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_array1360  */
static	ANTLR3_BITWORD FOLLOW_86_in_array1360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_array1360	= { FOLLOW_86_in_array1360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1376  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1376	= { FOLLOW_expr_in_exprlist_for_literal1376_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_exprlist_for_literal1379  */
static	ANTLR3_BITWORD FOLLOW_70_in_exprlist_for_literal1379_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_exprlist_for_literal1379	= { FOLLOW_70_in_exprlist_for_literal1379_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1381  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1381	= { FOLLOW_expr_in_exprlist_for_literal1381_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_object1398  */
static	ANTLR3_BITWORD FOLLOW_95_in_object1398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_object1398	= { FOLLOW_95_in_object1398_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1401  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000040) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1401	= { FOLLOW_object_pair_in_object1401_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_object1404  */
static	ANTLR3_BITWORD FOLLOW_70_in_object1404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_object1404	= { FOLLOW_70_in_object1404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1406  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000040) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1406	= { FOLLOW_object_pair_in_object1406_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_object1411  */
static	ANTLR3_BITWORD FOLLOW_70_in_object1411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_object1411	= { FOLLOW_70_in_object1411_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_object1417  */
static	ANTLR3_BITWORD FOLLOW_98_in_object1417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_object1417	= { FOLLOW_98_in_object1417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_object_pair1433  */
static	ANTLR3_BITWORD FOLLOW_name_in_object_pair1433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_object_pair1433	= { FOLLOW_name_in_object_pair1433_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_object_pair1435  */
static	ANTLR3_BITWORD FOLLOW_82_in_object_pair1435_bits[]	= { ANTLR3_UINT64_LIT(0x82140804C8000000), ANTLR3_UINT64_LIT(0x00000000FF200198) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_object_pair1435	= { FOLLOW_82_in_object_pair1435_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_object_pair1437  */
static	ANTLR3_BITWORD FOLLOW_expr_in_object_pair1437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_object_pair1437	= { FOLLOW_expr_in_object_pair1437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numeric_literal_in_literal1456  */
static	ANTLR3_BITWORD FOLLOW_numeric_literal_in_literal1456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numeric_literal_in_literal1456	= { FOLLOW_numeric_literal_in_literal1456_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_literal_in_literal1461  */
static	ANTLR3_BITWORD FOLLOW_boolean_literal_in_literal1461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_literal_in_literal1461	= { FOLLOW_boolean_literal_in_literal1461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_literal1466  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_literal1466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_literal1466	= { FOLLOW_string_literal_in_literal1466_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_literal1471  */
static	ANTLR3_BITWORD FOLLOW_92_in_literal1471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_literal1471	= { FOLLOW_92_in_literal1471_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start source
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:60:1: source : program EOF -> program ;
 */
static DonutParser_source_return
source(pDonutParser ctx)
{
    DonutParser_source_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EOF2;
    DonutParser_program_return program1;
    #undef	RETURN_TYPE_program1
    #define	RETURN_TYPE_program1 DonutParser_program_return

    pANTLR3_BASE_TREE EOF2_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_program;
    /* Initialize rule variables
     */

    root_0 = NULL;

    EOF2       = NULL;
    program1.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    EOF2_tree   = NULL;

    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_program   = NULL;
    #define CREATE_stream_program  if (stream_program == NULL) {stream_program = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule program"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:60:8: ( program EOF -> program )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:60:10: program EOF
        {
            FOLLOWPUSH(FOLLOW_program_in_source195);
            program1=program(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }

            CREATE_stream_program; stream_program->add(stream_program, program1.tree, NULL);

            EOF2 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_source197);
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
             
            CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF2, NULL);


            /* AST REWRITE
             * elements          : program
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 60:22: -> program
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_program == NULL ? NULL : stream_program->nextTree(stream_program));

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulesourceEx; /* Prevent compiler warnings */
    rulesourceEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_program != NULL) stream_program->free(stream_program);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end source */

/**
 * $ANTLR start program
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:62:1: program : exprlist -> ^( CLOS VARS exprlist ) ;
 */
static DonutParser_program_return
program(pDonutParser ctx)
{
    DonutParser_program_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_return exprlist3;
    #undef	RETURN_TYPE_exprlist3
    #define	RETURN_TYPE_exprlist3 DonutParser_exprlist_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist3.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:62:9: ( exprlist -> ^( CLOS VARS exprlist ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:62:11: exprlist
        {
            FOLLOWPUSH(FOLLOW_exprlist_in_program209);
            exprlist3=exprlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }

            CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist3.tree, NULL);

            /* AST REWRITE
             * elements          : exprlist
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 62:20: -> ^( CLOS VARS exprlist )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:62:23: ^( CLOS VARS exprlist )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end program */

/**
 * $ANTLR start exprlist
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:1: exprlist : ( expr )? ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) ;
 */
static DonutParser_exprlist_return
exprlist(pDonutParser ctx)
{
    DonutParser_exprlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal5;
    pANTLR3_COMMON_TOKEN    char_literal7;
    DonutParser_expr_return expr4;
    #undef	RETURN_TYPE_expr4
    #define	RETURN_TYPE_expr4 DonutParser_expr_return

    DonutParser_expr_return expr6;
    #undef	RETURN_TYPE_expr6
    #define	RETURN_TYPE_expr6 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal5_tree;
    pANTLR3_BASE_TREE char_literal7_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal5       = NULL;
    char_literal7       = NULL;
    expr4.tree = NULL;

    expr6.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal5_tree   = NULL;
    char_literal7_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:10: ( ( expr )? ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:12: ( expr )? ( ( ';' )+ expr )* ( ';' )?
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:12: ( expr )?
            {
                int alt1=2;
                switch ( LA(1) )
                {
                    case FLOAT_LITERAL:
                    case HEX_LITERAL:
                    case IDENT:
                    case INT_LITERAL:
                    case OCT_LITERAL:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case 57:
                    case 63:
                    case 67:
                    case 68:
                    case 71:
                    case 72:
                    case 85:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:12: expr
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist227);
            	        expr4=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, expr4.tree, NULL);

            	    }
            	    break;

                }
            }

            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:18: ( ( ';' )+ expr )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case 77:
                	{
                		switch ( LA(2) )
                		{
                		case FLOAT_LITERAL:
                		case HEX_LITERAL:
                		case IDENT:
                		case INT_LITERAL:
                		case OCT_LITERAL:
                		case STRING_DOUBLE:
                		case STRING_SINGLE:
                		case 57:
                		case 63:
                		case 67:
                		case 68:
                		case 71:
                		case 72:
                		case 77:
                		case 85:
                		case 88:
                		case 89:
                		case 90:
                		case 91:
                		case 92:
                		case 93:
                		case 94:
                		case 95:
                			{
                				alt3=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:19: ( ';' )+ expr
            	    {
            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:19: ( ';' )+
            	        {
            	            int cnt2=0;

            	            for (;;)
            	            {
            	                int alt2=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case 77:
            	        		{
            	        			alt2=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt2)
            	        	{
            	        	    case 1:
            	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:20: ';'
            	        	        {
            	        	            char_literal5 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_exprlist232);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleexprlistEx;
            	        	            }
            	        	             
            	        	            CREATE_stream_77; stream_77->add(stream_77, char_literal5, NULL);


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt2 >= 1 )
            	        		{
            	        		    goto loop2;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleexprlistEx;
            	        	}
            	        	cnt2++;
            	            }
            	            loop2: ;	/* Jump to here if this rule does not match */
            	        }

            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist236);
            	        expr6=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, expr6.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:33: ( ';' )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case 77:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:34: ';'
            	    {
            	        char_literal7 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_exprlist241);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	         
            	        CREATE_stream_77; stream_77->add(stream_77, char_literal7, NULL);


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 64:40: -> ^( CONT ( expr )* )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:43: ^( CONT ( expr )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
            	        , root_1));

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:50: ( expr )*
            	        {
            	        	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	}
            	        	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlistEx; /* Prevent compiler warnings */
    ruleexprlistEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist */

/**
 * $ANTLR start expr
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:1: expr : ( 'func' '(' varlist ')' '{' exprlist '}' -> ^( CLOS varlist exprlist ) | 'if' '(' expr ')' '{' a= exprlist '}' 'else' '{' b= exprlist '}' -> ^( IF expr $a $b) | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' '{' fd= exprlist '}' -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd) | 'while' '(' (fb= expr )? ')' '{' fd= exprlist '}' -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd) | expr8 );
 */
static DonutParser_expr_return
expr(pDonutParser ctx)
{
    DonutParser_expr_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal8;
    pANTLR3_COMMON_TOKEN    char_literal9;
    pANTLR3_COMMON_TOKEN    char_literal11;
    pANTLR3_COMMON_TOKEN    char_literal12;
    pANTLR3_COMMON_TOKEN    char_literal14;
    pANTLR3_COMMON_TOKEN    string_literal15;
    pANTLR3_COMMON_TOKEN    char_literal16;
    pANTLR3_COMMON_TOKEN    char_literal18;
    pANTLR3_COMMON_TOKEN    char_literal19;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    string_literal21;
    pANTLR3_COMMON_TOKEN    char_literal22;
    pANTLR3_COMMON_TOKEN    char_literal23;
    pANTLR3_COMMON_TOKEN    string_literal24;
    pANTLR3_COMMON_TOKEN    char_literal25;
    pANTLR3_COMMON_TOKEN    char_literal26;
    pANTLR3_COMMON_TOKEN    char_literal27;
    pANTLR3_COMMON_TOKEN    char_literal28;
    pANTLR3_COMMON_TOKEN    char_literal29;
    pANTLR3_COMMON_TOKEN    char_literal30;
    pANTLR3_COMMON_TOKEN    string_literal31;
    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    char_literal35;
    DonutParser_exprlist_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_exprlist_return

    DonutParser_exprlist_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_exprlist_return

    DonutParser_expr_return fa;
    #undef	RETURN_TYPE_fa
    #define	RETURN_TYPE_fa DonutParser_expr_return

    DonutParser_expr_return fb;
    #undef	RETURN_TYPE_fb
    #define	RETURN_TYPE_fb DonutParser_expr_return

    DonutParser_expr_return fc;
    #undef	RETURN_TYPE_fc
    #define	RETURN_TYPE_fc DonutParser_expr_return

    DonutParser_exprlist_return fd;
    #undef	RETURN_TYPE_fd
    #define	RETURN_TYPE_fd DonutParser_exprlist_return

    DonutParser_varlist_return varlist10;
    #undef	RETURN_TYPE_varlist10
    #define	RETURN_TYPE_varlist10 DonutParser_varlist_return

    DonutParser_exprlist_return exprlist13;
    #undef	RETURN_TYPE_exprlist13
    #define	RETURN_TYPE_exprlist13 DonutParser_exprlist_return

    DonutParser_expr_return expr17;
    #undef	RETURN_TYPE_expr17
    #define	RETURN_TYPE_expr17 DonutParser_expr_return

    DonutParser_expr8_return expr836;
    #undef	RETURN_TYPE_expr836
    #define	RETURN_TYPE_expr836 DonutParser_expr8_return

    pANTLR3_BASE_TREE string_literal8_tree;
    pANTLR3_BASE_TREE char_literal9_tree;
    pANTLR3_BASE_TREE char_literal11_tree;
    pANTLR3_BASE_TREE char_literal12_tree;
    pANTLR3_BASE_TREE char_literal14_tree;
    pANTLR3_BASE_TREE string_literal15_tree;
    pANTLR3_BASE_TREE char_literal16_tree;
    pANTLR3_BASE_TREE char_literal18_tree;
    pANTLR3_BASE_TREE char_literal19_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE string_literal21_tree;
    pANTLR3_BASE_TREE char_literal22_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_BASE_TREE string_literal24_tree;
    pANTLR3_BASE_TREE char_literal25_tree;
    pANTLR3_BASE_TREE char_literal26_tree;
    pANTLR3_BASE_TREE char_literal27_tree;
    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_BASE_TREE string_literal31_tree;
    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE char_literal35_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_98;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_95;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_94;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_89;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_varlist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal8       = NULL;
    char_literal9       = NULL;
    char_literal11       = NULL;
    char_literal12       = NULL;
    char_literal14       = NULL;
    string_literal15       = NULL;
    char_literal16       = NULL;
    char_literal18       = NULL;
    char_literal19       = NULL;
    char_literal20       = NULL;
    string_literal21       = NULL;
    char_literal22       = NULL;
    char_literal23       = NULL;
    string_literal24       = NULL;
    char_literal25       = NULL;
    char_literal26       = NULL;
    char_literal27       = NULL;
    char_literal28       = NULL;
    char_literal29       = NULL;
    char_literal30       = NULL;
    string_literal31       = NULL;
    char_literal32       = NULL;
    char_literal33       = NULL;
    char_literal34       = NULL;
    char_literal35       = NULL;
    a.tree = NULL;

    b.tree = NULL;

    fa.tree = NULL;

    fb.tree = NULL;

    fc.tree = NULL;

    fd.tree = NULL;

    varlist10.tree = NULL;

    exprlist13.tree = NULL;

    expr17.tree = NULL;

    expr836.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal8_tree   = NULL;
    char_literal9_tree   = NULL;
    char_literal11_tree   = NULL;
    char_literal12_tree   = NULL;
    char_literal14_tree   = NULL;
    string_literal15_tree   = NULL;
    char_literal16_tree   = NULL;
    char_literal18_tree   = NULL;
    char_literal19_tree   = NULL;
    char_literal20_tree   = NULL;
    string_literal21_tree   = NULL;
    char_literal22_tree   = NULL;
    char_literal23_tree   = NULL;
    string_literal24_tree   = NULL;
    char_literal25_tree   = NULL;
    char_literal26_tree   = NULL;
    char_literal27_tree   = NULL;
    char_literal28_tree   = NULL;
    char_literal29_tree   = NULL;
    char_literal30_tree   = NULL;
    string_literal31_tree   = NULL;
    char_literal32_tree   = NULL;
    char_literal33_tree   = NULL;
    char_literal34_tree   = NULL;
    char_literal35_tree   = NULL;

    stream_98   = NULL;
    #define CREATE_stream_98  if (stream_98 == NULL) {stream_98 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 98"); } 
    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_95   = NULL;
    #define CREATE_stream_95  if (stream_95 == NULL) {stream_95 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 95"); } 
    stream_94   = NULL;
    #define CREATE_stream_94  if (stream_94 == NULL) {stream_94 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 94"); } 
    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_89   = NULL;
    #define CREATE_stream_89  if (stream_89 == NULL) {stream_89 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 89"); } 
    stream_varlist   = NULL;
    #define CREATE_stream_varlist  if (stream_varlist == NULL) {stream_varlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule varlist"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:67:2: ( 'func' '(' varlist ')' '{' exprlist '}' -> ^( CLOS varlist exprlist ) | 'if' '(' expr ')' '{' a= exprlist '}' 'else' '{' b= exprlist '}' -> ^( IF expr $a $b) | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' '{' fd= exprlist '}' -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd) | 'while' '(' (fb= expr )? ')' '{' fd= exprlist '}' -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd) | expr8 )

            ANTLR3_UINT32 alt9;

            alt9=5;

            switch ( LA(1) )
            {
            case 90:
            	{
            		alt9=1;
            	}
                break;
            case 91:
            	{
            		alt9=2;
            	}
                break;
            case 89:
            	{
            		alt9=3;
            	}
                break;
            case 94:
            	{
            		alt9=4;
            	}
                break;
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 57:
            case 63:
            case 67:
            case 68:
            case 71:
            case 72:
            case 85:
            case 88:
            case 92:
            case 93:
            case 95:
            	{
            		alt9=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto ruleexprEx;

            }

            switch (alt9)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:67:4: 'func' '(' varlist ')' '{' exprlist '}'
        	    {
        	        string_literal8 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_expr261);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_90; stream_90->add(stream_90, string_literal8, NULL);


        	        char_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_expr263);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_63; stream_63->add(stream_63, char_literal9, NULL);


        	        FOLLOWPUSH(FOLLOW_varlist_in_expr265);
        	        varlist10=varlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_varlist; stream_varlist->add(stream_varlist, varlist10.tree, NULL);

        	        char_literal11 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_expr267);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_64; stream_64->add(stream_64, char_literal11, NULL);


        	        char_literal12 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_expr269);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_95; stream_95->add(stream_95, char_literal12, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr271);
        	        exprlist13=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist13.tree, NULL);

        	        char_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_expr273);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_98; stream_98->add(stream_98, char_literal14, NULL);


        	        /* AST REWRITE
        	         * elements          : exprlist, varlist
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 67:44: -> ^( CLOS varlist exprlist )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:67:47: ^( CLOS varlist exprlist )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_varlist == NULL ? NULL : stream_varlist->nextTree(stream_varlist));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:68:4: 'if' '(' expr ')' '{' a= exprlist '}' 'else' '{' b= exprlist '}'
        	    {
        	        string_literal15 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_expr288);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_91; stream_91->add(stream_91, string_literal15, NULL);


        	        char_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_expr290);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_63; stream_63->add(stream_63, char_literal16, NULL);


        	        FOLLOWPUSH(FOLLOW_expr_in_expr292);
        	        expr17=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_expr; stream_expr->add(stream_expr, expr17.tree, NULL);

        	        char_literal18 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_expr294);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_64; stream_64->add(stream_64, char_literal18, NULL);


        	        char_literal19 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_expr296);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_95; stream_95->add(stream_95, char_literal19, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr300);
        	        a=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, a.tree, NULL);

        	        char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_expr302);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_98; stream_98->add(stream_98, char_literal20, NULL);


        	        string_literal21 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_expr304);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_87; stream_87->add(stream_87, string_literal21, NULL);


        	        char_literal22 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_expr306);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_95; stream_95->add(stream_95, char_literal22, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr310);
        	        b=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, b.tree, NULL);

        	        char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_expr312);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_98; stream_98->add(stream_98, char_literal23, NULL);


        	        /* AST REWRITE
        	         * elements          : b, expr, a
        	         * token labels      : 
        	         * rule labels       : retval, b, a
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);
        	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 68:67: -> ^( IF expr $a $b)
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:68:70: ^( IF expr $a $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_b != NULL) stream_b->free(stream_b);
        	        	if (stream_a != NULL) stream_a->free(stream_a);


        	        }
        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:4: 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' '{' fd= exprlist '}'
        	    {
        	        string_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(89, &FOLLOW_89_in_expr331);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_89; stream_89->add(stream_89, string_literal24, NULL);


        	        char_literal25 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_expr333);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_63; stream_63->add(stream_63, char_literal25, NULL);


        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:16: (fa= expr )?
        	        {
        	            int alt5=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT_LITERAL:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INT_LITERAL:
        	                case OCT_LITERAL:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case 57:
        	                case 63:
        	                case 67:
        	                case 68:
        	                case 71:
        	                case 72:
        	                case 85:
        	                case 88:
        	                case 89:
        	                case 90:
        	                case 91:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                	{
        	                		alt5=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt5)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:16: fa= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr337);
        	        	        fa=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }

        	        	        CREATE_stream_expr; stream_expr->add(stream_expr, fa.tree, NULL);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_expr340);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_77; stream_77->add(stream_77, char_literal26, NULL);


        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:29: (fb= expr )?
        	        {
        	            int alt6=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT_LITERAL:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INT_LITERAL:
        	                case OCT_LITERAL:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case 57:
        	                case 63:
        	                case 67:
        	                case 68:
        	                case 71:
        	                case 72:
        	                case 85:
        	                case 88:
        	                case 89:
        	                case 90:
        	                case 91:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                	{
        	                		alt6=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:29: fb= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr344);
        	        	        fb=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }

        	        	        CREATE_stream_expr; stream_expr->add(stream_expr, fb.tree, NULL);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal27 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_expr347);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_77; stream_77->add(stream_77, char_literal27, NULL);


        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:42: (fc= expr )?
        	        {
        	            int alt7=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT_LITERAL:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INT_LITERAL:
        	                case OCT_LITERAL:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case 57:
        	                case 63:
        	                case 67:
        	                case 68:
        	                case 71:
        	                case 72:
        	                case 85:
        	                case 88:
        	                case 89:
        	                case 90:
        	                case 91:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                	{
        	                		alt7=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt7)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:42: fc= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr351);
        	        	        fc=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }

        	        	        CREATE_stream_expr; stream_expr->add(stream_expr, fc.tree, NULL);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_expr354);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_64; stream_64->add(stream_64, char_literal28, NULL);


        	        char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_expr356);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_95; stream_95->add(stream_95, char_literal29, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr360);
        	        fd=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, fd.tree, NULL);

        	        char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_expr362);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_98; stream_98->add(stream_98, char_literal30, NULL);


        	        /* AST REWRITE
        	         * elements          : fd, fc, fb, fa
        	         * token labels      : 
        	         * rule labels       : retval, fa, fd, fb, fc
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fa;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fd;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fb;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fc;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_fa=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fa", fa.tree != NULL ? fa.tree : NULL);
        	        	stream_fd=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fd", fd.tree != NULL ? fd.tree : NULL);
        	        	stream_fb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fb", fb.tree != NULL ? fb.tree : NULL);
        	        	stream_fc=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fc", fc.tree != NULL ? fc.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 69:73: -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd)
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:76: ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR")
        	        	        , root_1));

        	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:82: ^( CONT ( $fa)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:90: ( $fa)?
        	        	            {
        	        	            	if ( (stream_fa != NULL && stream_fa->hasNext(stream_fa))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fa == NULL ? NULL : stream_fa->nextTree(stream_fa));

        	        	            	}
        	        	            	if ( stream_fa != NULL) stream_fa->reset(stream_fa);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:95: ^( CONT ( $fb)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:103: ( $fb)?
        	        	            {
        	        	            	if ( (stream_fb != NULL && stream_fb->hasNext(stream_fb))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fb == NULL ? NULL : stream_fb->nextTree(stream_fb));

        	        	            	}
        	        	            	if ( stream_fb != NULL) stream_fb->reset(stream_fb);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:108: ^( CONT ( $fc)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:116: ( $fc)?
        	        	            {
        	        	            	if ( (stream_fc != NULL && stream_fc->hasNext(stream_fc))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fc == NULL ? NULL : stream_fc->nextTree(stream_fc));

        	        	            	}
        	        	            	if ( stream_fc != NULL) stream_fc->reset(stream_fc);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fd == NULL ? NULL : stream_fd->nextTree(stream_fd));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_fa != NULL) stream_fa->free(stream_fa);
        	        	if (stream_fd != NULL) stream_fd->free(stream_fd);
        	        	if (stream_fb != NULL) stream_fb->free(stream_fb);
        	        	if (stream_fc != NULL) stream_fc->free(stream_fc);


        	        }
        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:4: 'while' '(' (fb= expr )? ')' '{' fd= exprlist '}'
        	    {
        	        string_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(94, &FOLLOW_94_in_expr400);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_94; stream_94->add(stream_94, string_literal31, NULL);


        	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_expr402);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_63; stream_63->add(stream_63, char_literal32, NULL);


        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:18: (fb= expr )?
        	        {
        	            int alt8=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT_LITERAL:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INT_LITERAL:
        	                case OCT_LITERAL:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case 57:
        	                case 63:
        	                case 67:
        	                case 68:
        	                case 71:
        	                case 72:
        	                case 85:
        	                case 88:
        	                case 89:
        	                case 90:
        	                case 91:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                	{
        	                		alt8=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt8)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:18: fb= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr406);
        	        	        fb=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }

        	        	        CREATE_stream_expr; stream_expr->add(stream_expr, fb.tree, NULL);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_expr409);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_64; stream_64->add(stream_64, char_literal33, NULL);


        	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_expr411);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_95; stream_95->add(stream_95, char_literal34, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr415);
        	        fd=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, fd.tree, NULL);

        	        char_literal35 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_expr417);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_98; stream_98->add(stream_98, char_literal35, NULL);


        	        /* AST REWRITE
        	         * elements          : fd, fb
        	         * token labels      : 
        	         * rule labels       : retval, fd, fb
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fd;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fb;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_fd=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fd", fd.tree != NULL ? fd.tree : NULL);
        	        	stream_fb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fb", fb.tree != NULL ? fb.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 70:49: -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd)
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:52: ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR")
        	        	        , root_1));

        	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:58: ^( CONT )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:66: ^( CONT $fb)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_fb == NULL ? NULL : stream_fb->nextTree(stream_fb));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:78: ^( CONT )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fd == NULL ? NULL : stream_fd->nextTree(stream_fd));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_fd != NULL) stream_fd->free(stream_fd);
        	        	if (stream_fb != NULL) stream_fb->free(stream_fb);


        	        }
        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:71:4: expr8
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_expr8_in_expr446);
        	        expr836=expr8(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expr836.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_98 != NULL) stream_98->free(stream_98);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_95 != NULL) stream_95->free(stream_95);
        if (stream_94 != NULL) stream_94->free(stream_94);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_89 != NULL) stream_89->free(stream_89);
        if (stream_varlist != NULL) stream_varlist->free(stream_varlist);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr */

/**
 * $ANTLR start expr8
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:73:1: expr8 : (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )? ;
 */
static DonutParser_expr8_return
expr8(pDonutParser ctx)
{
    DonutParser_expr8_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal37;
    pANTLR3_COMMON_TOKEN    string_literal38;
    pANTLR3_COMMON_TOKEN    string_literal39;
    pANTLR3_COMMON_TOKEN    string_literal40;
    pANTLR3_COMMON_TOKEN    string_literal41;
    pANTLR3_COMMON_TOKEN    string_literal42;
    DonutParser_expr7_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr7_return

    DonutParser_expr_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal37_tree;
    pANTLR3_BASE_TREE string_literal38_tree;
    pANTLR3_BASE_TREE string_literal39_tree;
    pANTLR3_BASE_TREE string_literal40_tree;
    pANTLR3_BASE_TREE string_literal41_tree;
    pANTLR3_BASE_TREE string_literal42_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_80;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_73;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_60;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr7;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal37       = NULL;
    string_literal38       = NULL;
    string_literal39       = NULL;
    string_literal40       = NULL;
    string_literal41       = NULL;
    string_literal42       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal37_tree   = NULL;
    string_literal38_tree   = NULL;
    string_literal39_tree   = NULL;
    string_literal40_tree   = NULL;
    string_literal41_tree   = NULL;
    string_literal42_tree   = NULL;

    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_80   = NULL;
    #define CREATE_stream_80  if (stream_80 == NULL) {stream_80 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 80"); } 
    stream_73   = NULL;
    #define CREATE_stream_73  if (stream_73 == NULL) {stream_73 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 73"); } 
    stream_60   = NULL;
    #define CREATE_stream_60  if (stream_60 == NULL) {stream_60 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 60"); } 
    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_expr7   = NULL;
    #define CREATE_stream_expr7  if (stream_expr7 == NULL) {stream_expr7 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr7"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:73:7: ( (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )? )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:73:9: (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )?
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:73:9: (a= expr7 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:73:10: a= expr7
            {
                FOLLOWPUSH(FOLLOW_expr7_in_expr8457);
                a=expr7(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr8Ex;
                }

                CREATE_stream_expr7; stream_expr7->add(stream_expr7, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 73:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:74:2: ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )?
            {
                int alt10=7;
                switch ( LA(1) )
                {
                    case 80:
                    	{
                    		alt10=1;
                    	}
                        break;
                    case 69:
                    	{
                    		alt10=2;
                    	}
                        break;
                    case 73:
                    	{
                    		alt10=3;
                    	}
                        break;
                    case 66:
                    	{
                    		alt10=4;
                    	}
                        break;
                    case 76:
                    	{
                    		alt10=5;
                    	}
                        break;
                    case 60:
                    	{
                    		alt10=6;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:74:4: '=' b= expr
            	    {
            	        char_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(80, &FOLLOW_80_in_expr8466);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	         
            	        CREATE_stream_80; stream_80->add(stream_80, char_literal37, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8471);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 74:16: -> ^( ASSIGN $expr8 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:74:19: ^( ASSIGN $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:75:4: '+=' b= expr
            	    {
            	        string_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_expr8488);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	         
            	        CREATE_stream_69; stream_69->add(stream_69, string_literal38, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8492);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 75:16: -> ^( ASSIGN_OP ADD $expr8 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:75:19: ^( ASSIGN_OP ADD $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:76:4: '-=' b= expr
            	    {
            	        string_literal39 = (pANTLR3_COMMON_TOKEN) MATCHT(73, &FOLLOW_73_in_expr8511);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	         
            	        CREATE_stream_73; stream_73->add(stream_73, string_literal39, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8515);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 76:16: -> ^( ASSIGN_OP SUB $expr8 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:76:19: ^( ASSIGN_OP SUB $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:77:4: '*=' b= expr
            	    {
            	        string_literal40 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_expr8534);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	         
            	        CREATE_stream_66; stream_66->add(stream_66, string_literal40, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8538);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr8
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 77:16: -> ^( ASSIGN_OP MUL $expr8 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:77:19: ^( ASSIGN_OP MUL $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:78:4: '/=' b= expr
            	    {
            	        string_literal41 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_expr8557);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	         
            	        CREATE_stream_76; stream_76->add(stream_76, string_literal41, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8561);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr8
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 78:16: -> ^( ASSIGN_OP DIV $expr8 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:78:19: ^( ASSIGN_OP DIV $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:4: '%=' b= expr
            	    {
            	        string_literal42 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_expr8580);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	         
            	        CREATE_stream_60; stream_60->add(stream_60, string_literal42, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8584);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 79:16: -> ^( ASSIGN_OP MOD $expr8 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:19: ^( ASSIGN_OP MOD $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr8Ex; /* Prevent compiler warnings */
    ruleexpr8Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_80 != NULL) stream_80->free(stream_80);
        if (stream_73 != NULL) stream_73->free(stream_73);
        if (stream_60 != NULL) stream_60->free(stream_60);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_expr7 != NULL) stream_expr7->free(stream_expr7);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr8 */

/**
 * $ANTLR start expr7
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:1: expr7 : (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )* ;
 */
static DonutParser_expr7_return
expr7(pDonutParser ctx)
{
    DonutParser_expr7_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal43;
    DonutParser_expr6_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr6_return

    DonutParser_expr6_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr6_return

    pANTLR3_BASE_TREE char_literal43_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_96;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr6;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal43       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal43_tree   = NULL;

    stream_96   = NULL;
    #define CREATE_stream_96  if (stream_96 == NULL) {stream_96 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 96"); } 
    stream_expr6   = NULL;
    #define CREATE_stream_expr6  if (stream_expr6 == NULL) {stream_expr6 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr6"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:7: ( (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:9: (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:9: (a= expr6 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:10: a= expr6
            {
                FOLLOWPUSH(FOLLOW_expr6_in_expr7614);
                a=expr6(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr7Ex;
                }

                CREATE_stream_expr6; stream_expr6->add(stream_expr6, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 83:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:23: ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) )
                {
                case 96:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:24: '|' b= expr6
            	    {
            	        char_literal43 = (pANTLR3_COMMON_TOKEN) MATCHT(96, &FOLLOW_96_in_expr7621);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr7Ex;
            	        }
            	         
            	        CREATE_stream_96; stream_96->add(stream_96, char_literal43, NULL);


            	        FOLLOWPUSH(FOLLOW_expr6_in_expr7625);
            	        b=expr6(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr7Ex;
            	        }

            	        CREATE_stream_expr6; stream_expr6->add(stream_expr6, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr7, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 83:36: -> ^( BIT_OR $expr7 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:39: ^( BIT_OR $expr7 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr7Ex; /* Prevent compiler warnings */
    ruleexpr7Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_96 != NULL) stream_96->free(stream_96);
        if (stream_expr6 != NULL) stream_expr6->free(stream_expr6);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr7 */

/**
 * $ANTLR start expr6
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:1: expr6 : (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )* ;
 */
static DonutParser_expr6_return
expr6(pDonutParser ctx)
{
    DonutParser_expr6_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal44;
    DonutParser_expr5_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr5_return

    DonutParser_expr5_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr5_return

    pANTLR3_BASE_TREE char_literal44_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr5;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal44       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal44_tree   = NULL;

    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_expr5   = NULL;
    #define CREATE_stream_expr5  if (stream_expr5 == NULL) {stream_expr5 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr5"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:7: ( (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:9: (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:9: (a= expr5 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:10: a= expr5
            {
                FOLLOWPUSH(FOLLOW_expr5_in_expr6649);
                a=expr5(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr6Ex;
                }

                CREATE_stream_expr5; stream_expr5->add(stream_expr5, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 84:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:23: ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case 62:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:24: '&' b= expr5
            	    {
            	        char_literal44 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_expr6656);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	         
            	        CREATE_stream_62; stream_62->add(stream_62, char_literal44, NULL);


            	        FOLLOWPUSH(FOLLOW_expr5_in_expr6660);
            	        b=expr5(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }

            	        CREATE_stream_expr5; stream_expr5->add(stream_expr5, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr6, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 84:36: -> ^( BIT_AND $expr6 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:39: ^( BIT_AND $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr6Ex; /* Prevent compiler warnings */
    ruleexpr6Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_expr5 != NULL) stream_expr5->free(stream_expr5);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr6 */

/**
 * $ANTLR start expr5
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:1: expr5 : (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* ;
 */
static DonutParser_expr5_return
expr5(pDonutParser ctx)
{
    DonutParser_expr5_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal45;
    DonutParser_expr4_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr4_return

    DonutParser_expr4_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr4_return

    pANTLR3_BASE_TREE string_literal45_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_97;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr4;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal45       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal45_tree   = NULL;

    stream_97   = NULL;
    #define CREATE_stream_97  if (stream_97 == NULL) {stream_97 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 97"); } 
    stream_expr4   = NULL;
    #define CREATE_stream_expr4  if (stream_expr4 == NULL) {stream_expr4 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr4"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:7: ( (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:9: (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:9: (a= expr4 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:10: a= expr4
            {
                FOLLOWPUSH(FOLLOW_expr4_in_expr5684);
                a=expr4(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr5Ex;
                }

                CREATE_stream_expr4; stream_expr4->add(stream_expr4, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 85:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:23: ( '||' b= expr4 -> ^( OR $expr5 $b) )*

            for (;;)
            {
                int alt13=2;
                switch ( LA(1) )
                {
                case 97:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:24: '||' b= expr4
            	    {
            	        string_literal45 = (pANTLR3_COMMON_TOKEN) MATCHT(97, &FOLLOW_97_in_expr5691);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }
            	         
            	        CREATE_stream_97; stream_97->add(stream_97, string_literal45, NULL);


            	        FOLLOWPUSH(FOLLOW_expr4_in_expr5695);
            	        b=expr4(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }

            	        CREATE_stream_expr4; stream_expr4->add(stream_expr4, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr5, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 85:37: -> ^( OR $expr5 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:40: ^( OR $expr5 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr5Ex; /* Prevent compiler warnings */
    ruleexpr5Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_97 != NULL) stream_97->free(stream_97);
        if (stream_expr4 != NULL) stream_expr4->free(stream_expr4);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr5 */

/**
 * $ANTLR start expr4
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:1: expr4 : (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* ;
 */
static DonutParser_expr4_return
expr4(pDonutParser ctx)
{
    DonutParser_expr4_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal46;
    DonutParser_expr3_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr3_return

    DonutParser_expr3_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr3_return

    pANTLR3_BASE_TREE string_literal46_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr3;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal46       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal46_tree   = NULL;

    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_expr3   = NULL;
    #define CREATE_stream_expr3  if (stream_expr3 == NULL) {stream_expr3 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr3"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:7: ( (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:9: (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:9: (a= expr3 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:10: a= expr3
            {
                FOLLOWPUSH(FOLLOW_expr3_in_expr4719);
                a=expr3(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr4Ex;
                }

                CREATE_stream_expr3; stream_expr3->add(stream_expr3, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 86:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:23: ( '&&' b= expr3 -> ^( AND $expr4 $b) )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) )
                {
                case 61:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:24: '&&' b= expr3
            	    {
            	        string_literal46 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_expr4726);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }
            	         
            	        CREATE_stream_61; stream_61->add(stream_61, string_literal46, NULL);


            	        FOLLOWPUSH(FOLLOW_expr3_in_expr4730);
            	        b=expr3(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }

            	        CREATE_stream_expr3; stream_expr3->add(stream_expr3, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr4, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 86:37: -> ^( AND $expr4 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:40: ^( AND $expr4 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr4Ex; /* Prevent compiler warnings */
    ruleexpr4Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_expr3 != NULL) stream_expr3->free(stream_expr3);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr4 */

/**
 * $ANTLR start expr3
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:88:1: expr3 : (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* ;
 */
static DonutParser_expr3_return
expr3(pDonutParser ctx)
{
    DonutParser_expr3_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal47;
    pANTLR3_COMMON_TOKEN    char_literal48;
    pANTLR3_COMMON_TOKEN    string_literal49;
    pANTLR3_COMMON_TOKEN    string_literal50;
    pANTLR3_COMMON_TOKEN    string_literal51;
    pANTLR3_COMMON_TOKEN    string_literal52;
    DonutParser_expr2_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr2_return

    DonutParser_expr2_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr2_return

    pANTLR3_BASE_TREE char_literal47_tree;
    pANTLR3_BASE_TREE char_literal48_tree;
    pANTLR3_BASE_TREE string_literal49_tree;
    pANTLR3_BASE_TREE string_literal50_tree;
    pANTLR3_BASE_TREE string_literal51_tree;
    pANTLR3_BASE_TREE string_literal52_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_79;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_78;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_58;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_81;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_84;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal47       = NULL;
    char_literal48       = NULL;
    string_literal49       = NULL;
    string_literal50       = NULL;
    string_literal51       = NULL;
    string_literal52       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal47_tree   = NULL;
    char_literal48_tree   = NULL;
    string_literal49_tree   = NULL;
    string_literal50_tree   = NULL;
    string_literal51_tree   = NULL;
    string_literal52_tree   = NULL;

    stream_79   = NULL;
    #define CREATE_stream_79  if (stream_79 == NULL) {stream_79 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 79"); } 
    stream_78   = NULL;
    #define CREATE_stream_78  if (stream_78 == NULL) {stream_78 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 78"); } 
    stream_58   = NULL;
    #define CREATE_stream_58  if (stream_58 == NULL) {stream_58 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 58"); } 
    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_81   = NULL;
    #define CREATE_stream_81  if (stream_81 == NULL) {stream_81 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 81"); } 
    stream_84   = NULL;
    #define CREATE_stream_84  if (stream_84 == NULL) {stream_84 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 84"); } 
    stream_expr2   = NULL;
    #define CREATE_stream_expr2  if (stream_expr2 == NULL) {stream_expr2 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr2"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:88:7: ( (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:88:9: (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:88:9: (a= expr2 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:88:10: a= expr2
            {
                FOLLOWPUSH(FOLLOW_expr2_in_expr3755);
                a=expr2(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr3Ex;
                }

                CREATE_stream_expr2; stream_expr2->add(stream_expr2, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 88:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:89:2: ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*

            for (;;)
            {
                int alt15=7;
                switch ( LA(1) )
                {
                case 78:
                	{
                		alt15=1;
                	}
                    break;
                case 83:
                	{
                		alt15=2;
                	}
                    break;
                case 81:
                	{
                		alt15=3;
                	}
                    break;
                case 58:
                	{
                		alt15=4;
                	}
                    break;
                case 79:
                	{
                		alt15=5;
                	}
                    break;
                case 84:
                	{
                		alt15=6;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:89:4: '<' b= expr2
            	    {
            	        char_literal47 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_expr3765);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_78; stream_78->add(stream_78, char_literal47, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3769);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 89:16: -> ^( CLT $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:89:19: ^( CLT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLT, (pANTLR3_UINT8)"CLT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:90:4: '>' b= expr2
            	    {
            	        char_literal48 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_expr3786);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_83; stream_83->add(stream_83, char_literal48, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3790);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 90:16: -> ^( CGT $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:90:19: ^( CGT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGT, (pANTLR3_UINT8)"CGT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:91:4: '==' b= expr2
            	    {
            	        string_literal49 = (pANTLR3_COMMON_TOKEN) MATCHT(81, &FOLLOW_81_in_expr3807);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_81; stream_81->add(stream_81, string_literal49, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3811);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 91:17: -> ^( CEQ $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:91:20: ^( CEQ $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CEQ, (pANTLR3_UINT8)"CEQ")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:92:4: '!=' b= expr2
            	    {
            	        string_literal50 = (pANTLR3_COMMON_TOKEN) MATCHT(58, &FOLLOW_58_in_expr3828);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_58; stream_58->add(stream_58, string_literal50, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3832);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 92:17: -> ^( CNE $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:92:20: ^( CNE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CNE, (pANTLR3_UINT8)"CNE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:93:4: '<=' b= expr2
            	    {
            	        string_literal51 = (pANTLR3_COMMON_TOKEN) MATCHT(79, &FOLLOW_79_in_expr3849);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_79; stream_79->add(stream_79, string_literal51, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3853);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 93:17: -> ^( CLE $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:93:20: ^( CLE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLE, (pANTLR3_UINT8)"CLE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:94:4: '>=' b= expr2
            	    {
            	        string_literal52 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_expr3870);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_84; stream_84->add(stream_84, string_literal52, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3874);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 94:17: -> ^( CGE $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:94:20: ^( CGE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGE, (pANTLR3_UINT8)"CGE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr3Ex; /* Prevent compiler warnings */
    ruleexpr3Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_79 != NULL) stream_79->free(stream_79);
        if (stream_78 != NULL) stream_78->free(stream_78);
        if (stream_58 != NULL) stream_58->free(stream_58);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_81 != NULL) stream_81->free(stream_81);
        if (stream_84 != NULL) stream_84->free(stream_84);
        if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr3 */

/**
 * $ANTLR start expr2
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:1: expr2 : (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* ;
 */
static DonutParser_expr2_return
expr2(pDonutParser ctx)
{
    DonutParser_expr2_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal53;
    pANTLR3_COMMON_TOKEN    char_literal54;
    DonutParser_expr1_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr1_return

    DonutParser_expr1_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr1_return

    pANTLR3_BASE_TREE char_literal53_tree;
    pANTLR3_BASE_TREE char_literal54_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal53       = NULL;
    char_literal54       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal53_tree   = NULL;
    char_literal54_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_expr1   = NULL;
    #define CREATE_stream_expr1  if (stream_expr1 == NULL) {stream_expr1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr1"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:7: ( (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:9: (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:9: (a= expr1 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:10: a= expr1
            {
                FOLLOWPUSH(FOLLOW_expr1_in_expr2901);
                a=expr1(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr2Ex;
                }

                CREATE_stream_expr1; stream_expr1->add(stream_expr1, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 97:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:98:2: ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*

            for (;;)
            {
                int alt16=3;
                switch ( LA(1) )
                {
                case 67:
                	{
                		alt16=1;
                	}
                    break;
                case 71:
                	{
                		alt16=2;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:98:4: '+' b= expr1
            	    {
            	        char_literal53 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_expr2910);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	         
            	        CREATE_stream_67; stream_67->add(stream_67, char_literal53, NULL);


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2914);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }

            	        CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr2, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 98:16: -> ^( ADD $expr2 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:98:19: ^( ADD $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:99:4: '-' b= expr1
            	    {
            	        char_literal54 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_expr2931);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	         
            	        CREATE_stream_71; stream_71->add(stream_71, char_literal54, NULL);


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2935);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }

            	        CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr2, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 99:16: -> ^( SUB $expr2 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:99:19: ^( SUB $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr2Ex; /* Prevent compiler warnings */
    ruleexpr2Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr2 */

/**
 * $ANTLR start expr1
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:102:1: expr1 : (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* ;
 */
static DonutParser_expr1_return
expr1(pDonutParser ctx)
{
    DonutParser_expr1_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    char_literal57;
    DonutParser_term_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_term_return

    DonutParser_term_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_term_return

    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_59;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_75;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal55       = NULL;
    char_literal56       = NULL;
    char_literal57       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal55_tree   = NULL;
    char_literal56_tree   = NULL;
    char_literal57_tree   = NULL;

    stream_59   = NULL;
    #define CREATE_stream_59  if (stream_59 == NULL) {stream_59 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 59"); } 
    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 
    stream_75   = NULL;
    #define CREATE_stream_75  if (stream_75 == NULL) {stream_75 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 75"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:102:8: ( (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:102:10: (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:102:10: (a= term -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:102:11: a= term
            {
                FOLLOWPUSH(FOLLOW_term_in_expr1963);
                a=term(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr1Ex;
                }

                CREATE_stream_term; stream_term->add(stream_term, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 102:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:103:2: ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*

            for (;;)
            {
                int alt17=4;
                switch ( LA(1) )
                {
                case 65:
                	{
                		alt17=1;
                	}
                    break;
                case 75:
                	{
                		alt17=2;
                	}
                    break;
                case 59:
                	{
                		alt17=3;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:103:4: '*' b= term
            	    {
            	        char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_expr1972);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	         
            	        CREATE_stream_65; stream_65->add(stream_65, char_literal55, NULL);


            	        FOLLOWPUSH(FOLLOW_term_in_expr1976);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }

            	        CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr1
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 103:15: -> ^( MUL $expr1 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:103:18: ^( MUL $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:104:4: '/' b= term
            	    {
            	        char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(75, &FOLLOW_75_in_expr1993);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	         
            	        CREATE_stream_75; stream_75->add(stream_75, char_literal56, NULL);


            	        FOLLOWPUSH(FOLLOW_term_in_expr1997);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }

            	        CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 104:15: -> ^( DIV $expr1 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:104:18: ^( DIV $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:105:4: '%' b= term
            	    {
            	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(59, &FOLLOW_59_in_expr11014);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	         
            	        CREATE_stream_59; stream_59->add(stream_59, char_literal57, NULL);


            	        FOLLOWPUSH(FOLLOW_term_in_expr11018);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }

            	        CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 105:15: -> ^( MOD $expr1 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:105:18: ^( MOD $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr1Ex; /* Prevent compiler warnings */
    ruleexpr1Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_59 != NULL) stream_59->free(stream_59);
        if (stream_65 != NULL) stream_65->free(stream_65);
        if (stream_75 != NULL) stream_75->free(stream_75);
        if (stream_term != NULL) stream_term->free(stream_term);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr1 */

/**
 * $ANTLR start term
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:108:1: term : ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix );
 */
static DonutParser_term_return
term(pDonutParser ctx)
{
    DonutParser_term_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal58;
    pANTLR3_COMMON_TOKEN    string_literal60;
    pANTLR3_COMMON_TOKEN    char_literal62;
    pANTLR3_COMMON_TOKEN    char_literal64;
    pANTLR3_COMMON_TOKEN    char_literal66;
    DonutParser_term_return term59;
    #undef	RETURN_TYPE_term59
    #define	RETURN_TYPE_term59 DonutParser_term_return

    DonutParser_term_return term61;
    #undef	RETURN_TYPE_term61
    #define	RETURN_TYPE_term61 DonutParser_term_return

    DonutParser_term_return term63;
    #undef	RETURN_TYPE_term63
    #define	RETURN_TYPE_term63 DonutParser_term_return

    DonutParser_term_return term65;
    #undef	RETURN_TYPE_term65
    #define	RETURN_TYPE_term65 DonutParser_term_return

    DonutParser_term_return term67;
    #undef	RETURN_TYPE_term67
    #define	RETURN_TYPE_term67 DonutParser_term_return

    DonutParser_postfix_return postfix68;
    #undef	RETURN_TYPE_postfix68
    #define	RETURN_TYPE_postfix68 DonutParser_postfix_return

    pANTLR3_BASE_TREE string_literal58_tree;
    pANTLR3_BASE_TREE string_literal60_tree;
    pANTLR3_BASE_TREE char_literal62_tree;
    pANTLR3_BASE_TREE char_literal64_tree;
    pANTLR3_BASE_TREE char_literal66_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_57;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_72;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal58       = NULL;
    string_literal60       = NULL;
    char_literal62       = NULL;
    char_literal64       = NULL;
    char_literal66       = NULL;
    term59.tree = NULL;

    term61.tree = NULL;

    term63.tree = NULL;

    term65.tree = NULL;

    term67.tree = NULL;

    postfix68.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal58_tree   = NULL;
    string_literal60_tree   = NULL;
    char_literal62_tree   = NULL;
    char_literal64_tree   = NULL;
    char_literal66_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_57   = NULL;
    #define CREATE_stream_57  if (stream_57 == NULL) {stream_57 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 57"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_72   = NULL;
    #define CREATE_stream_72  if (stream_72 == NULL) {stream_72 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 72"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:109:2: ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix )

            ANTLR3_UINT32 alt18;

            alt18=6;

            switch ( LA(1) )
            {
            case 68:
            	{
            		alt18=1;
            	}
                break;
            case 72:
            	{
            		alt18=2;
            	}
                break;
            case 67:
            	{
            		alt18=3;
            	}
                break;
            case 71:
            	{
            		alt18=4;
            	}
                break;
            case 57:
            	{
            		alt18=5;
            	}
                break;
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 63:
            case 85:
            case 88:
            case 92:
            case 93:
            case 95:
            	{
            		alt18=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt18)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:109:4: '++' term
        	    {
        	        string_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_term1043);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_68; stream_68->add(stream_68, string_literal58, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term1045);
        	        term59=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term59.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 109:14: -> ^( PRE_OP ADD term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:109:17: ^( PRE_OP ADD term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:110:4: '--' term
        	    {
        	        string_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(72, &FOLLOW_72_in_term1060);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_72; stream_72->add(stream_72, string_literal60, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term1062);
        	        term61=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term61.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 110:14: -> ^( PRE_OP SUB term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:110:17: ^( PRE_OP SUB term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:111:4: '+' term
        	    {
        	        char_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_term1077);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_67; stream_67->add(stream_67, char_literal62, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term1079);
        	        term63=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term63.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 111:13: -> ^( PLUS term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:111:16: ^( PLUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUS, (pANTLR3_UINT8)"PLUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:112:4: '-' term
        	    {
        	        char_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_term1092);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_71; stream_71->add(stream_71, char_literal64, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term1094);
        	        term65=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term65.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 112:13: -> ^( MINUS term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:112:16: ^( MINUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUS, (pANTLR3_UINT8)"MINUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:113:4: '!' term
        	    {
        	        char_literal66 = (pANTLR3_COMMON_TOKEN) MATCHT(57, &FOLLOW_57_in_term1107);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_57; stream_57->add(stream_57, char_literal66, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term1109);
        	        term67=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term67.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 113:13: -> ^( NOT term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:113:16: ^( NOT term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:114:4: postfix
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_postfix_in_term1122);
        	        postfix68=postfix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, postfix68.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_57 != NULL) stream_57->free(stream_57);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_72 != NULL) stream_72->free(stream_72);
        if (stream_term != NULL) stream_term->free(stream_term);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end term */

/**
 * $ANTLR start postfix
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:116:1: postfix : (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )* ;
 */
static DonutParser_postfix_return
postfix(pDonutParser ctx)
{
    DonutParser_postfix_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal69;
    pANTLR3_COMMON_TOKEN    string_literal70;
    pANTLR3_COMMON_TOKEN    char_literal71;
    pANTLR3_COMMON_TOKEN    char_literal72;
    pANTLR3_COMMON_TOKEN    char_literal73;
    pANTLR3_COMMON_TOKEN    char_literal74;
    pANTLR3_COMMON_TOKEN    char_literal75;
    DonutParser_primary_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p DonutParser_primary_return

    DonutParser_name_return n;
    #undef	RETURN_TYPE_n
    #define	RETURN_TYPE_n DonutParser_name_return

    DonutParser_arglist_return arl;
    #undef	RETURN_TYPE_arl
    #define	RETURN_TYPE_arl DonutParser_arglist_return

    DonutParser_arglist_return apl;
    #undef	RETURN_TYPE_apl
    #define	RETURN_TYPE_apl DonutParser_arglist_return

    pANTLR3_BASE_TREE string_literal69_tree;
    pANTLR3_BASE_TREE string_literal70_tree;
    pANTLR3_BASE_TREE char_literal71_tree;
    pANTLR3_BASE_TREE char_literal72_tree;
    pANTLR3_BASE_TREE char_literal73_tree;
    pANTLR3_BASE_TREE char_literal74_tree;
    pANTLR3_BASE_TREE char_literal75_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_72;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_74;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_85;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arglist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal69       = NULL;
    string_literal70       = NULL;
    char_literal71       = NULL;
    char_literal72       = NULL;
    char_literal73       = NULL;
    char_literal74       = NULL;
    char_literal75       = NULL;
    p.tree = NULL;

    n.tree = NULL;

    arl.tree = NULL;

    apl.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal69_tree   = NULL;
    string_literal70_tree   = NULL;
    char_literal71_tree   = NULL;
    char_literal72_tree   = NULL;
    char_literal73_tree   = NULL;
    char_literal74_tree   = NULL;
    char_literal75_tree   = NULL;

    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_72   = NULL;
    #define CREATE_stream_72  if (stream_72 == NULL) {stream_72 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 72"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_74   = NULL;
    #define CREATE_stream_74  if (stream_74 == NULL) {stream_74 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 74"); } 
    stream_85   = NULL;
    #define CREATE_stream_85  if (stream_85 == NULL) {stream_85 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 85"); } 
    stream_arglist   = NULL;
    #define CREATE_stream_arglist  if (stream_arglist == NULL) {stream_arglist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arglist"); }
    stream_primary   = NULL;
    #define CREATE_stream_primary  if (stream_primary == NULL) {stream_primary = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary"); }
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:117:2: ( (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:117:4: (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:117:4: (p= primary -> $p)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:117:5: p= primary
            {
                FOLLOWPUSH(FOLLOW_primary_in_postfix1135);
                p=primary(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixEx;
                }

                CREATE_stream_primary; stream_primary->add(stream_primary, p.tree, NULL);

                /* AST REWRITE
                 * elements          : p
                 * token labels      : 
                 * rule labels       : retval, p
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_p=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", p.tree != NULL ? p.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 117:14: -> $p
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_p != NULL) stream_p->free(stream_p);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:118:2: ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )*

            for (;;)
            {
                int alt19=6;
                switch ( LA(1) )
                {
                case 68:
                	{
                		alt19=1;
                	}
                    break;
                case 72:
                	{
                		alt19=2;
                	}
                    break;
                case 74:
                	{
                		alt19=3;
                	}
                    break;
                case 85:
                	{
                		alt19=4;
                	}
                    break;
                case 63:
                	{
                		alt19=5;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:118:4: '++'
            	    {
            	        string_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_postfix1144);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_68; stream_68->add(stream_68, string_literal69, NULL);


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 118:9: -> ^( POST_OP ADD $postfix)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:118:12: ^( POST_OP ADD $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:119:4: '--'
            	    {
            	        string_literal70 = (pANTLR3_COMMON_TOKEN) MATCHT(72, &FOLLOW_72_in_postfix1160);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_72; stream_72->add(stream_72, string_literal70, NULL);


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 119:9: -> ^( POST_OP SUB $postfix)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:119:12: ^( POST_OP SUB $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:120:4: '.' n= name
            	    {
            	        char_literal71 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_postfix1176);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_74; stream_74->add(stream_74, char_literal71, NULL);


            	        FOLLOWPUSH(FOLLOW_name_in_postfix1180);
            	        n=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }

            	        CREATE_stream_name; stream_name->add(stream_name, n.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : n, postfix
            	         * token labels      : 
            	         * rule labels       : retval, n
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_n;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_n=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n.tree != NULL ? n.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 120:15: -> ^( DOT $postfix $n)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:120:18: ^( DOT $postfix $n)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n == NULL ? NULL : stream_n->nextTree(stream_n));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_n != NULL) stream_n->free(stream_n);


            	        }
            	    }
            	    break;
            	case 4:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:121:4: '[' arl= arglist ']'
            	    {
            	        char_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(85, &FOLLOW_85_in_postfix1197);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_85; stream_85->add(stream_85, char_literal72, NULL);


            	        FOLLOWPUSH(FOLLOW_arglist_in_postfix1201);
            	        arl=arglist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }

            	        CREATE_stream_arglist; stream_arglist->add(stream_arglist, arl.tree, NULL);

            	        char_literal73 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_postfix1203);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_86; stream_86->add(stream_86, char_literal73, NULL);


            	        /* AST REWRITE
            	         * elements          : postfix, arl
            	         * token labels      : 
            	         * rule labels       : retval, arl
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arl;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_arl=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token arl", arl.tree != NULL ? arl.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 121:24: -> ^( IDX $postfix $arl)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:121:27: ^( IDX $postfix $arl)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDX, (pANTLR3_UINT8)"IDX")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arl == NULL ? NULL : stream_arl->nextTree(stream_arl));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_arl != NULL) stream_arl->free(stream_arl);


            	        }
            	    }
            	    break;
            	case 5:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:122:4: '(' apl= arglist ')'
            	    {
            	        char_literal74 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_postfix1220);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_63; stream_63->add(stream_63, char_literal74, NULL);


            	        FOLLOWPUSH(FOLLOW_arglist_in_postfix1224);
            	        apl=arglist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }

            	        CREATE_stream_arglist; stream_arglist->add(stream_arglist, apl.tree, NULL);

            	        char_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_postfix1226);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_64; stream_64->add(stream_64, char_literal75, NULL);


            	        /* AST REWRITE
            	         * elements          : postfix, apl
            	         * token labels      : 
            	         * rule labels       : retval, apl
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_apl;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_apl=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token apl", apl.tree != NULL ? apl.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 122:24: -> ^( APPLY $postfix $apl)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:122:27: ^( APPLY $postfix $apl)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, APPLY, (pANTLR3_UINT8)"APPLY")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_apl == NULL ? NULL : stream_apl->nextTree(stream_apl));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_apl != NULL) stream_apl->free(stream_apl);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepostfixEx; /* Prevent compiler warnings */
    rulepostfixEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_72 != NULL) stream_72->free(stream_72);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_74 != NULL) stream_74->free(stream_74);
        if (stream_85 != NULL) stream_85->free(stream_85);
        if (stream_arglist != NULL) stream_arglist->free(stream_arglist);
        if (stream_primary != NULL) stream_primary->free(stream_primary);
        if (stream_name != NULL) stream_name->free(stream_name);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end postfix */

/**
 * $ANTLR start primary
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:125:1: primary : ( literal | array | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | object );
 */
static DonutParser_primary_return
primary(pDonutParser ctx)
{
    DonutParser_primary_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal79;
    pANTLR3_COMMON_TOKEN    char_literal81;
    DonutParser_literal_return literal76;
    #undef	RETURN_TYPE_literal76
    #define	RETURN_TYPE_literal76 DonutParser_literal_return

    DonutParser_array_return array77;
    #undef	RETURN_TYPE_array77
    #define	RETURN_TYPE_array77 DonutParser_array_return

    DonutParser_name_return name78;
    #undef	RETURN_TYPE_name78
    #define	RETURN_TYPE_name78 DonutParser_name_return

    DonutParser_expr_return expr80;
    #undef	RETURN_TYPE_expr80
    #define	RETURN_TYPE_expr80 DonutParser_expr_return

    DonutParser_object_return object82;
    #undef	RETURN_TYPE_object82
    #define	RETURN_TYPE_object82 DonutParser_object_return

    pANTLR3_BASE_TREE char_literal79_tree;
    pANTLR3_BASE_TREE char_literal81_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal79       = NULL;
    char_literal81       = NULL;
    literal76.tree = NULL;

    array77.tree = NULL;

    name78.tree = NULL;

    expr80.tree = NULL;

    object82.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal79_tree   = NULL;
    char_literal81_tree   = NULL;

    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:126:2: ( literal | array | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | object )

            ANTLR3_UINT32 alt20;

            alt20=5;

            switch ( LA(1) )
            {
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case INT_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 88:
            case 92:
            case 93:
            	{
            		alt20=1;
            	}
                break;
            case 85:
            	{
            		alt20=2;
            	}
                break;
            case IDENT:
            	{
            		alt20=3;
            	}
                break;
            case 63:
            	{
            		alt20=4;
            	}
                break;
            case 95:
            	{
            		alt20=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 20;
                EXCEPTION->state        = 0;


                goto ruleprimaryEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:126:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_literal_in_primary1252);
        	        literal76=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, literal76.tree);

        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:127:4: array
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_array_in_primary1257);
        	        array77=array(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, array77.tree);

        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:128:4: name
        	    {
        	        FOLLOWPUSH(FOLLOW_name_in_primary1262);
        	        name78=name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_name; stream_name->add(stream_name, name78.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : name
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 128:9: -> ^( DOT SCOPE name )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:128:12: ^( DOT SCOPE name )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SCOPE, (pANTLR3_UINT8)"SCOPE")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:129:4: '(' expr ')'
        	    {
        	        char_literal79 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_primary1277);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	         
        	        CREATE_stream_63; stream_63->add(stream_63, char_literal79, NULL);


        	        FOLLOWPUSH(FOLLOW_expr_in_primary1279);
        	        expr80=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_expr; stream_expr->add(stream_expr, expr80.tree, NULL);

        	        char_literal81 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_primary1281);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	         
        	        CREATE_stream_64; stream_64->add(stream_64, char_literal81, NULL);


        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 129:17: -> expr
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:4: object
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_object_in_primary1290);
        	        object82=object(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, object82.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end primary */

/**
 * $ANTLR start name
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:1: name : IDENT ;
 */
static DonutParser_name_return
name(pDonutParser ctx)
{
    DonutParser_name_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT83;

    pANTLR3_BASE_TREE IDENT83_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    IDENT83       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    IDENT83_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:6: ( IDENT )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:8: IDENT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            IDENT83 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_name1301);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }

            IDENT83_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT83));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT83_tree);


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start varlist
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:1: varlist : ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) ;
 */
static DonutParser_varlist_return
varlist(pDonutParser ctx)
{
    DonutParser_varlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal85;
    DonutParser_name_return name84;
    #undef	RETURN_TYPE_name84
    #define	RETURN_TYPE_name84 DonutParser_name_return

    DonutParser_name_return name86;
    #undef	RETURN_TYPE_name86
    #define	RETURN_TYPE_name86 DonutParser_name_return

    pANTLR3_BASE_TREE char_literal85_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal85       = NULL;
    name84.tree = NULL;

    name86.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal85_tree   = NULL;

    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:9: ( ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:11: ( name ( ( ',' ) name )* )?
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:11: ( name ( ( ',' ) name )* )?
            {
                int alt22=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt22=1;
                    	}
                        break;
                }

                switch (alt22)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:12: name ( ( ',' ) name )*
            	    {
            	        FOLLOWPUSH(FOLLOW_name_in_varlist1310);
            	        name84=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarlistEx;
            	        }

            	        CREATE_stream_name; stream_name->add(stream_name, name84.tree, NULL);

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:17: ( ( ',' ) name )*

            	        for (;;)
            	        {
            	            int alt21=2;
            	            switch ( LA(1) )
            	            {
            	            case 70:
            	            	{
            	            		alt21=1;
            	            	}
            	                break;

            	            }

            	            switch (alt21)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:18: ( ',' ) name
            	        	    {
            	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:18: ( ',' )
            	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:19: ','
            	        	        {
            	        	            char_literal85 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_varlist1314);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulevarlistEx;
            	        	            }
            	        	             
            	        	            CREATE_stream_70; stream_70->add(stream_70, char_literal85, NULL);


            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_name_in_varlist1317);
            	        	        name86=name(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevarlistEx;
            	        	        }

            	        	        CREATE_stream_name; stream_name->add(stream_name, name86.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop21;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop21: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : name
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 136:33: -> ^( VARS ( name )* )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:36: ^( VARS ( name )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        , root_1));

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:43: ( name )*
            	        {
            	        	while ( (stream_name != NULL && stream_name->hasNext(stream_name))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        	}
            	        	if (stream_name != NULL) stream_name->reset(stream_name);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulevarlistEx; /* Prevent compiler warnings */
    rulevarlistEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_name != NULL) stream_name->free(stream_name);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end varlist */

/**
 * $ANTLR start arglist
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:138:1: arglist : exprlist_for_literal -> ^( ARGS exprlist_for_literal ) ;
 */
static DonutParser_arglist_return
arglist(pDonutParser ctx)
{
    DonutParser_arglist_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_for_literal_return exprlist_for_literal87;
    #undef	RETURN_TYPE_exprlist_for_literal87
    #define	RETURN_TYPE_exprlist_for_literal87 DonutParser_exprlist_for_literal_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist_for_literal87.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:138:9: ( exprlist_for_literal -> ^( ARGS exprlist_for_literal ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:138:11: exprlist_for_literal
        {
            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_arglist1338);
            exprlist_for_literal87=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearglistEx;
            }

            CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal87.tree, NULL);

            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 138:32: -> ^( ARGS exprlist_for_literal )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:138:35: ^( ARGS exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGS, (pANTLR3_UINT8)"ARGS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end arglist */

/**
 * $ANTLR start array
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:139:1: array : '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) ;
 */
static DonutParser_array_return
array(pDonutParser ctx)
{
    DonutParser_array_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal88;
    pANTLR3_COMMON_TOKEN    char_literal90;
    pANTLR3_COMMON_TOKEN    char_literal91;
    DonutParser_exprlist_for_literal_return exprlist_for_literal89;
    #undef	RETURN_TYPE_exprlist_for_literal89
    #define	RETURN_TYPE_exprlist_for_literal89 DonutParser_exprlist_for_literal_return

    pANTLR3_BASE_TREE char_literal88_tree;
    pANTLR3_BASE_TREE char_literal90_tree;
    pANTLR3_BASE_TREE char_literal91_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_85;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal88       = NULL;
    char_literal90       = NULL;
    char_literal91       = NULL;
    exprlist_for_literal89.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal88_tree   = NULL;
    char_literal90_tree   = NULL;
    char_literal91_tree   = NULL;

    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_85   = NULL;
    #define CREATE_stream_85  if (stream_85 == NULL) {stream_85 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 85"); } 
    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:139:7: ( '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:139:9: '[' exprlist_for_literal ( ',' )? ']'
        {
            char_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(85, &FOLLOW_85_in_array1353);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
             
            CREATE_stream_85; stream_85->add(stream_85, char_literal88, NULL);


            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_array1355);
            exprlist_for_literal89=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }

            CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal89.tree, NULL);

            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:139:34: ( ',' )?
            {
                int alt23=2;
                switch ( LA(1) )
                {
                    case 70:
                    	{
                    		alt23=1;
                    	}
                        break;
                }

                switch (alt23)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:139:34: ','
            	    {
            	        char_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_array1357);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrayEx;
            	        }
            	         
            	        CREATE_stream_70; stream_70->add(stream_70, char_literal90, NULL);


            	    }
            	    break;

                }
            }

            char_literal91 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_array1360);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
             
            CREATE_stream_86; stream_86->add(stream_86, char_literal91, NULL);


            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 139:43: -> ^( ARRAY exprlist_for_literal )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:139:46: ^( ARRAY exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY, (pANTLR3_UINT8)"ARRAY")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_85 != NULL) stream_85->free(stream_85);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end array */

/**
 * $ANTLR start exprlist_for_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:1: exprlist_for_literal : ( expr ( ',' expr )* )? -> ( expr )* ;
 */
static DonutParser_exprlist_for_literal_return
exprlist_for_literal(pDonutParser ctx)
{
    DonutParser_exprlist_for_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal93;
    DonutParser_expr_return expr92;
    #undef	RETURN_TYPE_expr92
    #define	RETURN_TYPE_expr92 DonutParser_expr_return

    DonutParser_expr_return expr94;
    #undef	RETURN_TYPE_expr94
    #define	RETURN_TYPE_expr94 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal93_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal93       = NULL;
    expr92.tree = NULL;

    expr94.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal93_tree   = NULL;

    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:22: ( ( expr ( ',' expr )* )? -> ( expr )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:24: ( expr ( ',' expr )* )?
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:24: ( expr ( ',' expr )* )?
            {
                int alt25=2;
                switch ( LA(1) )
                {
                    case FLOAT_LITERAL:
                    case HEX_LITERAL:
                    case IDENT:
                    case INT_LITERAL:
                    case OCT_LITERAL:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case 57:
                    case 63:
                    case 67:
                    case 68:
                    case 71:
                    case 72:
                    case 85:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    	{
                    		alt25=1;
                    	}
                        break;
                }

                switch (alt25)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:25: expr ( ',' expr )*
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1376);
            	        expr92=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlist_for_literalEx;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, expr92.tree, NULL);

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:30: ( ',' expr )*

            	        for (;;)
            	        {
            	            int alt24=2;
            	            switch ( LA(1) )
            	            {
            	            case 70:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case FLOAT_LITERAL:
            	            		case HEX_LITERAL:
            	            		case IDENT:
            	            		case INT_LITERAL:
            	            		case OCT_LITERAL:
            	            		case STRING_DOUBLE:
            	            		case STRING_SINGLE:
            	            		case 57:
            	            		case 63:
            	            		case 67:
            	            		case 68:
            	            		case 71:
            	            		case 72:
            	            		case 85:
            	            		case 88:
            	            		case 89:
            	            		case 90:
            	            		case 91:
            	            		case 92:
            	            		case 93:
            	            		case 94:
            	            		case 95:
            	            			{
            	            				alt24=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt24)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:31: ',' expr
            	        	    {
            	        	        char_literal93 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_exprlist_for_literal1379);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_70; stream_70->add(stream_70, char_literal93, NULL);


            	        	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1381);
            	        	        expr94=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }

            	        	        CREATE_stream_expr; stream_expr->add(stream_expr, expr94.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop24;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop24: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 140:44: -> ( expr )*
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:47: ( expr )*
            	    {
            	    	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	    	{
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	    	}
            	    	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlist_for_literalEx; /* Prevent compiler warnings */
    ruleexprlist_for_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist_for_literal */

/**
 * $ANTLR start object
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:1: object : '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) ;
 */
static DonutParser_object_return
object(pDonutParser ctx)
{
    DonutParser_object_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal95;
    pANTLR3_COMMON_TOKEN    char_literal97;
    pANTLR3_COMMON_TOKEN    char_literal99;
    pANTLR3_COMMON_TOKEN    char_literal100;
    DonutParser_object_pair_return object_pair96;
    #undef	RETURN_TYPE_object_pair96
    #define	RETURN_TYPE_object_pair96 DonutParser_object_pair_return

    DonutParser_object_pair_return object_pair98;
    #undef	RETURN_TYPE_object_pair98
    #define	RETURN_TYPE_object_pair98 DonutParser_object_pair_return

    pANTLR3_BASE_TREE char_literal95_tree;
    pANTLR3_BASE_TREE char_literal97_tree;
    pANTLR3_BASE_TREE char_literal99_tree;
    pANTLR3_BASE_TREE char_literal100_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_98;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_95;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_object_pair;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal95       = NULL;
    char_literal97       = NULL;
    char_literal99       = NULL;
    char_literal100       = NULL;
    object_pair96.tree = NULL;

    object_pair98.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal95_tree   = NULL;
    char_literal97_tree   = NULL;
    char_literal99_tree   = NULL;
    char_literal100_tree   = NULL;

    stream_98   = NULL;
    #define CREATE_stream_98  if (stream_98 == NULL) {stream_98 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 98"); } 
    stream_95   = NULL;
    #define CREATE_stream_95  if (stream_95 == NULL) {stream_95 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 95"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_object_pair   = NULL;
    #define CREATE_stream_object_pair  if (stream_object_pair == NULL) {stream_object_pair = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule object_pair"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:8: ( '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:10: '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}'
        {
            char_literal95 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_object1398);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
             
            CREATE_stream_95; stream_95->add(stream_95, char_literal95, NULL);


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:14: ( object_pair ( ',' object_pair )* ( ',' )? )?
            {
                int alt28=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt28=1;
                    	}
                        break;
                }

                switch (alt28)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:15: object_pair ( ',' object_pair )* ( ',' )?
            	    {
            	        FOLLOWPUSH(FOLLOW_object_pair_in_object1401);
            	        object_pair96=object_pair(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectEx;
            	        }

            	        CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair96.tree, NULL);

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:27: ( ',' object_pair )*

            	        for (;;)
            	        {
            	            int alt26=2;
            	            switch ( LA(1) )
            	            {
            	            case 70:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case IDENT:
            	            			{
            	            				alt26=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:28: ',' object_pair
            	        	    {
            	        	        char_literal97 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_object1404);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_70; stream_70->add(stream_70, char_literal97, NULL);


            	        	        FOLLOWPUSH(FOLLOW_object_pair_in_object1406);
            	        	        object_pair98=object_pair(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }

            	        	        CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair98.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop26;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop26: ; /* Jump out to here if this rule does not match */


            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:46: ( ',' )?
            	        {
            	            int alt27=2;
            	            switch ( LA(1) )
            	            {
            	                case 70:
            	                	{
            	                		alt27=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt27)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:47: ','
            	        	    {
            	        	        char_literal99 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_object1411);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_70; stream_70->add(stream_70, char_literal99, NULL);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            char_literal100 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_object1417);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
             
            CREATE_stream_98; stream_98->add(stream_98, char_literal100, NULL);


            /* AST REWRITE
             * elements          : object_pair
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 142:59: -> ^( OBJECT ( object_pair )* )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:62: ^( OBJECT ( object_pair )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJECT, (pANTLR3_UINT8)"OBJECT")
            	        , root_1));

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:71: ( object_pair )*
            	        {
            	        	while ( (stream_object_pair != NULL && stream_object_pair->hasNext(stream_object_pair))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_object_pair == NULL ? NULL : stream_object_pair->nextTree(stream_object_pair));

            	        	}
            	        	if (stream_object_pair != NULL) stream_object_pair->reset(stream_object_pair);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobjectEx; /* Prevent compiler warnings */
    ruleobjectEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_98 != NULL) stream_98->free(stream_98);
        if (stream_95 != NULL) stream_95->free(stream_95);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_object_pair != NULL) stream_object_pair->free(stream_object_pair);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object */

/**
 * $ANTLR start object_pair
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:143:1: object_pair : name '=>' expr -> ^( PAIR name expr ) ;
 */
static DonutParser_object_pair_return
object_pair(pDonutParser ctx)
{
    DonutParser_object_pair_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal102;
    DonutParser_name_return name101;
    #undef	RETURN_TYPE_name101
    #define	RETURN_TYPE_name101 DonutParser_name_return

    DonutParser_expr_return expr103;
    #undef	RETURN_TYPE_expr103
    #define	RETURN_TYPE_expr103 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal102_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal102       = NULL;
    name101.tree = NULL;

    expr103.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal102_tree   = NULL;

    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:143:13: ( name '=>' expr -> ^( PAIR name expr ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:143:15: name '=>' expr
        {
            FOLLOWPUSH(FOLLOW_name_in_object_pair1433);
            name101=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }

            CREATE_stream_name; stream_name->add(stream_name, name101.tree, NULL);

            string_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_object_pair1435);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
             
            CREATE_stream_82; stream_82->add(stream_82, string_literal102, NULL);


            FOLLOWPUSH(FOLLOW_expr_in_object_pair1437);
            expr103=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }

            CREATE_stream_expr; stream_expr->add(stream_expr, expr103.tree, NULL);

            /* AST REWRITE
             * elements          : expr, name
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 143:30: -> ^( PAIR name expr )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:143:33: ^( PAIR name expr )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAIR, (pANTLR3_UINT8)"PAIR")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_pairEx; /* Prevent compiler warnings */
    ruleobject_pairEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object_pair */

/**
 * $ANTLR start literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:145:1: literal : ( numeric_literal | boolean_literal | string_literal | 'null' );
 */
static DonutParser_literal_return
literal(pDonutParser ctx)
{
    DonutParser_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal107;
    DonutParser_numeric_literal_return numeric_literal104;
    #undef	RETURN_TYPE_numeric_literal104
    #define	RETURN_TYPE_numeric_literal104 DonutParser_numeric_literal_return

    DonutParser_boolean_literal_return boolean_literal105;
    #undef	RETURN_TYPE_boolean_literal105
    #define	RETURN_TYPE_boolean_literal105 DonutParser_boolean_literal_return

    DonutParser_string_literal_return string_literal106;
    #undef	RETURN_TYPE_string_literal106
    #define	RETURN_TYPE_string_literal106 DonutParser_string_literal_return

    pANTLR3_BASE_TREE string_literal107_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal107       = NULL;
    numeric_literal104.tree = NULL;

    boolean_literal105.tree = NULL;

    string_literal106.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal107_tree   = NULL;


    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:146:2: ( numeric_literal | boolean_literal | string_literal | 'null' )

            ANTLR3_UINT32 alt29;

            alt29=4;

            switch ( LA(1) )
            {
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case INT_LITERAL:
            case OCT_LITERAL:
            	{
            		alt29=1;
            	}
                break;
            case 88:
            case 93:
            	{
            		alt29=2;
            	}
                break;
            case STRING_DOUBLE:
            case STRING_SINGLE:
            	{
            		alt29=3;
            	}
                break;
            case 92:
            	{
            		alt29=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;

            }

            switch (alt29)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:146:4: numeric_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_numeric_literal_in_literal1456);
        	        numeric_literal104=numeric_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, numeric_literal104.tree);

        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:147:4: boolean_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_boolean_literal_in_literal1461);
        	        boolean_literal105=boolean_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, boolean_literal105.tree);

        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:148:4: string_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_string_literal_in_literal1466);
        	        string_literal106=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal106.tree);

        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:149:4: 'null'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        string_literal107 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_literal1471);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        string_literal107_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal107));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal107_tree);


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end literal */

/**
 * $ANTLR start boolean_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:152:1: boolean_literal : ( 'true' | 'false' );
 */
static DonutParser_boolean_literal_return
boolean_literal(pDonutParser ctx)
{
    DonutParser_boolean_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set108;

    pANTLR3_BASE_TREE set108_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set108       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set108_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:153:2: ( 'true' | 'false' )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set108=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == 88 || LA(1) == 93 )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set108))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleboolean_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleboolean_literalEx; /* Prevent compiler warnings */
    ruleboolean_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end boolean_literal */

/**
 * $ANTLR start numeric_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:156:1: numeric_literal : ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL );
 */
static DonutParser_numeric_literal_return
numeric_literal(pDonutParser ctx)
{
    DonutParser_numeric_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set109;

    pANTLR3_BASE_TREE set109_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set109       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set109_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:157:2: ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set109=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == FLOAT_LITERAL || LA(1) == HEX_LITERAL || LA(1) == INT_LITERAL || LA(1) == OCT_LITERAL )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set109))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulenumeric_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenumeric_literalEx; /* Prevent compiler warnings */
    rulenumeric_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end numeric_literal */

/**
 * $ANTLR start string_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:162:1: string_literal : ( STRING_SINGLE | STRING_DOUBLE );
 */
static DonutParser_string_literal_return
string_literal(pDonutParser ctx)
{
    DonutParser_string_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set110;

    pANTLR3_BASE_TREE set110_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set110       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set110_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:162:16: ( STRING_SINGLE | STRING_DOUBLE )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set110=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == STRING_DOUBLE || LA(1) == STRING_SINGLE )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set110))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end string_literal */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
