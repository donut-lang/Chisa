/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g
 *     -                            On : 2012-11-11 23:36:37
 *     -                for the parser : DonutParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "DonutParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pDonutParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pDonutParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pDonutParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pDonutParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   DonutParserTokenNames[89+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "APPLY",
        (pANTLR3_UINT8) "ARGS",
        (pANTLR3_UINT8) "ARRAY",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "ASSIGN_OP",
        (pANTLR3_UINT8) "CEQ",
        (pANTLR3_UINT8) "CGE",
        (pANTLR3_UINT8) "CGT",
        (pANTLR3_UINT8) "CLE",
        (pANTLR3_UINT8) "CLOS",
        (pANTLR3_UINT8) "CLT",
        (pANTLR3_UINT8) "CNE",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "CONT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT_LITERAL",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "IDX",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "INT_LITERAL",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "MUL",
        (pANTLR3_UINT8) "NONZERO_DIGIT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "OBJECT",
        (pANTLR3_UINT8) "OCT_DIGIT",
        (pANTLR3_UINT8) "OCT_LITERAL",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "PAIR",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "POST_OP",
        (pANTLR3_UINT8) "PRE_OP",
        (pANTLR3_UINT8) "SCOPE",
        (pANTLR3_UINT8) "STRING_DOUBLE",
        (pANTLR3_UINT8) "STRING_DOUBLE_ELEMENT",
        (pANTLR3_UINT8) "STRING_SINGLE",
        (pANTLR3_UINT8) "STRING_SINGLE_ELEMENT",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "VARS",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'=>'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'func'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 DonutParser_source_return
	source    (pDonutParser ctx);
static 
 DonutParser_program_return
	program    (pDonutParser ctx);
static 
 DonutParser_exprlist_return
	exprlist    (pDonutParser ctx);
static 
 DonutParser_expr_return
	expr    (pDonutParser ctx);
static 
 DonutParser_expr6_return
	expr6    (pDonutParser ctx);
static 
 DonutParser_expr5_return
	expr5    (pDonutParser ctx);
static 
 DonutParser_expr4_return
	expr4    (pDonutParser ctx);
static 
 DonutParser_expr3_return
	expr3    (pDonutParser ctx);
static 
 DonutParser_expr2_return
	expr2    (pDonutParser ctx);
static 
 DonutParser_expr1_return
	expr1    (pDonutParser ctx);
static 
 DonutParser_term_return
	term    (pDonutParser ctx);
static 
 DonutParser_postfix_return
	postfix    (pDonutParser ctx);
static 
 DonutParser_primary_return
	primary    (pDonutParser ctx);
static 
 DonutParser_name_return
	name    (pDonutParser ctx);
static 
 DonutParser_varlist_return
	varlist    (pDonutParser ctx);
static 
 DonutParser_arglist_return
	arglist    (pDonutParser ctx);
static 
 DonutParser_array_return
	array    (pDonutParser ctx);
static 
 DonutParser_exprlist_for_literal_return
	exprlist_for_literal    (pDonutParser ctx);
static 
 DonutParser_object_return
	object    (pDonutParser ctx);
static 
 DonutParser_object_pair_return
	object_pair    (pDonutParser ctx);
static 
 DonutParser_literal_return
	literal    (pDonutParser ctx);
static 
 DonutParser_boolean_literal_return
	boolean_literal    (pDonutParser ctx);
static 
 DonutParser_numeric_literal_return
	numeric_literal    (pDonutParser ctx);
static 
 DonutParser_string_literal_return
	string_literal    (pDonutParser ctx);
static void	DonutParserFree(pDonutParser ctx);
static void     DonutParserReset (pDonutParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return DonutParserNewSSD(instream, NULL);
}

/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pDonutParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pDonutParser) ANTLR3_CALLOC(1, sizeof(DonutParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in DonutParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our DonutParser interface
     */
    ctx->source	= source;
    ctx->program	= program;
    ctx->exprlist	= exprlist;
    ctx->expr	= expr;
    ctx->expr6	= expr6;
    ctx->expr5	= expr5;
    ctx->expr4	= expr4;
    ctx->expr3	= expr3;
    ctx->expr2	= expr2;
    ctx->expr1	= expr1;
    ctx->term	= term;
    ctx->postfix	= postfix;
    ctx->primary	= primary;
    ctx->name	= name;
    ctx->varlist	= varlist;
    ctx->arglist	= arglist;
    ctx->array	= array;
    ctx->exprlist_for_literal	= exprlist_for_literal;
    ctx->object	= object;
    ctx->object_pair	= object_pair;
    ctx->literal	= literal;
    ctx->boolean_literal	= boolean_literal;
    ctx->numeric_literal	= numeric_literal;
    ctx->string_literal	= string_literal;
    ctx->free			= DonutParserFree;
    ctx->reset			= DonutParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */
ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);

ctx->vectors	= antlr3VectorFactoryNew(0);
    /* Install the token table
     */
    PSRSTATE->tokenNames   = DonutParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
DonutParserReset (pDonutParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 DonutParserFree(pDonutParser ctx)
 {
    /* Free any scope memory
     */

ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return DonutParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_program_in_source186  */
static	ANTLR3_BITWORD FOLLOW_program_in_source186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_program_in_source186	= { FOLLOW_program_in_source186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_source188  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_source188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_source188	= { FOLLOW_EOF_in_source188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_program200  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_program200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_program200	= { FOLLOW_exprlist_in_program200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist218  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist218	= { FOLLOW_expr_in_exprlist218_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_exprlist222  */
static	ANTLR3_BITWORD FOLLOW_74_in_exprlist222_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40433) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_exprlist222	= { FOLLOW_74_in_exprlist222_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist226  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist226	= { FOLLOW_expr_in_exprlist226_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_exprlist231  */
static	ANTLR3_BITWORD FOLLOW_74_in_exprlist231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_exprlist231	= { FOLLOW_74_in_exprlist231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_expr251  */
static	ANTLR3_BITWORD FOLLOW_87_in_expr251_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_expr251	= { FOLLOW_87_in_expr251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_expr253  */
static	ANTLR3_BITWORD FOLLOW_60_in_expr253_bits[]	= { ANTLR3_UINT64_LIT(0x2000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_expr253	= { FOLLOW_60_in_expr253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_varlist_in_expr255  */
static	ANTLR3_BITWORD FOLLOW_varlist_in_expr255_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_varlist_in_expr255	= { FOLLOW_varlist_in_expr255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_expr257  */
static	ANTLR3_BITWORD FOLLOW_61_in_expr257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_expr257	= { FOLLOW_61_in_expr257_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_expr259  */
static	ANTLR3_BITWORD FOLLOW_90_in_expr259_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_expr259	= { FOLLOW_90_in_expr259_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr261  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr261	= { FOLLOW_exprlist_in_expr261_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_expr263  */
static	ANTLR3_BITWORD FOLLOW_92_in_expr263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_expr263	= { FOLLOW_92_in_expr263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_expr278  */
static	ANTLR3_BITWORD FOLLOW_88_in_expr278_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_expr278	= { FOLLOW_88_in_expr278_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_expr280  */
static	ANTLR3_BITWORD FOLLOW_60_in_expr280_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_expr280	= { FOLLOW_60_in_expr280_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr282  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr282_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr282	= { FOLLOW_expr_in_expr282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_expr284  */
static	ANTLR3_BITWORD FOLLOW_61_in_expr284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_expr284	= { FOLLOW_61_in_expr284_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_expr286  */
static	ANTLR3_BITWORD FOLLOW_90_in_expr286_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_expr286	= { FOLLOW_90_in_expr286_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr290  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr290	= { FOLLOW_exprlist_in_expr290_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_expr292  */
static	ANTLR3_BITWORD FOLLOW_92_in_expr292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_expr292	= { FOLLOW_92_in_expr292_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_expr294  */
static	ANTLR3_BITWORD FOLLOW_84_in_expr294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_expr294	= { FOLLOW_84_in_expr294_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_expr296  */
static	ANTLR3_BITWORD FOLLOW_90_in_expr296_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_expr296	= { FOLLOW_90_in_expr296_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr300  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr300	= { FOLLOW_exprlist_in_expr300_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_expr302  */
static	ANTLR3_BITWORD FOLLOW_92_in_expr302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_expr302	= { FOLLOW_92_in_expr302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_expr321  */
static	ANTLR3_BITWORD FOLLOW_86_in_expr321_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_expr321	= { FOLLOW_86_in_expr321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_expr323  */
static	ANTLR3_BITWORD FOLLOW_60_in_expr323_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40433) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_expr323	= { FOLLOW_60_in_expr323_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr327  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr327	= { FOLLOW_expr_in_expr327_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_expr330  */
static	ANTLR3_BITWORD FOLLOW_74_in_expr330_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40433) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_expr330	= { FOLLOW_74_in_expr330_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr334  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr334	= { FOLLOW_expr_in_expr334_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_expr337  */
static	ANTLR3_BITWORD FOLLOW_74_in_expr337_bits[]	= { ANTLR3_UINT64_LIT(0x3085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_expr337	= { FOLLOW_74_in_expr337_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr341  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr341_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr341	= { FOLLOW_expr_in_expr341_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_expr344  */
static	ANTLR3_BITWORD FOLLOW_61_in_expr344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_expr344	= { FOLLOW_61_in_expr344_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_expr346  */
static	ANTLR3_BITWORD FOLLOW_90_in_expr346_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_expr346	= { FOLLOW_90_in_expr346_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_expr350  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_expr350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_expr350	= { FOLLOW_exprlist_in_expr350_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_expr352  */
static	ANTLR3_BITWORD FOLLOW_92_in_expr352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_expr352	= { FOLLOW_92_in_expr352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr375  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr375	= { FOLLOW_expr6_in_expr375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6386  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6386_bits[]	= { ANTLR3_UINT64_LIT(0x8400000000000002), ANTLR3_UINT64_LIT(0x0000000000002244) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6386	= { FOLLOW_expr5_in_expr6386_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_expr6395  */
static	ANTLR3_BITWORD FOLLOW_77_in_expr6395_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_expr6395	= { FOLLOW_77_in_expr6395_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr6400  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr6400_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr6400	= { FOLLOW_expr_in_expr6400_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_expr6417  */
static	ANTLR3_BITWORD FOLLOW_66_in_expr6417_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_expr6417	= { FOLLOW_66_in_expr6417_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr6421  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr6421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr6421	= { FOLLOW_expr_in_expr6421_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_expr6440  */
static	ANTLR3_BITWORD FOLLOW_70_in_expr6440_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_expr6440	= { FOLLOW_70_in_expr6440_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr6444  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr6444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr6444	= { FOLLOW_expr_in_expr6444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_expr6463  */
static	ANTLR3_BITWORD FOLLOW_63_in_expr6463_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_expr6463	= { FOLLOW_63_in_expr6463_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr6467  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr6467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr6467	= { FOLLOW_expr_in_expr6467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_73_in_expr6486  */
static	ANTLR3_BITWORD FOLLOW_73_in_expr6486_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_73_in_expr6486	= { FOLLOW_73_in_expr6486_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr6490  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr6490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr6490	= { FOLLOW_expr_in_expr6490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_expr6509  */
static	ANTLR3_BITWORD FOLLOW_58_in_expr6509_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_expr6509	= { FOLLOW_58_in_expr6509_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr6513  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr6513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr6513	= { FOLLOW_expr_in_expr6513_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5543  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5543	= { FOLLOW_expr4_in_expr5543_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_expr5550  */
static	ANTLR3_BITWORD FOLLOW_91_in_expr5550_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_expr5550	= { FOLLOW_91_in_expr5550_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5554  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5554	= { FOLLOW_expr4_in_expr5554_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4578  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4578_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4578	= { FOLLOW_expr3_in_expr4578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_expr4585  */
static	ANTLR3_BITWORD FOLLOW_59_in_expr4585_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_expr4585	= { FOLLOW_59_in_expr4585_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4589  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4589_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4589	= { FOLLOW_expr3_in_expr4589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3614  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3614_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002), ANTLR3_UINT64_LIT(0x0000000000035800) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3614	= { FOLLOW_expr2_in_expr3614_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_75_in_expr3624  */
static	ANTLR3_BITWORD FOLLOW_75_in_expr3624_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_75_in_expr3624	= { FOLLOW_75_in_expr3624_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3628  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3628_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002), ANTLR3_UINT64_LIT(0x0000000000035800) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3628	= { FOLLOW_expr2_in_expr3628_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_80_in_expr3645  */
static	ANTLR3_BITWORD FOLLOW_80_in_expr3645_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_80_in_expr3645	= { FOLLOW_80_in_expr3645_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3649  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3649_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002), ANTLR3_UINT64_LIT(0x0000000000035800) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3649	= { FOLLOW_expr2_in_expr3649_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_expr3666  */
static	ANTLR3_BITWORD FOLLOW_78_in_expr3666_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_expr3666	= { FOLLOW_78_in_expr3666_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3670  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3670_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002), ANTLR3_UINT64_LIT(0x0000000000035800) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3670	= { FOLLOW_expr2_in_expr3670_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_56_in_expr3687  */
static	ANTLR3_BITWORD FOLLOW_56_in_expr3687_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_56_in_expr3687	= { FOLLOW_56_in_expr3687_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3691  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3691_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002), ANTLR3_UINT64_LIT(0x0000000000035800) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3691	= { FOLLOW_expr2_in_expr3691_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_expr3708  */
static	ANTLR3_BITWORD FOLLOW_76_in_expr3708_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_expr3708	= { FOLLOW_76_in_expr3708_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3712  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3712_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002), ANTLR3_UINT64_LIT(0x0000000000035800) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3712	= { FOLLOW_expr2_in_expr3712_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_81_in_expr3729  */
static	ANTLR3_BITWORD FOLLOW_81_in_expr3729_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_81_in_expr3729	= { FOLLOW_81_in_expr3729_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3733  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3733_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000002), ANTLR3_UINT64_LIT(0x0000000000035800) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3733	= { FOLLOW_expr2_in_expr3733_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2760  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000011) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2760	= { FOLLOW_expr1_in_expr2760_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_expr2769  */
static	ANTLR3_BITWORD FOLLOW_64_in_expr2769_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_expr2769	= { FOLLOW_64_in_expr2769_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2773  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000011) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2773	= { FOLLOW_expr1_in_expr2773_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_expr2790  */
static	ANTLR3_BITWORD FOLLOW_68_in_expr2790_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_expr2790	= { FOLLOW_68_in_expr2790_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2794  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000011) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2794	= { FOLLOW_expr1_in_expr2794_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1822  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1822_bits[]	= { ANTLR3_UINT64_LIT(0x4200000000000002), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1822	= { FOLLOW_term_in_expr1822_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_expr1831  */
static	ANTLR3_BITWORD FOLLOW_62_in_expr1831_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_expr1831	= { FOLLOW_62_in_expr1831_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1835  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1835_bits[]	= { ANTLR3_UINT64_LIT(0x4200000000000002), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1835	= { FOLLOW_term_in_expr1835_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_72_in_expr1852  */
static	ANTLR3_BITWORD FOLLOW_72_in_expr1852_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_72_in_expr1852	= { FOLLOW_72_in_expr1852_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1856  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1856_bits[]	= { ANTLR3_UINT64_LIT(0x4200000000000002), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1856	= { FOLLOW_term_in_expr1856_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_expr1873  */
static	ANTLR3_BITWORD FOLLOW_57_in_expr1873_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_expr1873	= { FOLLOW_57_in_expr1873_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1877  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1877_bits[]	= { ANTLR3_UINT64_LIT(0x4200000000000002), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1877	= { FOLLOW_term_in_expr1877_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_term902  */
static	ANTLR3_BITWORD FOLLOW_65_in_term902_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_term902	= { FOLLOW_65_in_term902_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term904  */
static	ANTLR3_BITWORD FOLLOW_term_in_term904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term904	= { FOLLOW_term_in_term904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_term919  */
static	ANTLR3_BITWORD FOLLOW_69_in_term919_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_term919	= { FOLLOW_69_in_term919_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term921  */
static	ANTLR3_BITWORD FOLLOW_term_in_term921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term921	= { FOLLOW_term_in_term921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_term936  */
static	ANTLR3_BITWORD FOLLOW_64_in_term936_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_term936	= { FOLLOW_64_in_term936_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term938  */
static	ANTLR3_BITWORD FOLLOW_term_in_term938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term938	= { FOLLOW_term_in_term938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_term951  */
static	ANTLR3_BITWORD FOLLOW_68_in_term951_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_term951	= { FOLLOW_68_in_term951_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term953  */
static	ANTLR3_BITWORD FOLLOW_term_in_term953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term953	= { FOLLOW_term_in_term953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_55_in_term966  */
static	ANTLR3_BITWORD FOLLOW_55_in_term966_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000006240033) };
static  ANTLR3_BITSET_LIST FOLLOW_55_in_term966	= { FOLLOW_55_in_term966_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term968  */
static	ANTLR3_BITWORD FOLLOW_term_in_term968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term968	= { FOLLOW_term_in_term968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_in_term981  */
static	ANTLR3_BITWORD FOLLOW_postfix_in_term981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_in_term981	= { FOLLOW_postfix_in_term981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_postfix994  */
static	ANTLR3_BITWORD FOLLOW_primary_in_postfix994_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002), ANTLR3_UINT64_LIT(0x00000000000400A2) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_postfix994	= { FOLLOW_primary_in_postfix994_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_postfix1003  */
static	ANTLR3_BITWORD FOLLOW_65_in_postfix1003_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002), ANTLR3_UINT64_LIT(0x00000000000400A2) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_postfix1003	= { FOLLOW_65_in_postfix1003_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_postfix1019  */
static	ANTLR3_BITWORD FOLLOW_69_in_postfix1019_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002), ANTLR3_UINT64_LIT(0x00000000000400A2) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_postfix1019	= { FOLLOW_69_in_postfix1019_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_postfix1035  */
static	ANTLR3_BITWORD FOLLOW_71_in_postfix1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_postfix1035	= { FOLLOW_71_in_postfix1035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_postfix1039  */
static	ANTLR3_BITWORD FOLLOW_name_in_postfix1039_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002), ANTLR3_UINT64_LIT(0x00000000000400A2) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_postfix1039	= { FOLLOW_name_in_postfix1039_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_postfix1056  */
static	ANTLR3_BITWORD FOLLOW_82_in_postfix1056_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_postfix1056	= { FOLLOW_82_in_postfix1056_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_postfix1060  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_postfix1060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_postfix1060	= { FOLLOW_arglist_in_postfix1060_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_postfix1062  */
static	ANTLR3_BITWORD FOLLOW_83_in_postfix1062_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002), ANTLR3_UINT64_LIT(0x00000000000400A2) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_postfix1062	= { FOLLOW_83_in_postfix1062_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_postfix1079  */
static	ANTLR3_BITWORD FOLLOW_60_in_postfix1079_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_postfix1079	= { FOLLOW_60_in_postfix1079_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_postfix1083  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_postfix1083_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_postfix1083	= { FOLLOW_arglist_in_postfix1083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_postfix1085  */
static	ANTLR3_BITWORD FOLLOW_61_in_postfix1085_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002), ANTLR3_UINT64_LIT(0x00000000000400A2) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_postfix1085	= { FOLLOW_61_in_postfix1085_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primary1111  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primary1111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primary1111	= { FOLLOW_literal_in_primary1111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_primary1116  */
static	ANTLR3_BITWORD FOLLOW_array_in_primary1116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_primary1116	= { FOLLOW_array_in_primary1116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_primary1121  */
static	ANTLR3_BITWORD FOLLOW_name_in_primary1121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_primary1121	= { FOLLOW_name_in_primary1121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_60_in_primary1136  */
static	ANTLR3_BITWORD FOLLOW_60_in_primary1136_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_60_in_primary1136	= { FOLLOW_60_in_primary1136_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_primary1138  */
static	ANTLR3_BITWORD FOLLOW_expr_in_primary1138_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_primary1138	= { FOLLOW_expr_in_primary1138_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_61_in_primary1140  */
static	ANTLR3_BITWORD FOLLOW_61_in_primary1140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_61_in_primary1140	= { FOLLOW_61_in_primary1140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_in_primary1149  */
static	ANTLR3_BITWORD FOLLOW_object_in_primary1149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_in_primary1149	= { FOLLOW_object_in_primary1149_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_name1160  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_name1160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_name1160	= { FOLLOW_IDENT_in_name1160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1169  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1169	= { FOLLOW_name_in_varlist1169_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_varlist1173  */
static	ANTLR3_BITWORD FOLLOW_67_in_varlist1173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_varlist1173	= { FOLLOW_67_in_varlist1173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1176  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1176	= { FOLLOW_name_in_varlist1176_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_arglist1197  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_arglist1197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_arglist1197	= { FOLLOW_exprlist_for_literal_in_arglist1197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_array1212  */
static	ANTLR3_BITWORD FOLLOW_82_in_array1212_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007EC003B) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_array1212	= { FOLLOW_82_in_array1212_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_array1214  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_array1214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000080008) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_array1214	= { FOLLOW_exprlist_for_literal_in_array1214_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_array1216  */
static	ANTLR3_BITWORD FOLLOW_67_in_array1216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_array1216	= { FOLLOW_67_in_array1216_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_array1219  */
static	ANTLR3_BITWORD FOLLOW_83_in_array1219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_array1219	= { FOLLOW_83_in_array1219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1235  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1235	= { FOLLOW_expr_in_exprlist_for_literal1235_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_exprlist_for_literal1238  */
static	ANTLR3_BITWORD FOLLOW_67_in_exprlist_for_literal1238_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_exprlist_for_literal1238	= { FOLLOW_67_in_exprlist_for_literal1238_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1240  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1240	= { FOLLOW_expr_in_exprlist_for_literal1240_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_object1257  */
static	ANTLR3_BITWORD FOLLOW_90_in_object1257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_object1257	= { FOLLOW_90_in_object1257_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1260  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1260	= { FOLLOW_object_pair_in_object1260_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_object1263  */
static	ANTLR3_BITWORD FOLLOW_67_in_object1263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_object1263	= { FOLLOW_67_in_object1263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1265  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000008) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1265	= { FOLLOW_object_pair_in_object1265_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_object1270  */
static	ANTLR3_BITWORD FOLLOW_67_in_object1270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_object1270	= { FOLLOW_67_in_object1270_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_object1276  */
static	ANTLR3_BITWORD FOLLOW_92_in_object1276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_object1276	= { FOLLOW_92_in_object1276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_object_pair1292  */
static	ANTLR3_BITWORD FOLLOW_name_in_object_pair1292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_object_pair1292	= { FOLLOW_name_in_object_pair1292_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_79_in_object_pair1294  */
static	ANTLR3_BITWORD FOLLOW_79_in_object_pair1294_bits[]	= { ANTLR3_UINT64_LIT(0x1085020132000000), ANTLR3_UINT64_LIT(0x0000000007E40033) };
static  ANTLR3_BITSET_LIST FOLLOW_79_in_object_pair1294	= { FOLLOW_79_in_object_pair1294_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_object_pair1296  */
static	ANTLR3_BITWORD FOLLOW_expr_in_object_pair1296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_object_pair1296	= { FOLLOW_expr_in_object_pair1296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numeric_literal_in_literal1315  */
static	ANTLR3_BITWORD FOLLOW_numeric_literal_in_literal1315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numeric_literal_in_literal1315	= { FOLLOW_numeric_literal_in_literal1315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_literal_in_literal1320  */
static	ANTLR3_BITWORD FOLLOW_boolean_literal_in_literal1320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_literal_in_literal1320	= { FOLLOW_boolean_literal_in_literal1320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_literal1325  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_literal1325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_literal1325	= { FOLLOW_string_literal_in_literal1325_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start source
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:57:1: source : program EOF -> program ;
 */
static DonutParser_source_return
source(pDonutParser ctx)
{
    DonutParser_source_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EOF2;
    DonutParser_program_return program1;
    #undef	RETURN_TYPE_program1
    #define	RETURN_TYPE_program1 DonutParser_program_return

    pANTLR3_BASE_TREE EOF2_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_program;
    /* Initialize rule variables
     */

    root_0 = NULL;

    EOF2       = NULL;
    program1.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    EOF2_tree   = NULL;

    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_program   = NULL;
    #define CREATE_stream_program  if (stream_program == NULL) {stream_program = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule program"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:57:8: ( program EOF -> program )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:57:10: program EOF
        {
            FOLLOWPUSH(FOLLOW_program_in_source186);
            program1=program(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }

            CREATE_stream_program; stream_program->add(stream_program, program1.tree, NULL);

            EOF2 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_source188);
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
             
            CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF2, NULL);


            /* AST REWRITE
             * elements          : program
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 57:22: -> program
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_program == NULL ? NULL : stream_program->nextTree(stream_program));

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulesourceEx; /* Prevent compiler warnings */
    rulesourceEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_program != NULL) stream_program->free(stream_program);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end source */

/**
 * $ANTLR start program
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:59:1: program : exprlist -> ^( CLOS VARS exprlist ) ;
 */
static DonutParser_program_return
program(pDonutParser ctx)
{
    DonutParser_program_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_return exprlist3;
    #undef	RETURN_TYPE_exprlist3
    #define	RETURN_TYPE_exprlist3 DonutParser_exprlist_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist3.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:59:9: ( exprlist -> ^( CLOS VARS exprlist ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:59:11: exprlist
        {
            FOLLOWPUSH(FOLLOW_exprlist_in_program200);
            exprlist3=exprlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }

            CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist3.tree, NULL);

            /* AST REWRITE
             * elements          : exprlist
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 59:20: -> ^( CLOS VARS exprlist )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:59:23: ^( CLOS VARS exprlist )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end program */

/**
 * $ANTLR start exprlist
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:1: exprlist : expr ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) ;
 */
static DonutParser_exprlist_return
exprlist(pDonutParser ctx)
{
    DonutParser_exprlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal5;
    pANTLR3_COMMON_TOKEN    char_literal7;
    DonutParser_expr_return expr4;
    #undef	RETURN_TYPE_expr4
    #define	RETURN_TYPE_expr4 DonutParser_expr_return

    DonutParser_expr_return expr6;
    #undef	RETURN_TYPE_expr6
    #define	RETURN_TYPE_expr6 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal5_tree;
    pANTLR3_BASE_TREE char_literal7_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_74;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal5       = NULL;
    char_literal7       = NULL;
    expr4.tree = NULL;

    expr6.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal5_tree   = NULL;
    char_literal7_tree   = NULL;

    stream_74   = NULL;
    #define CREATE_stream_74  if (stream_74 == NULL) {stream_74 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 74"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:10: ( expr ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:12: expr ( ( ';' )+ expr )* ( ';' )?
        {
            FOLLOWPUSH(FOLLOW_expr_in_exprlist218);
            expr4=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexprlistEx;
            }

            CREATE_stream_expr; stream_expr->add(stream_expr, expr4.tree, NULL);

            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:17: ( ( ';' )+ expr )*

            for (;;)
            {
                int alt2=2;
                switch ( LA(1) )
                {
                case 74:
                	{
                		switch ( LA(2) )
                		{
                		case FLOAT_LITERAL:
                		case HEX_LITERAL:
                		case IDENT:
                		case INT_LITERAL:
                		case OCT_LITERAL:
                		case STRING_DOUBLE:
                		case STRING_SINGLE:
                		case 55:
                		case 60:
                		case 64:
                		case 65:
                		case 68:
                		case 69:
                		case 74:
                		case 82:
                		case 85:
                		case 86:
                		case 87:
                		case 88:
                		case 89:
                		case 90:
                			{
                				alt2=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:18: ( ';' )+ expr
            	    {
            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:18: ( ';' )+
            	        {
            	            int cnt1=0;

            	            for (;;)
            	            {
            	                int alt1=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case 74:
            	        		{
            	        			alt1=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt1)
            	        	{
            	        	    case 1:
            	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:19: ';'
            	        	        {
            	        	            char_literal5 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_exprlist222);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleexprlistEx;
            	        	            }
            	        	             
            	        	            CREATE_stream_74; stream_74->add(stream_74, char_literal5, NULL);


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt1 >= 1 )
            	        		{
            	        		    goto loop1;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleexprlistEx;
            	        	}
            	        	cnt1++;
            	            }
            	            loop1: ;	/* Jump to here if this rule does not match */
            	        }

            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist226);
            	        expr6=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, expr6.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:32: ( ';' )?
            {
                int alt3=2;
                switch ( LA(1) )
                {
                    case 74:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:33: ';'
            	    {
            	        char_literal7 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_exprlist231);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	         
            	        CREATE_stream_74; stream_74->add(stream_74, char_literal7, NULL);


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 61:39: -> ^( CONT ( expr )* )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:42: ^( CONT ( expr )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
            	        , root_1));

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:61:49: ( expr )*
            	        {
            	        	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	}
            	        	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlistEx; /* Prevent compiler warnings */
    ruleexprlistEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_74 != NULL) stream_74->free(stream_74);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist */

/**
 * $ANTLR start expr
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:63:1: expr : ( 'func' '(' varlist ')' '{' exprlist '}' -> ^( CLOS varlist exprlist ) | 'if' '(' expr ')' '{' a= exprlist '}' 'else' '{' b= exprlist '}' -> ^( IF expr $a $b) | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' '{' fd= exprlist '}' -> ^( FOR $fa $fb $fc $fd) | expr6 );
 */
static DonutParser_expr_return
expr(pDonutParser ctx)
{
    DonutParser_expr_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal8;
    pANTLR3_COMMON_TOKEN    char_literal9;
    pANTLR3_COMMON_TOKEN    char_literal11;
    pANTLR3_COMMON_TOKEN    char_literal12;
    pANTLR3_COMMON_TOKEN    char_literal14;
    pANTLR3_COMMON_TOKEN    string_literal15;
    pANTLR3_COMMON_TOKEN    char_literal16;
    pANTLR3_COMMON_TOKEN    char_literal18;
    pANTLR3_COMMON_TOKEN    char_literal19;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    string_literal21;
    pANTLR3_COMMON_TOKEN    char_literal22;
    pANTLR3_COMMON_TOKEN    char_literal23;
    pANTLR3_COMMON_TOKEN    string_literal24;
    pANTLR3_COMMON_TOKEN    char_literal25;
    pANTLR3_COMMON_TOKEN    char_literal26;
    pANTLR3_COMMON_TOKEN    char_literal27;
    pANTLR3_COMMON_TOKEN    char_literal28;
    pANTLR3_COMMON_TOKEN    char_literal29;
    pANTLR3_COMMON_TOKEN    char_literal30;
    DonutParser_exprlist_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_exprlist_return

    DonutParser_exprlist_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_exprlist_return

    DonutParser_expr_return fa;
    #undef	RETURN_TYPE_fa
    #define	RETURN_TYPE_fa DonutParser_expr_return

    DonutParser_expr_return fb;
    #undef	RETURN_TYPE_fb
    #define	RETURN_TYPE_fb DonutParser_expr_return

    DonutParser_expr_return fc;
    #undef	RETURN_TYPE_fc
    #define	RETURN_TYPE_fc DonutParser_expr_return

    DonutParser_exprlist_return fd;
    #undef	RETURN_TYPE_fd
    #define	RETURN_TYPE_fd DonutParser_exprlist_return

    DonutParser_varlist_return varlist10;
    #undef	RETURN_TYPE_varlist10
    #define	RETURN_TYPE_varlist10 DonutParser_varlist_return

    DonutParser_exprlist_return exprlist13;
    #undef	RETURN_TYPE_exprlist13
    #define	RETURN_TYPE_exprlist13 DonutParser_exprlist_return

    DonutParser_expr_return expr17;
    #undef	RETURN_TYPE_expr17
    #define	RETURN_TYPE_expr17 DonutParser_expr_return

    DonutParser_expr6_return expr631;
    #undef	RETURN_TYPE_expr631
    #define	RETURN_TYPE_expr631 DonutParser_expr6_return

    pANTLR3_BASE_TREE string_literal8_tree;
    pANTLR3_BASE_TREE char_literal9_tree;
    pANTLR3_BASE_TREE char_literal11_tree;
    pANTLR3_BASE_TREE char_literal12_tree;
    pANTLR3_BASE_TREE char_literal14_tree;
    pANTLR3_BASE_TREE string_literal15_tree;
    pANTLR3_BASE_TREE char_literal16_tree;
    pANTLR3_BASE_TREE char_literal18_tree;
    pANTLR3_BASE_TREE char_literal19_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE string_literal21_tree;
    pANTLR3_BASE_TREE char_literal22_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_BASE_TREE string_literal24_tree;
    pANTLR3_BASE_TREE char_literal25_tree;
    pANTLR3_BASE_TREE char_literal26_tree;
    pANTLR3_BASE_TREE char_literal27_tree;
    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_92;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_60;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_74;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_88;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_84;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_varlist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal8       = NULL;
    char_literal9       = NULL;
    char_literal11       = NULL;
    char_literal12       = NULL;
    char_literal14       = NULL;
    string_literal15       = NULL;
    char_literal16       = NULL;
    char_literal18       = NULL;
    char_literal19       = NULL;
    char_literal20       = NULL;
    string_literal21       = NULL;
    char_literal22       = NULL;
    char_literal23       = NULL;
    string_literal24       = NULL;
    char_literal25       = NULL;
    char_literal26       = NULL;
    char_literal27       = NULL;
    char_literal28       = NULL;
    char_literal29       = NULL;
    char_literal30       = NULL;
    a.tree = NULL;

    b.tree = NULL;

    fa.tree = NULL;

    fb.tree = NULL;

    fc.tree = NULL;

    fd.tree = NULL;

    varlist10.tree = NULL;

    exprlist13.tree = NULL;

    expr17.tree = NULL;

    expr631.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal8_tree   = NULL;
    char_literal9_tree   = NULL;
    char_literal11_tree   = NULL;
    char_literal12_tree   = NULL;
    char_literal14_tree   = NULL;
    string_literal15_tree   = NULL;
    char_literal16_tree   = NULL;
    char_literal18_tree   = NULL;
    char_literal19_tree   = NULL;
    char_literal20_tree   = NULL;
    string_literal21_tree   = NULL;
    char_literal22_tree   = NULL;
    char_literal23_tree   = NULL;
    string_literal24_tree   = NULL;
    char_literal25_tree   = NULL;
    char_literal26_tree   = NULL;
    char_literal27_tree   = NULL;
    char_literal28_tree   = NULL;
    char_literal29_tree   = NULL;
    char_literal30_tree   = NULL;

    stream_92   = NULL;
    #define CREATE_stream_92  if (stream_92 == NULL) {stream_92 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 92"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_60   = NULL;
    #define CREATE_stream_60  if (stream_60 == NULL) {stream_60 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 60"); } 
    stream_74   = NULL;
    #define CREATE_stream_74  if (stream_74 == NULL) {stream_74 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 74"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_88   = NULL;
    #define CREATE_stream_88  if (stream_88 == NULL) {stream_88 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 88"); } 
    stream_84   = NULL;
    #define CREATE_stream_84  if (stream_84 == NULL) {stream_84 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 84"); } 
    stream_varlist   = NULL;
    #define CREATE_stream_varlist  if (stream_varlist == NULL) {stream_varlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule varlist"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:2: ( 'func' '(' varlist ')' '{' exprlist '}' -> ^( CLOS varlist exprlist ) | 'if' '(' expr ')' '{' a= exprlist '}' 'else' '{' b= exprlist '}' -> ^( IF expr $a $b) | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' '{' fd= exprlist '}' -> ^( FOR $fa $fb $fc $fd) | expr6 )

            ANTLR3_UINT32 alt7;

            alt7=4;

            switch ( LA(1) )
            {
            case 87:
            	{
            		alt7=1;
            	}
                break;
            case 88:
            	{
            		alt7=2;
            	}
                break;
            case 86:
            	{
            		alt7=3;
            	}
                break;
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 55:
            case 60:
            case 64:
            case 65:
            case 68:
            case 69:
            case 82:
            case 85:
            case 89:
            case 90:
            	{
            		alt7=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 7;
                EXCEPTION->state        = 0;


                goto ruleexprEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:4: 'func' '(' varlist ')' '{' exprlist '}'
        	    {
        	        string_literal8 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_expr251);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_87; stream_87->add(stream_87, string_literal8, NULL);


        	        char_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_expr253);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_60; stream_60->add(stream_60, char_literal9, NULL);


        	        FOLLOWPUSH(FOLLOW_varlist_in_expr255);
        	        varlist10=varlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_varlist; stream_varlist->add(stream_varlist, varlist10.tree, NULL);

        	        char_literal11 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_expr257);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_61; stream_61->add(stream_61, char_literal11, NULL);


        	        char_literal12 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_expr259);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_90; stream_90->add(stream_90, char_literal12, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr261);
        	        exprlist13=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist13.tree, NULL);

        	        char_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_expr263);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_92; stream_92->add(stream_92, char_literal14, NULL);


        	        /* AST REWRITE
        	         * elements          : exprlist, varlist
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 64:44: -> ^( CLOS varlist exprlist )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:64:47: ^( CLOS varlist exprlist )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_varlist == NULL ? NULL : stream_varlist->nextTree(stream_varlist));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:65:4: 'if' '(' expr ')' '{' a= exprlist '}' 'else' '{' b= exprlist '}'
        	    {
        	        string_literal15 = (pANTLR3_COMMON_TOKEN) MATCHT(88, &FOLLOW_88_in_expr278);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_88; stream_88->add(stream_88, string_literal15, NULL);


        	        char_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_expr280);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_60; stream_60->add(stream_60, char_literal16, NULL);


        	        FOLLOWPUSH(FOLLOW_expr_in_expr282);
        	        expr17=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_expr; stream_expr->add(stream_expr, expr17.tree, NULL);

        	        char_literal18 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_expr284);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_61; stream_61->add(stream_61, char_literal18, NULL);


        	        char_literal19 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_expr286);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_90; stream_90->add(stream_90, char_literal19, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr290);
        	        a=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, a.tree, NULL);

        	        char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_expr292);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_92; stream_92->add(stream_92, char_literal20, NULL);


        	        string_literal21 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_expr294);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_84; stream_84->add(stream_84, string_literal21, NULL);


        	        char_literal22 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_expr296);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_90; stream_90->add(stream_90, char_literal22, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr300);
        	        b=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, b.tree, NULL);

        	        char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_expr302);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_92; stream_92->add(stream_92, char_literal23, NULL);


        	        /* AST REWRITE
        	         * elements          : b, expr, a
        	         * token labels      : 
        	         * rule labels       : retval, b, a
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);
        	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 65:67: -> ^( IF expr $a $b)
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:65:70: ^( IF expr $a $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_b != NULL) stream_b->free(stream_b);
        	        	if (stream_a != NULL) stream_a->free(stream_a);


        	        }
        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:4: 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' '{' fd= exprlist '}'
        	    {
        	        string_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_expr321);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_86; stream_86->add(stream_86, string_literal24, NULL);


        	        char_literal25 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_expr323);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_60; stream_60->add(stream_60, char_literal25, NULL);


        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:16: (fa= expr )?
        	        {
        	            int alt4=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT_LITERAL:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INT_LITERAL:
        	                case OCT_LITERAL:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case 55:
        	                case 60:
        	                case 64:
        	                case 65:
        	                case 68:
        	                case 69:
        	                case 82:
        	                case 85:
        	                case 86:
        	                case 87:
        	                case 88:
        	                case 89:
        	                case 90:
        	                	{
        	                		alt4=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt4)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:16: fa= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr327);
        	        	        fa=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }

        	        	        CREATE_stream_expr; stream_expr->add(stream_expr, fa.tree, NULL);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_expr330);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_74; stream_74->add(stream_74, char_literal26, NULL);


        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:29: (fb= expr )?
        	        {
        	            int alt5=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT_LITERAL:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INT_LITERAL:
        	                case OCT_LITERAL:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case 55:
        	                case 60:
        	                case 64:
        	                case 65:
        	                case 68:
        	                case 69:
        	                case 82:
        	                case 85:
        	                case 86:
        	                case 87:
        	                case 88:
        	                case 89:
        	                case 90:
        	                	{
        	                		alt5=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt5)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:29: fb= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr334);
        	        	        fb=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }

        	        	        CREATE_stream_expr; stream_expr->add(stream_expr, fb.tree, NULL);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal27 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_expr337);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_74; stream_74->add(stream_74, char_literal27, NULL);


        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:42: (fc= expr )?
        	        {
        	            int alt6=2;
        	            switch ( LA(1) )
        	            {
        	                case FLOAT_LITERAL:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INT_LITERAL:
        	                case OCT_LITERAL:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case 55:
        	                case 60:
        	                case 64:
        	                case 65:
        	                case 68:
        	                case 69:
        	                case 82:
        	                case 85:
        	                case 86:
        	                case 87:
        	                case 88:
        	                case 89:
        	                case 90:
        	                	{
        	                		alt6=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:42: fc= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr341);
        	        	        fc=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }

        	        	        CREATE_stream_expr; stream_expr->add(stream_expr, fc.tree, NULL);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_expr344);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_61; stream_61->add(stream_61, char_literal28, NULL);


        	        char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_expr346);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_90; stream_90->add(stream_90, char_literal29, NULL);


        	        FOLLOWPUSH(FOLLOW_exprlist_in_expr350);
        	        fd=exprlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, fd.tree, NULL);

        	        char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_expr352);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	         
        	        CREATE_stream_92; stream_92->add(stream_92, char_literal30, NULL);


        	        /* AST REWRITE
        	         * elements          : fd, fc, fb, fa
        	         * token labels      : 
        	         * rule labels       : retval, fa, fd, fb, fc
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fa;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fd;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fb;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fc;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_fa=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fa", fa.tree != NULL ? fa.tree : NULL);
        	        	stream_fd=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fd", fd.tree != NULL ? fd.tree : NULL);
        	        	stream_fb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fb", fb.tree != NULL ? fb.tree : NULL);
        	        	stream_fc=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fc", fc.tree != NULL ? fc.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 66:73: -> ^( FOR $fa $fb $fc $fd)
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:66:76: ^( FOR $fa $fb $fc $fd)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fa == NULL ? NULL : stream_fa->nextTree(stream_fa));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fb == NULL ? NULL : stream_fb->nextTree(stream_fb));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fc == NULL ? NULL : stream_fc->nextTree(stream_fc));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fd == NULL ? NULL : stream_fd->nextTree(stream_fd));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_fa != NULL) stream_fa->free(stream_fa);
        	        	if (stream_fd != NULL) stream_fd->free(stream_fd);
        	        	if (stream_fb != NULL) stream_fb->free(stream_fb);
        	        	if (stream_fc != NULL) stream_fc->free(stream_fc);


        	        }
        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:67:4: expr6
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_expr6_in_expr375);
        	        expr631=expr6(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expr631.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_92 != NULL) stream_92->free(stream_92);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_60 != NULL) stream_60->free(stream_60);
        if (stream_74 != NULL) stream_74->free(stream_74);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_88 != NULL) stream_88->free(stream_88);
        if (stream_84 != NULL) stream_84->free(stream_84);
        if (stream_varlist != NULL) stream_varlist->free(stream_varlist);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr */

/**
 * $ANTLR start expr6
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:1: expr6 : (a= expr5 -> $a) ( '=' b= expr -> ^( ASSIGN $expr6 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr6 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr6 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr6 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr6 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr6 $b) )? ;
 */
static DonutParser_expr6_return
expr6(pDonutParser ctx)
{
    DonutParser_expr6_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    string_literal33;
    pANTLR3_COMMON_TOKEN    string_literal34;
    pANTLR3_COMMON_TOKEN    string_literal35;
    pANTLR3_COMMON_TOKEN    string_literal36;
    pANTLR3_COMMON_TOKEN    string_literal37;
    DonutParser_expr5_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr5_return

    DonutParser_expr_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE string_literal33_tree;
    pANTLR3_BASE_TREE string_literal34_tree;
    pANTLR3_BASE_TREE string_literal35_tree;
    pANTLR3_BASE_TREE string_literal36_tree;
    pANTLR3_BASE_TREE string_literal37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_58;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_73;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr5;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal32       = NULL;
    string_literal33       = NULL;
    string_literal34       = NULL;
    string_literal35       = NULL;
    string_literal36       = NULL;
    string_literal37       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal32_tree   = NULL;
    string_literal33_tree   = NULL;
    string_literal34_tree   = NULL;
    string_literal35_tree   = NULL;
    string_literal36_tree   = NULL;
    string_literal37_tree   = NULL;

    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_58   = NULL;
    #define CREATE_stream_58  if (stream_58 == NULL) {stream_58 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 58"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_73   = NULL;
    #define CREATE_stream_73  if (stream_73 == NULL) {stream_73 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 73"); } 
    stream_expr5   = NULL;
    #define CREATE_stream_expr5  if (stream_expr5 == NULL) {stream_expr5 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr5"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:7: ( (a= expr5 -> $a) ( '=' b= expr -> ^( ASSIGN $expr6 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr6 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr6 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr6 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr6 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr6 $b) )? )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:9: (a= expr5 -> $a) ( '=' b= expr -> ^( ASSIGN $expr6 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr6 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr6 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr6 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr6 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr6 $b) )?
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:9: (a= expr5 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:69:10: a= expr5
            {
                FOLLOWPUSH(FOLLOW_expr5_in_expr6386);
                a=expr5(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr6Ex;
                }

                CREATE_stream_expr5; stream_expr5->add(stream_expr5, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 69:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:2: ( '=' b= expr -> ^( ASSIGN $expr6 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr6 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr6 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr6 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr6 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr6 $b) )?
            {
                int alt8=7;
                switch ( LA(1) )
                {
                    case 77:
                    	{
                    		alt8=1;
                    	}
                        break;
                    case 66:
                    	{
                    		alt8=2;
                    	}
                        break;
                    case 70:
                    	{
                    		alt8=3;
                    	}
                        break;
                    case 63:
                    	{
                    		alt8=4;
                    	}
                        break;
                    case 73:
                    	{
                    		alt8=5;
                    	}
                        break;
                    case 58:
                    	{
                    		alt8=6;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:4: '=' b= expr
            	    {
            	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_expr6395);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	         
            	        CREATE_stream_77; stream_77->add(stream_77, char_literal32, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr6400);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr6
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 70:16: -> ^( ASSIGN $expr6 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:70:19: ^( ASSIGN $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:71:4: '+=' b= expr
            	    {
            	        string_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_expr6417);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	         
            	        CREATE_stream_66; stream_66->add(stream_66, string_literal33, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr6421);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr6
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 71:16: -> ^( ASSIGN_OP ADD $expr6 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:71:19: ^( ASSIGN_OP ADD $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:72:4: '-=' b= expr
            	    {
            	        string_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_expr6440);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	         
            	        CREATE_stream_70; stream_70->add(stream_70, string_literal34, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr6444);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr6, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 72:16: -> ^( ASSIGN_OP SUB $expr6 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:72:19: ^( ASSIGN_OP SUB $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:73:4: '*=' b= expr
            	    {
            	        string_literal35 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_expr6463);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	         
            	        CREATE_stream_63; stream_63->add(stream_63, string_literal35, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr6467);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr6
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 73:16: -> ^( ASSIGN_OP MUL $expr6 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:73:19: ^( ASSIGN_OP MUL $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:74:4: '/=' b= expr
            	    {
            	        string_literal36 = (pANTLR3_COMMON_TOKEN) MATCHT(73, &FOLLOW_73_in_expr6486);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	         
            	        CREATE_stream_73; stream_73->add(stream_73, string_literal36, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr6490);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr6
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 74:16: -> ^( ASSIGN_OP DIV $expr6 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:74:19: ^( ASSIGN_OP DIV $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:75:4: '%=' b= expr
            	    {
            	        string_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(58, &FOLLOW_58_in_expr6509);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	         
            	        CREATE_stream_58; stream_58->add(stream_58, string_literal37, NULL);


            	        FOLLOWPUSH(FOLLOW_expr_in_expr6513);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr6, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 75:16: -> ^( ASSIGN_OP MOD $expr6 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:75:19: ^( ASSIGN_OP MOD $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr6Ex; /* Prevent compiler warnings */
    ruleexpr6Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_58 != NULL) stream_58->free(stream_58);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_73 != NULL) stream_73->free(stream_73);
        if (stream_expr5 != NULL) stream_expr5->free(stream_expr5);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr6 */

/**
 * $ANTLR start expr5
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:1: expr5 : (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* ;
 */
static DonutParser_expr5_return
expr5(pDonutParser ctx)
{
    DonutParser_expr5_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal38;
    DonutParser_expr4_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr4_return

    DonutParser_expr4_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr4_return

    pANTLR3_BASE_TREE string_literal38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr4;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal38       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal38_tree   = NULL;

    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_expr4   = NULL;
    #define CREATE_stream_expr4  if (stream_expr4 == NULL) {stream_expr4 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr4"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:7: ( (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:9: (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:9: (a= expr4 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:10: a= expr4
            {
                FOLLOWPUSH(FOLLOW_expr4_in_expr5543);
                a=expr4(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr5Ex;
                }

                CREATE_stream_expr4; stream_expr4->add(stream_expr4, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 79:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:23: ( '||' b= expr4 -> ^( OR $expr5 $b) )*

            for (;;)
            {
                int alt9=2;
                switch ( LA(1) )
                {
                case 91:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:24: '||' b= expr4
            	    {
            	        string_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_expr5550);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }
            	         
            	        CREATE_stream_91; stream_91->add(stream_91, string_literal38, NULL);


            	        FOLLOWPUSH(FOLLOW_expr4_in_expr5554);
            	        b=expr4(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }

            	        CREATE_stream_expr4; stream_expr4->add(stream_expr4, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr5, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 79:37: -> ^( OR $expr5 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:79:40: ^( OR $expr5 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr5Ex; /* Prevent compiler warnings */
    ruleexpr5Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_expr4 != NULL) stream_expr4->free(stream_expr4);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr5 */

/**
 * $ANTLR start expr4
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:1: expr4 : (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* ;
 */
static DonutParser_expr4_return
expr4(pDonutParser ctx)
{
    DonutParser_expr4_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal39;
    DonutParser_expr3_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr3_return

    DonutParser_expr3_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr3_return

    pANTLR3_BASE_TREE string_literal39_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_59;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr3;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal39       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal39_tree   = NULL;

    stream_59   = NULL;
    #define CREATE_stream_59  if (stream_59 == NULL) {stream_59 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 59"); } 
    stream_expr3   = NULL;
    #define CREATE_stream_expr3  if (stream_expr3 == NULL) {stream_expr3 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr3"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:7: ( (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:9: (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:9: (a= expr3 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:10: a= expr3
            {
                FOLLOWPUSH(FOLLOW_expr3_in_expr4578);
                a=expr3(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr4Ex;
                }

                CREATE_stream_expr3; stream_expr3->add(stream_expr3, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 80:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:23: ( '&&' b= expr3 -> ^( AND $expr4 $b) )*

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) )
                {
                case 59:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:24: '&&' b= expr3
            	    {
            	        string_literal39 = (pANTLR3_COMMON_TOKEN) MATCHT(59, &FOLLOW_59_in_expr4585);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }
            	         
            	        CREATE_stream_59; stream_59->add(stream_59, string_literal39, NULL);


            	        FOLLOWPUSH(FOLLOW_expr3_in_expr4589);
            	        b=expr3(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }

            	        CREATE_stream_expr3; stream_expr3->add(stream_expr3, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr4, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 80:37: -> ^( AND $expr4 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:80:40: ^( AND $expr4 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr4Ex; /* Prevent compiler warnings */
    ruleexpr4Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_59 != NULL) stream_59->free(stream_59);
        if (stream_expr3 != NULL) stream_expr3->free(stream_expr3);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr4 */

/**
 * $ANTLR start expr3
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:82:1: expr3 : (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* ;
 */
static DonutParser_expr3_return
expr3(pDonutParser ctx)
{
    DonutParser_expr3_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal40;
    pANTLR3_COMMON_TOKEN    char_literal41;
    pANTLR3_COMMON_TOKEN    string_literal42;
    pANTLR3_COMMON_TOKEN    string_literal43;
    pANTLR3_COMMON_TOKEN    string_literal44;
    pANTLR3_COMMON_TOKEN    string_literal45;
    DonutParser_expr2_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr2_return

    DonutParser_expr2_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr2_return

    pANTLR3_BASE_TREE char_literal40_tree;
    pANTLR3_BASE_TREE char_literal41_tree;
    pANTLR3_BASE_TREE string_literal42_tree;
    pANTLR3_BASE_TREE string_literal43_tree;
    pANTLR3_BASE_TREE string_literal44_tree;
    pANTLR3_BASE_TREE string_literal45_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_78;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_56;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_80;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_81;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_75;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal40       = NULL;
    char_literal41       = NULL;
    string_literal42       = NULL;
    string_literal43       = NULL;
    string_literal44       = NULL;
    string_literal45       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal40_tree   = NULL;
    char_literal41_tree   = NULL;
    string_literal42_tree   = NULL;
    string_literal43_tree   = NULL;
    string_literal44_tree   = NULL;
    string_literal45_tree   = NULL;

    stream_78   = NULL;
    #define CREATE_stream_78  if (stream_78 == NULL) {stream_78 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 78"); } 
    stream_56   = NULL;
    #define CREATE_stream_56  if (stream_56 == NULL) {stream_56 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 56"); } 
    stream_80   = NULL;
    #define CREATE_stream_80  if (stream_80 == NULL) {stream_80 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 80"); } 
    stream_81   = NULL;
    #define CREATE_stream_81  if (stream_81 == NULL) {stream_81 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 81"); } 
    stream_75   = NULL;
    #define CREATE_stream_75  if (stream_75 == NULL) {stream_75 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 75"); } 
    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_expr2   = NULL;
    #define CREATE_stream_expr2  if (stream_expr2 == NULL) {stream_expr2 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr2"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:82:7: ( (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:82:9: (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:82:9: (a= expr2 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:82:10: a= expr2
            {
                FOLLOWPUSH(FOLLOW_expr2_in_expr3614);
                a=expr2(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr3Ex;
                }

                CREATE_stream_expr2; stream_expr2->add(stream_expr2, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 82:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:2: ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*

            for (;;)
            {
                int alt11=7;
                switch ( LA(1) )
                {
                case 75:
                	{
                		alt11=1;
                	}
                    break;
                case 80:
                	{
                		alt11=2;
                	}
                    break;
                case 78:
                	{
                		alt11=3;
                	}
                    break;
                case 56:
                	{
                		alt11=4;
                	}
                    break;
                case 76:
                	{
                		alt11=5;
                	}
                    break;
                case 81:
                	{
                		alt11=6;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:4: '<' b= expr2
            	    {
            	        char_literal40 = (pANTLR3_COMMON_TOKEN) MATCHT(75, &FOLLOW_75_in_expr3624);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_75; stream_75->add(stream_75, char_literal40, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3628);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 83:16: -> ^( CLT $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:83:19: ^( CLT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLT, (pANTLR3_UINT8)"CLT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:4: '>' b= expr2
            	    {
            	        char_literal41 = (pANTLR3_COMMON_TOKEN) MATCHT(80, &FOLLOW_80_in_expr3645);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_80; stream_80->add(stream_80, char_literal41, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3649);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 84:16: -> ^( CGT $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:84:19: ^( CGT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGT, (pANTLR3_UINT8)"CGT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:4: '==' b= expr2
            	    {
            	        string_literal42 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_expr3666);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_78; stream_78->add(stream_78, string_literal42, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3670);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 85:17: -> ^( CEQ $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:85:20: ^( CEQ $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CEQ, (pANTLR3_UINT8)"CEQ")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:4: '!=' b= expr2
            	    {
            	        string_literal43 = (pANTLR3_COMMON_TOKEN) MATCHT(56, &FOLLOW_56_in_expr3687);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_56; stream_56->add(stream_56, string_literal43, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3691);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 86:17: -> ^( CNE $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:86:20: ^( CNE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CNE, (pANTLR3_UINT8)"CNE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:87:4: '<=' b= expr2
            	    {
            	        string_literal44 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_expr3708);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_76; stream_76->add(stream_76, string_literal44, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3712);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 87:17: -> ^( CLE $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:87:20: ^( CLE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLE, (pANTLR3_UINT8)"CLE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:88:4: '>=' b= expr2
            	    {
            	        string_literal45 = (pANTLR3_COMMON_TOKEN) MATCHT(81, &FOLLOW_81_in_expr3729);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	         
            	        CREATE_stream_81; stream_81->add(stream_81, string_literal45, NULL);


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3733);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }

            	        CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 88:17: -> ^( CGE $expr3 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:88:20: ^( CGE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGE, (pANTLR3_UINT8)"CGE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr3Ex; /* Prevent compiler warnings */
    ruleexpr3Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_78 != NULL) stream_78->free(stream_78);
        if (stream_56 != NULL) stream_56->free(stream_56);
        if (stream_80 != NULL) stream_80->free(stream_80);
        if (stream_81 != NULL) stream_81->free(stream_81);
        if (stream_75 != NULL) stream_75->free(stream_75);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr3 */

/**
 * $ANTLR start expr2
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:91:1: expr2 : (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* ;
 */
static DonutParser_expr2_return
expr2(pDonutParser ctx)
{
    DonutParser_expr2_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal46;
    pANTLR3_COMMON_TOKEN    char_literal47;
    DonutParser_expr1_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr1_return

    DonutParser_expr1_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr1_return

    pANTLR3_BASE_TREE char_literal46_tree;
    pANTLR3_BASE_TREE char_literal47_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal46       = NULL;
    char_literal47       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal46_tree   = NULL;
    char_literal47_tree   = NULL;

    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_expr1   = NULL;
    #define CREATE_stream_expr1  if (stream_expr1 == NULL) {stream_expr1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr1"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:91:7: ( (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:91:9: (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:91:9: (a= expr1 -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:91:10: a= expr1
            {
                FOLLOWPUSH(FOLLOW_expr1_in_expr2760);
                a=expr1(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr2Ex;
                }

                CREATE_stream_expr1; stream_expr1->add(stream_expr1, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 91:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:92:2: ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*

            for (;;)
            {
                int alt12=3;
                switch ( LA(1) )
                {
                case 64:
                	{
                		alt12=1;
                	}
                    break;
                case 68:
                	{
                		alt12=2;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:92:4: '+' b= expr1
            	    {
            	        char_literal46 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_expr2769);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	         
            	        CREATE_stream_64; stream_64->add(stream_64, char_literal46, NULL);


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2773);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }

            	        CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr2, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 92:16: -> ^( ADD $expr2 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:92:19: ^( ADD $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:93:4: '-' b= expr1
            	    {
            	        char_literal47 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_expr2790);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	         
            	        CREATE_stream_68; stream_68->add(stream_68, char_literal47, NULL);


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2794);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }

            	        CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr2
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 93:16: -> ^( SUB $expr2 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:93:19: ^( SUB $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr2Ex; /* Prevent compiler warnings */
    ruleexpr2Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr2 */

/**
 * $ANTLR start expr1
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:96:1: expr1 : (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* ;
 */
static DonutParser_expr1_return
expr1(pDonutParser ctx)
{
    DonutParser_expr1_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal48;
    pANTLR3_COMMON_TOKEN    char_literal49;
    pANTLR3_COMMON_TOKEN    char_literal50;
    DonutParser_term_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_term_return

    DonutParser_term_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_term_return

    pANTLR3_BASE_TREE char_literal48_tree;
    pANTLR3_BASE_TREE char_literal49_tree;
    pANTLR3_BASE_TREE char_literal50_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_57;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_72;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal48       = NULL;
    char_literal49       = NULL;
    char_literal50       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal48_tree   = NULL;
    char_literal49_tree   = NULL;
    char_literal50_tree   = NULL;

    stream_57   = NULL;
    #define CREATE_stream_57  if (stream_57 == NULL) {stream_57 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 57"); } 
    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_72   = NULL;
    #define CREATE_stream_72  if (stream_72 == NULL) {stream_72 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 72"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:96:8: ( (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:96:10: (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:96:10: (a= term -> $a)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:96:11: a= term
            {
                FOLLOWPUSH(FOLLOW_term_in_expr1822);
                a=term(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr1Ex;
                }

                CREATE_stream_term; stream_term->add(stream_term, a.tree, NULL);

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 96:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:2: ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*

            for (;;)
            {
                int alt13=4;
                switch ( LA(1) )
                {
                case 62:
                	{
                		alt13=1;
                	}
                    break;
                case 72:
                	{
                		alt13=2;
                	}
                    break;
                case 57:
                	{
                		alt13=3;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:4: '*' b= term
            	    {
            	        char_literal48 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_expr1831);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	         
            	        CREATE_stream_62; stream_62->add(stream_62, char_literal48, NULL);


            	        FOLLOWPUSH(FOLLOW_term_in_expr1835);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }

            	        CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 97:15: -> ^( MUL $expr1 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:97:18: ^( MUL $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:98:4: '/' b= term
            	    {
            	        char_literal49 = (pANTLR3_COMMON_TOKEN) MATCHT(72, &FOLLOW_72_in_expr1852);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	         
            	        CREATE_stream_72; stream_72->add(stream_72, char_literal49, NULL);


            	        FOLLOWPUSH(FOLLOW_term_in_expr1856);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }

            	        CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : b, expr1
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 98:15: -> ^( DIV $expr1 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:98:18: ^( DIV $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:99:4: '%' b= term
            	    {
            	        char_literal50 = (pANTLR3_COMMON_TOKEN) MATCHT(57, &FOLLOW_57_in_expr1873);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	         
            	        CREATE_stream_57; stream_57->add(stream_57, char_literal50, NULL);


            	        FOLLOWPUSH(FOLLOW_term_in_expr1877);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }

            	        CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 99:15: -> ^( MOD $expr1 $b)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:99:18: ^( MOD $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr1Ex; /* Prevent compiler warnings */
    ruleexpr1Ex: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_57 != NULL) stream_57->free(stream_57);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_72 != NULL) stream_72->free(stream_72);
        if (stream_term != NULL) stream_term->free(stream_term);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr1 */

/**
 * $ANTLR start term
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:102:1: term : ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix );
 */
static DonutParser_term_return
term(pDonutParser ctx)
{
    DonutParser_term_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal51;
    pANTLR3_COMMON_TOKEN    string_literal53;
    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    char_literal59;
    DonutParser_term_return term52;
    #undef	RETURN_TYPE_term52
    #define	RETURN_TYPE_term52 DonutParser_term_return

    DonutParser_term_return term54;
    #undef	RETURN_TYPE_term54
    #define	RETURN_TYPE_term54 DonutParser_term_return

    DonutParser_term_return term56;
    #undef	RETURN_TYPE_term56
    #define	RETURN_TYPE_term56 DonutParser_term_return

    DonutParser_term_return term58;
    #undef	RETURN_TYPE_term58
    #define	RETURN_TYPE_term58 DonutParser_term_return

    DonutParser_term_return term60;
    #undef	RETURN_TYPE_term60
    #define	RETURN_TYPE_term60 DonutParser_term_return

    DonutParser_postfix_return postfix61;
    #undef	RETURN_TYPE_postfix61
    #define	RETURN_TYPE_postfix61 DonutParser_postfix_return

    pANTLR3_BASE_TREE string_literal51_tree;
    pANTLR3_BASE_TREE string_literal53_tree;
    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE char_literal59_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_55;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal51       = NULL;
    string_literal53       = NULL;
    char_literal55       = NULL;
    char_literal57       = NULL;
    char_literal59       = NULL;
    term52.tree = NULL;

    term54.tree = NULL;

    term56.tree = NULL;

    term58.tree = NULL;

    term60.tree = NULL;

    postfix61.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal51_tree   = NULL;
    string_literal53_tree   = NULL;
    char_literal55_tree   = NULL;
    char_literal57_tree   = NULL;
    char_literal59_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_55   = NULL;
    #define CREATE_stream_55  if (stream_55 == NULL) {stream_55 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 55"); } 
    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:103:2: ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix )

            ANTLR3_UINT32 alt14;

            alt14=6;

            switch ( LA(1) )
            {
            case 65:
            	{
            		alt14=1;
            	}
                break;
            case 69:
            	{
            		alt14=2;
            	}
                break;
            case 64:
            	{
            		alt14=3;
            	}
                break;
            case 68:
            	{
            		alt14=4;
            	}
                break;
            case 55:
            	{
            		alt14=5;
            	}
                break;
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 60:
            case 82:
            case 85:
            case 89:
            case 90:
            	{
            		alt14=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 14;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt14)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:103:4: '++' term
        	    {
        	        string_literal51 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_term902);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_65; stream_65->add(stream_65, string_literal51, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term904);
        	        term52=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term52.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 103:14: -> ^( PRE_OP ADD term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:103:17: ^( PRE_OP ADD term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:104:4: '--' term
        	    {
        	        string_literal53 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_term919);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_69; stream_69->add(stream_69, string_literal53, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term921);
        	        term54=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term54.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 104:14: -> ^( PRE_OP SUB term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:104:17: ^( PRE_OP SUB term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:105:4: '+' term
        	    {
        	        char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_term936);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_64; stream_64->add(stream_64, char_literal55, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term938);
        	        term56=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term56.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 105:13: -> ^( PLUS term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:105:16: ^( PLUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUS, (pANTLR3_UINT8)"PLUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:106:4: '-' term
        	    {
        	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_term951);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_68; stream_68->add(stream_68, char_literal57, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term953);
        	        term58=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term58.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 106:13: -> ^( MINUS term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:106:16: ^( MINUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUS, (pANTLR3_UINT8)"MINUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:107:4: '!' term
        	    {
        	        char_literal59 = (pANTLR3_COMMON_TOKEN) MATCHT(55, &FOLLOW_55_in_term966);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	         
        	        CREATE_stream_55; stream_55->add(stream_55, char_literal59, NULL);


        	        FOLLOWPUSH(FOLLOW_term_in_term968);
        	        term60=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        CREATE_stream_term; stream_term->add(stream_term, term60.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 107:13: -> ^( NOT term )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:107:16: ^( NOT term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:108:4: postfix
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_postfix_in_term981);
        	        postfix61=postfix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, postfix61.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_55 != NULL) stream_55->free(stream_55);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_65 != NULL) stream_65->free(stream_65);
        if (stream_term != NULL) stream_term->free(stream_term);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end term */

/**
 * $ANTLR start postfix
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:110:1: postfix : (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )* ;
 */
static DonutParser_postfix_return
postfix(pDonutParser ctx)
{
    DonutParser_postfix_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal62;
    pANTLR3_COMMON_TOKEN    string_literal63;
    pANTLR3_COMMON_TOKEN    char_literal64;
    pANTLR3_COMMON_TOKEN    char_literal65;
    pANTLR3_COMMON_TOKEN    char_literal66;
    pANTLR3_COMMON_TOKEN    char_literal67;
    pANTLR3_COMMON_TOKEN    char_literal68;
    DonutParser_primary_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p DonutParser_primary_return

    DonutParser_name_return n;
    #undef	RETURN_TYPE_n
    #define	RETURN_TYPE_n DonutParser_name_return

    DonutParser_arglist_return arl;
    #undef	RETURN_TYPE_arl
    #define	RETURN_TYPE_arl DonutParser_arglist_return

    DonutParser_arglist_return apl;
    #undef	RETURN_TYPE_apl
    #define	RETURN_TYPE_apl DonutParser_arglist_return

    pANTLR3_BASE_TREE string_literal62_tree;
    pANTLR3_BASE_TREE string_literal63_tree;
    pANTLR3_BASE_TREE char_literal64_tree;
    pANTLR3_BASE_TREE char_literal65_tree;
    pANTLR3_BASE_TREE char_literal66_tree;
    pANTLR3_BASE_TREE char_literal67_tree;
    pANTLR3_BASE_TREE char_literal68_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_60;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arglist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal62       = NULL;
    string_literal63       = NULL;
    char_literal64       = NULL;
    char_literal65       = NULL;
    char_literal66       = NULL;
    char_literal67       = NULL;
    char_literal68       = NULL;
    p.tree = NULL;

    n.tree = NULL;

    arl.tree = NULL;

    apl.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal62_tree   = NULL;
    string_literal63_tree   = NULL;
    char_literal64_tree   = NULL;
    char_literal65_tree   = NULL;
    char_literal66_tree   = NULL;
    char_literal67_tree   = NULL;
    char_literal68_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_60   = NULL;
    #define CREATE_stream_60  if (stream_60 == NULL) {stream_60 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 60"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_arglist   = NULL;
    #define CREATE_stream_arglist  if (stream_arglist == NULL) {stream_arglist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arglist"); }
    stream_primary   = NULL;
    #define CREATE_stream_primary  if (stream_primary == NULL) {stream_primary = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary"); }
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:111:2: ( (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:111:4: (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )*
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:111:4: (p= primary -> $p)
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:111:5: p= primary
            {
                FOLLOWPUSH(FOLLOW_primary_in_postfix994);
                p=primary(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixEx;
                }

                CREATE_stream_primary; stream_primary->add(stream_primary, p.tree, NULL);

                /* AST REWRITE
                 * elements          : p
                 * token labels      : 
                 * rule labels       : retval, p
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_p=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", p.tree != NULL ? p.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 111:14: -> $p
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_p != NULL) stream_p->free(stream_p);


                }
            }


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:112:2: ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' arl= arglist ']' -> ^( IDX $postfix $arl) | '(' apl= arglist ')' -> ^( APPLY $postfix $apl) )*

            for (;;)
            {
                int alt15=6;
                switch ( LA(1) )
                {
                case 65:
                	{
                		alt15=1;
                	}
                    break;
                case 69:
                	{
                		alt15=2;
                	}
                    break;
                case 71:
                	{
                		alt15=3;
                	}
                    break;
                case 82:
                	{
                		alt15=4;
                	}
                    break;
                case 60:
                	{
                		alt15=5;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:112:4: '++'
            	    {
            	        string_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_postfix1003);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_65; stream_65->add(stream_65, string_literal62, NULL);


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 112:9: -> ^( POST_OP ADD $postfix)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:112:12: ^( POST_OP ADD $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:113:4: '--'
            	    {
            	        string_literal63 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_postfix1019);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_69; stream_69->add(stream_69, string_literal63, NULL);


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 113:9: -> ^( POST_OP SUB $postfix)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:113:12: ^( POST_OP SUB $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:114:4: '.' n= name
            	    {
            	        char_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_postfix1035);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_71; stream_71->add(stream_71, char_literal64, NULL);


            	        FOLLOWPUSH(FOLLOW_name_in_postfix1039);
            	        n=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }

            	        CREATE_stream_name; stream_name->add(stream_name, n.tree, NULL);

            	        /* AST REWRITE
            	         * elements          : postfix, n
            	         * token labels      : 
            	         * rule labels       : retval, n
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_n;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_n=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n.tree != NULL ? n.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 114:15: -> ^( DOT $postfix $n)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:114:18: ^( DOT $postfix $n)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n == NULL ? NULL : stream_n->nextTree(stream_n));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_n != NULL) stream_n->free(stream_n);


            	        }
            	    }
            	    break;
            	case 4:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:115:4: '[' arl= arglist ']'
            	    {
            	        char_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_postfix1056);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_82; stream_82->add(stream_82, char_literal65, NULL);


            	        FOLLOWPUSH(FOLLOW_arglist_in_postfix1060);
            	        arl=arglist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }

            	        CREATE_stream_arglist; stream_arglist->add(stream_arglist, arl.tree, NULL);

            	        char_literal66 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_postfix1062);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_83; stream_83->add(stream_83, char_literal66, NULL);


            	        /* AST REWRITE
            	         * elements          : arl, postfix
            	         * token labels      : 
            	         * rule labels       : retval, arl
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arl;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_arl=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token arl", arl.tree != NULL ? arl.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 115:24: -> ^( IDX $postfix $arl)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:115:27: ^( IDX $postfix $arl)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDX, (pANTLR3_UINT8)"IDX")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arl == NULL ? NULL : stream_arl->nextTree(stream_arl));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_arl != NULL) stream_arl->free(stream_arl);


            	        }
            	    }
            	    break;
            	case 5:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:116:4: '(' apl= arglist ')'
            	    {
            	        char_literal67 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_postfix1079);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_60; stream_60->add(stream_60, char_literal67, NULL);


            	        FOLLOWPUSH(FOLLOW_arglist_in_postfix1083);
            	        apl=arglist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }

            	        CREATE_stream_arglist; stream_arglist->add(stream_arglist, apl.tree, NULL);

            	        char_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_postfix1085);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	         
            	        CREATE_stream_61; stream_61->add(stream_61, char_literal68, NULL);


            	        /* AST REWRITE
            	         * elements          : apl, postfix
            	         * token labels      : 
            	         * rule labels       : retval, apl
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_apl;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_apl=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token apl", apl.tree != NULL ? apl.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 116:24: -> ^( APPLY $postfix $apl)
            	        	{
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:116:27: ^( APPLY $postfix $apl)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, APPLY, (pANTLR3_UINT8)"APPLY")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_apl == NULL ? NULL : stream_apl->nextTree(stream_apl));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_apl != NULL) stream_apl->free(stream_apl);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepostfixEx; /* Prevent compiler warnings */
    rulepostfixEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_65 != NULL) stream_65->free(stream_65);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_60 != NULL) stream_60->free(stream_60);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_arglist != NULL) stream_arglist->free(stream_arglist);
        if (stream_primary != NULL) stream_primary->free(stream_primary);
        if (stream_name != NULL) stream_name->free(stream_name);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end postfix */

/**
 * $ANTLR start primary
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:119:1: primary : ( literal | array | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | object );
 */
static DonutParser_primary_return
primary(pDonutParser ctx)
{
    DonutParser_primary_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal72;
    pANTLR3_COMMON_TOKEN    char_literal74;
    DonutParser_literal_return literal69;
    #undef	RETURN_TYPE_literal69
    #define	RETURN_TYPE_literal69 DonutParser_literal_return

    DonutParser_array_return array70;
    #undef	RETURN_TYPE_array70
    #define	RETURN_TYPE_array70 DonutParser_array_return

    DonutParser_name_return name71;
    #undef	RETURN_TYPE_name71
    #define	RETURN_TYPE_name71 DonutParser_name_return

    DonutParser_expr_return expr73;
    #undef	RETURN_TYPE_expr73
    #define	RETURN_TYPE_expr73 DonutParser_expr_return

    DonutParser_object_return object75;
    #undef	RETURN_TYPE_object75
    #define	RETURN_TYPE_object75 DonutParser_object_return

    pANTLR3_BASE_TREE char_literal72_tree;
    pANTLR3_BASE_TREE char_literal74_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_60;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_61;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal72       = NULL;
    char_literal74       = NULL;
    literal69.tree = NULL;

    array70.tree = NULL;

    name71.tree = NULL;

    expr73.tree = NULL;

    object75.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal72_tree   = NULL;
    char_literal74_tree   = NULL;

    stream_60   = NULL;
    #define CREATE_stream_60  if (stream_60 == NULL) {stream_60 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 60"); } 
    stream_61   = NULL;
    #define CREATE_stream_61  if (stream_61 == NULL) {stream_61 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 61"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:120:2: ( literal | array | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | object )

            ANTLR3_UINT32 alt16;

            alt16=5;

            switch ( LA(1) )
            {
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case INT_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 85:
            case 89:
            	{
            		alt16=1;
            	}
                break;
            case 82:
            	{
            		alt16=2;
            	}
                break;
            case IDENT:
            	{
            		alt16=3;
            	}
                break;
            case 60:
            	{
            		alt16=4;
            	}
                break;
            case 90:
            	{
            		alt16=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 16;
                EXCEPTION->state        = 0;


                goto ruleprimaryEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:120:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_literal_in_primary1111);
        	        literal69=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, literal69.tree);

        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:121:4: array
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_array_in_primary1116);
        	        array70=array(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, array70.tree);

        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:122:4: name
        	    {
        	        FOLLOWPUSH(FOLLOW_name_in_primary1121);
        	        name71=name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_name; stream_name->add(stream_name, name71.tree, NULL);

        	        /* AST REWRITE
        	         * elements          : name
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 122:9: -> ^( DOT SCOPE name )
        	        	{
        	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:122:12: ^( DOT SCOPE name )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SCOPE, (pANTLR3_UINT8)"SCOPE")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:123:4: '(' expr ')'
        	    {
        	        char_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(60, &FOLLOW_60_in_primary1136);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	         
        	        CREATE_stream_60; stream_60->add(stream_60, char_literal72, NULL);


        	        FOLLOWPUSH(FOLLOW_expr_in_primary1138);
        	        expr73=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        CREATE_stream_expr; stream_expr->add(stream_expr, expr73.tree, NULL);

        	        char_literal74 = (pANTLR3_COMMON_TOKEN) MATCHT(61, &FOLLOW_61_in_primary1140);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	         
        	        CREATE_stream_61; stream_61->add(stream_61, char_literal74, NULL);


        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 123:17: -> expr
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:124:4: object
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_object_in_primary1149);
        	        object75=object(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, object75.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_60 != NULL) stream_60->free(stream_60);
        if (stream_61 != NULL) stream_61->free(stream_61);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end primary */

/**
 * $ANTLR start name
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:128:1: name : IDENT ;
 */
static DonutParser_name_return
name(pDonutParser ctx)
{
    DonutParser_name_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT76;

    pANTLR3_BASE_TREE IDENT76_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    IDENT76       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    IDENT76_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:128:6: ( IDENT )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:128:8: IDENT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            IDENT76 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_name1160);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }

            IDENT76_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT76));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT76_tree);


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start varlist
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:1: varlist : ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) ;
 */
static DonutParser_varlist_return
varlist(pDonutParser ctx)
{
    DonutParser_varlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal78;
    DonutParser_name_return name77;
    #undef	RETURN_TYPE_name77
    #define	RETURN_TYPE_name77 DonutParser_name_return

    DonutParser_name_return name79;
    #undef	RETURN_TYPE_name79
    #define	RETURN_TYPE_name79 DonutParser_name_return

    pANTLR3_BASE_TREE char_literal78_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal78       = NULL;
    name77.tree = NULL;

    name79.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal78_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:9: ( ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:11: ( name ( ( ',' ) name )* )?
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:11: ( name ( ( ',' ) name )* )?
            {
                int alt18=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:12: name ( ( ',' ) name )*
            	    {
            	        FOLLOWPUSH(FOLLOW_name_in_varlist1169);
            	        name77=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarlistEx;
            	        }

            	        CREATE_stream_name; stream_name->add(stream_name, name77.tree, NULL);

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:17: ( ( ',' ) name )*

            	        for (;;)
            	        {
            	            int alt17=2;
            	            switch ( LA(1) )
            	            {
            	            case 67:
            	            	{
            	            		alt17=1;
            	            	}
            	                break;

            	            }

            	            switch (alt17)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:18: ( ',' ) name
            	        	    {
            	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:18: ( ',' )
            	        	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:19: ','
            	        	        {
            	        	            char_literal78 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_varlist1173);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulevarlistEx;
            	        	            }
            	        	             
            	        	            CREATE_stream_67; stream_67->add(stream_67, char_literal78, NULL);


            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_name_in_varlist1176);
            	        	        name79=name(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevarlistEx;
            	        	        }

            	        	        CREATE_stream_name; stream_name->add(stream_name, name79.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop17;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop17: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : name
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 130:33: -> ^( VARS ( name )* )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:36: ^( VARS ( name )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        , root_1));

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:130:43: ( name )*
            	        {
            	        	while ( (stream_name != NULL && stream_name->hasNext(stream_name))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        	}
            	        	if (stream_name != NULL) stream_name->reset(stream_name);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulevarlistEx; /* Prevent compiler warnings */
    rulevarlistEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_name != NULL) stream_name->free(stream_name);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end varlist */

/**
 * $ANTLR start arglist
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:132:1: arglist : exprlist_for_literal -> ^( ARGS exprlist_for_literal ) ;
 */
static DonutParser_arglist_return
arglist(pDonutParser ctx)
{
    DonutParser_arglist_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_for_literal_return exprlist_for_literal80;
    #undef	RETURN_TYPE_exprlist_for_literal80
    #define	RETURN_TYPE_exprlist_for_literal80 DonutParser_exprlist_for_literal_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist_for_literal80.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:132:9: ( exprlist_for_literal -> ^( ARGS exprlist_for_literal ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:132:11: exprlist_for_literal
        {
            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_arglist1197);
            exprlist_for_literal80=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearglistEx;
            }

            CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal80.tree, NULL);

            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 132:32: -> ^( ARGS exprlist_for_literal )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:132:35: ^( ARGS exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGS, (pANTLR3_UINT8)"ARGS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end arglist */

/**
 * $ANTLR start array
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:133:1: array : '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) ;
 */
static DonutParser_array_return
array(pDonutParser ctx)
{
    DonutParser_array_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal81;
    pANTLR3_COMMON_TOKEN    char_literal83;
    pANTLR3_COMMON_TOKEN    char_literal84;
    DonutParser_exprlist_for_literal_return exprlist_for_literal82;
    #undef	RETURN_TYPE_exprlist_for_literal82
    #define	RETURN_TYPE_exprlist_for_literal82 DonutParser_exprlist_for_literal_return

    pANTLR3_BASE_TREE char_literal81_tree;
    pANTLR3_BASE_TREE char_literal83_tree;
    pANTLR3_BASE_TREE char_literal84_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal81       = NULL;
    char_literal83       = NULL;
    char_literal84       = NULL;
    exprlist_for_literal82.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal81_tree   = NULL;
    char_literal83_tree   = NULL;
    char_literal84_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:133:7: ( '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:133:9: '[' exprlist_for_literal ( ',' )? ']'
        {
            char_literal81 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_array1212);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
             
            CREATE_stream_82; stream_82->add(stream_82, char_literal81, NULL);


            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_array1214);
            exprlist_for_literal82=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }

            CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal82.tree, NULL);

            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:133:34: ( ',' )?
            {
                int alt19=2;
                switch ( LA(1) )
                {
                    case 67:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:133:34: ','
            	    {
            	        char_literal83 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_array1216);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrayEx;
            	        }
            	         
            	        CREATE_stream_67; stream_67->add(stream_67, char_literal83, NULL);


            	    }
            	    break;

                }
            }

            char_literal84 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_array1219);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
             
            CREATE_stream_83; stream_83->add(stream_83, char_literal84, NULL);


            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 133:43: -> ^( ARRAY exprlist_for_literal )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:133:46: ^( ARRAY exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY, (pANTLR3_UINT8)"ARRAY")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end array */

/**
 * $ANTLR start exprlist_for_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:1: exprlist_for_literal : ( expr ( ',' expr )* )? -> ( expr )* ;
 */
static DonutParser_exprlist_for_literal_return
exprlist_for_literal(pDonutParser ctx)
{
    DonutParser_exprlist_for_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal86;
    DonutParser_expr_return expr85;
    #undef	RETURN_TYPE_expr85
    #define	RETURN_TYPE_expr85 DonutParser_expr_return

    DonutParser_expr_return expr87;
    #undef	RETURN_TYPE_expr87
    #define	RETURN_TYPE_expr87 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal86_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal86       = NULL;
    expr85.tree = NULL;

    expr87.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal86_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:22: ( ( expr ( ',' expr )* )? -> ( expr )* )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:24: ( expr ( ',' expr )* )?
        {
            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:24: ( expr ( ',' expr )* )?
            {
                int alt21=2;
                switch ( LA(1) )
                {
                    case FLOAT_LITERAL:
                    case HEX_LITERAL:
                    case IDENT:
                    case INT_LITERAL:
                    case OCT_LITERAL:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case 55:
                    case 60:
                    case 64:
                    case 65:
                    case 68:
                    case 69:
                    case 82:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    	{
                    		alt21=1;
                    	}
                        break;
                }

                switch (alt21)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:25: expr ( ',' expr )*
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1235);
            	        expr85=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlist_for_literalEx;
            	        }

            	        CREATE_stream_expr; stream_expr->add(stream_expr, expr85.tree, NULL);

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:30: ( ',' expr )*

            	        for (;;)
            	        {
            	            int alt20=2;
            	            switch ( LA(1) )
            	            {
            	            case 67:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case FLOAT_LITERAL:
            	            		case HEX_LITERAL:
            	            		case IDENT:
            	            		case INT_LITERAL:
            	            		case OCT_LITERAL:
            	            		case STRING_DOUBLE:
            	            		case STRING_SINGLE:
            	            		case 55:
            	            		case 60:
            	            		case 64:
            	            		case 65:
            	            		case 68:
            	            		case 69:
            	            		case 82:
            	            		case 85:
            	            		case 86:
            	            		case 87:
            	            		case 88:
            	            		case 89:
            	            		case 90:
            	            			{
            	            				alt20=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:31: ',' expr
            	        	    {
            	        	        char_literal86 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_exprlist_for_literal1238);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_67; stream_67->add(stream_67, char_literal86, NULL);


            	        	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1240);
            	        	        expr87=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }

            	        	        CREATE_stream_expr; stream_expr->add(stream_expr, expr87.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop20;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop20: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 134:44: -> ( expr )*
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:134:47: ( expr )*
            	    {
            	    	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	    	{
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	    	}
            	    	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlist_for_literalEx; /* Prevent compiler warnings */
    ruleexprlist_for_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist_for_literal */

/**
 * $ANTLR start object
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:1: object : '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) ;
 */
static DonutParser_object_return
object(pDonutParser ctx)
{
    DonutParser_object_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal88;
    pANTLR3_COMMON_TOKEN    char_literal90;
    pANTLR3_COMMON_TOKEN    char_literal92;
    pANTLR3_COMMON_TOKEN    char_literal93;
    DonutParser_object_pair_return object_pair89;
    #undef	RETURN_TYPE_object_pair89
    #define	RETURN_TYPE_object_pair89 DonutParser_object_pair_return

    DonutParser_object_pair_return object_pair91;
    #undef	RETURN_TYPE_object_pair91
    #define	RETURN_TYPE_object_pair91 DonutParser_object_pair_return

    pANTLR3_BASE_TREE char_literal88_tree;
    pANTLR3_BASE_TREE char_literal90_tree;
    pANTLR3_BASE_TREE char_literal92_tree;
    pANTLR3_BASE_TREE char_literal93_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_92;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_object_pair;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal88       = NULL;
    char_literal90       = NULL;
    char_literal92       = NULL;
    char_literal93       = NULL;
    object_pair89.tree = NULL;

    object_pair91.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal88_tree   = NULL;
    char_literal90_tree   = NULL;
    char_literal92_tree   = NULL;
    char_literal93_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_92   = NULL;
    #define CREATE_stream_92  if (stream_92 == NULL) {stream_92 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 92"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_object_pair   = NULL;
    #define CREATE_stream_object_pair  if (stream_object_pair == NULL) {stream_object_pair = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule object_pair"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:8: ( '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:10: '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}'
        {
            char_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_object1257);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
             
            CREATE_stream_90; stream_90->add(stream_90, char_literal88, NULL);


            // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:14: ( object_pair ( ',' object_pair )* ( ',' )? )?
            {
                int alt24=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt24=1;
                    	}
                        break;
                }

                switch (alt24)
                {
            	case 1:
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:15: object_pair ( ',' object_pair )* ( ',' )?
            	    {
            	        FOLLOWPUSH(FOLLOW_object_pair_in_object1260);
            	        object_pair89=object_pair(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectEx;
            	        }

            	        CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair89.tree, NULL);

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:27: ( ',' object_pair )*

            	        for (;;)
            	        {
            	            int alt22=2;
            	            switch ( LA(1) )
            	            {
            	            case 67:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case IDENT:
            	            			{
            	            				alt22=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt22)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:28: ',' object_pair
            	        	    {
            	        	        char_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_object1263);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_67; stream_67->add(stream_67, char_literal90, NULL);


            	        	        FOLLOWPUSH(FOLLOW_object_pair_in_object1265);
            	        	        object_pair91=object_pair(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }

            	        	        CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair91.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop22;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop22: ; /* Jump out to here if this rule does not match */


            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:46: ( ',' )?
            	        {
            	            int alt23=2;
            	            switch ( LA(1) )
            	            {
            	                case 67:
            	                	{
            	                		alt23=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt23)
            	            {
            	        	case 1:
            	        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:47: ','
            	        	    {
            	        	        char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_object1270);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_67; stream_67->add(stream_67, char_literal92, NULL);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            char_literal93 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_object1276);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
             
            CREATE_stream_92; stream_92->add(stream_92, char_literal93, NULL);


            /* AST REWRITE
             * elements          : object_pair
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 136:59: -> ^( OBJECT ( object_pair )* )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:62: ^( OBJECT ( object_pair )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJECT, (pANTLR3_UINT8)"OBJECT")
            	        , root_1));

            	        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:136:71: ( object_pair )*
            	        {
            	        	while ( (stream_object_pair != NULL && stream_object_pair->hasNext(stream_object_pair))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_object_pair == NULL ? NULL : stream_object_pair->nextTree(stream_object_pair));

            	        	}
            	        	if (stream_object_pair != NULL) stream_object_pair->reset(stream_object_pair);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobjectEx; /* Prevent compiler warnings */
    ruleobjectEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_92 != NULL) stream_92->free(stream_92);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_object_pair != NULL) stream_object_pair->free(stream_object_pair);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object */

/**
 * $ANTLR start object_pair
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:137:1: object_pair : name '=>' expr -> ^( PAIR name expr ) ;
 */
static DonutParser_object_pair_return
object_pair(pDonutParser ctx)
{
    DonutParser_object_pair_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal95;
    DonutParser_name_return name94;
    #undef	RETURN_TYPE_name94
    #define	RETURN_TYPE_name94 DonutParser_name_return

    DonutParser_expr_return expr96;
    #undef	RETURN_TYPE_expr96
    #define	RETURN_TYPE_expr96 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal95_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_79;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal95       = NULL;
    name94.tree = NULL;

    expr96.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal95_tree   = NULL;

    stream_79   = NULL;
    #define CREATE_stream_79  if (stream_79 == NULL) {stream_79 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 79"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:137:13: ( name '=>' expr -> ^( PAIR name expr ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:137:15: name '=>' expr
        {
            FOLLOWPUSH(FOLLOW_name_in_object_pair1292);
            name94=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }

            CREATE_stream_name; stream_name->add(stream_name, name94.tree, NULL);

            string_literal95 = (pANTLR3_COMMON_TOKEN) MATCHT(79, &FOLLOW_79_in_object_pair1294);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
             
            CREATE_stream_79; stream_79->add(stream_79, string_literal95, NULL);


            FOLLOWPUSH(FOLLOW_expr_in_object_pair1296);
            expr96=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }

            CREATE_stream_expr; stream_expr->add(stream_expr, expr96.tree, NULL);

            /* AST REWRITE
             * elements          : name, expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 137:30: -> ^( PAIR name expr )
            	{
            	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:137:33: ^( PAIR name expr )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAIR, (pANTLR3_UINT8)"PAIR")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_pairEx; /* Prevent compiler warnings */
    ruleobject_pairEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_79 != NULL) stream_79->free(stream_79);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object_pair */

/**
 * $ANTLR start literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:139:1: literal : ( numeric_literal | boolean_literal | string_literal );
 */
static DonutParser_literal_return
literal(pDonutParser ctx)
{
    DonutParser_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_numeric_literal_return numeric_literal97;
    #undef	RETURN_TYPE_numeric_literal97
    #define	RETURN_TYPE_numeric_literal97 DonutParser_numeric_literal_return

    DonutParser_boolean_literal_return boolean_literal98;
    #undef	RETURN_TYPE_boolean_literal98
    #define	RETURN_TYPE_boolean_literal98 DonutParser_boolean_literal_return

    DonutParser_string_literal_return string_literal99;
    #undef	RETURN_TYPE_string_literal99
    #define	RETURN_TYPE_string_literal99 DonutParser_string_literal_return


    /* Initialize rule variables
     */

    root_0 = NULL;

    numeric_literal97.tree = NULL;

    boolean_literal98.tree = NULL;

    string_literal99.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;




    retval.tree  = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:2: ( numeric_literal | boolean_literal | string_literal )

            ANTLR3_UINT32 alt25;

            alt25=3;

            switch ( LA(1) )
            {
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case INT_LITERAL:
            case OCT_LITERAL:
            	{
            		alt25=1;
            	}
                break;
            case 85:
            case 89:
            	{
            		alt25=2;
            	}
                break;
            case STRING_DOUBLE:
            case STRING_SINGLE:
            	{
            		alt25=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;

            }

            switch (alt25)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:140:4: numeric_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_numeric_literal_in_literal1315);
        	        numeric_literal97=numeric_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, numeric_literal97.tree);

        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:141:4: boolean_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_boolean_literal_in_literal1320);
        	        boolean_literal98=boolean_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, boolean_literal98.tree);

        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:142:4: string_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_string_literal_in_literal1325);
        	        string_literal99=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal99.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end literal */

/**
 * $ANTLR start boolean_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:145:1: boolean_literal : ( 'true' | 'false' );
 */
static DonutParser_boolean_literal_return
boolean_literal(pDonutParser ctx)
{
    DonutParser_boolean_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set100;

    pANTLR3_BASE_TREE set100_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set100       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set100_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:146:2: ( 'true' | 'false' )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set100=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == 85 || LA(1) == 89 )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set100))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleboolean_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleboolean_literalEx; /* Prevent compiler warnings */
    ruleboolean_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end boolean_literal */

/**
 * $ANTLR start numeric_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:149:1: numeric_literal : ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL );
 */
static DonutParser_numeric_literal_return
numeric_literal(pDonutParser ctx)
{
    DonutParser_numeric_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set101;

    pANTLR3_BASE_TREE set101_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set101       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set101_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:150:2: ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set101=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == FLOAT_LITERAL || LA(1) == HEX_LITERAL || LA(1) == INT_LITERAL || LA(1) == OCT_LITERAL )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set101))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulenumeric_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenumeric_literalEx; /* Prevent compiler warnings */
    rulenumeric_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end numeric_literal */

/**
 * $ANTLR start string_literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:155:1: string_literal : ( STRING_SINGLE | STRING_DOUBLE );
 */
static DonutParser_string_literal_return
string_literal(pDonutParser ctx)
{
    DonutParser_string_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set102;

    pANTLR3_BASE_TREE set102_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set102       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set102_tree   = NULL;


    retval.tree  = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:155:16: ( STRING_SINGLE | STRING_DOUBLE )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set102=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == STRING_DOUBLE || LA(1) == STRING_SINGLE )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set102))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end string_literal */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
