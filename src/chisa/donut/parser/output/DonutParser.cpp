/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g
 *     -                            On : 2012-12-21 10:44:56
 *     -                for the parser : DonutParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "DonutParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pDonutParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pDonutParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pDonutParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pDonutParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   DonutParserTokenNames[97+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "APPLY",
        (pANTLR3_UINT8) "ARGS",
        (pANTLR3_UINT8) "ARRAY",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "ASSIGN_OP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "CEQ",
        (pANTLR3_UINT8) "CGE",
        (pANTLR3_UINT8) "CGT",
        (pANTLR3_UINT8) "CLE",
        (pANTLR3_UINT8) "CLOS",
        (pANTLR3_UINT8) "CLT",
        (pANTLR3_UINT8) "CNE",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "COND",
        (pANTLR3_UINT8) "CONT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FALSE_LITERAL",
        (pANTLR3_UINT8) "FLOAT_LITERAL",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "INTERRUPT",
        (pANTLR3_UINT8) "INT_LITERAL",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "MUL",
        (pANTLR3_UINT8) "NONZERO_DIGIT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "NULL_LITERAL",
        (pANTLR3_UINT8) "OBJECT",
        (pANTLR3_UINT8) "OCT_DIGIT",
        (pANTLR3_UINT8) "OCT_LITERAL",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "PAIR",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "POST_OP",
        (pANTLR3_UINT8) "PRE_OP",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "SCOPE",
        (pANTLR3_UINT8) "SELF",
        (pANTLR3_UINT8) "STRING_DOUBLE",
        (pANTLR3_UINT8) "STRING_DOUBLE_ELEMENT",
        (pANTLR3_UINT8) "STRING_SINGLE",
        (pANTLR3_UINT8) "STRING_SINGLE_ELEMENT",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "TRUE_LITERAL",
        (pANTLR3_UINT8) "VARS",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'=>'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 DonutParser_source_return
	source    (pDonutParser ctx);
static 
 DonutParser_program_return
	program    (pDonutParser ctx);
static 
 DonutParser_exprlist_return
	exprlist    (pDonutParser ctx);
static 
 DonutParser_expr_return
	expr    (pDonutParser ctx);
static 
 DonutParser_expr8_return
	expr8    (pDonutParser ctx);
static 
 DonutParser_expr7_return
	expr7    (pDonutParser ctx);
static 
 DonutParser_expr6_return
	expr6    (pDonutParser ctx);
static 
 DonutParser_expr5_return
	expr5    (pDonutParser ctx);
static 
 DonutParser_expr4_return
	expr4    (pDonutParser ctx);
static 
 DonutParser_expr3_return
	expr3    (pDonutParser ctx);
static 
 DonutParser_expr2_return
	expr2    (pDonutParser ctx);
static 
 DonutParser_expr1_return
	expr1    (pDonutParser ctx);
static 
 DonutParser_term_return
	term    (pDonutParser ctx);
static 
 DonutParser_postfix_return
	postfix    (pDonutParser ctx);
static 
 DonutParser_primary_return
	primary    (pDonutParser ctx);
static 
 DonutParser_cond_return
	cond    (pDonutParser ctx);
static 
 DonutParser_block_return
	block    (pDonutParser ctx);
static 
 DonutParser_name_return
	name    (pDonutParser ctx);
static 
 DonutParser_varlist_return
	varlist    (pDonutParser ctx);
static 
 DonutParser_arglist_return
	arglist    (pDonutParser ctx);
static 
 DonutParser_array_return
	array    (pDonutParser ctx);
static 
 DonutParser_exprlist_for_literal_return
	exprlist_for_literal    (pDonutParser ctx);
static 
 DonutParser_object_return
	object    (pDonutParser ctx);
static 
 DonutParser_object_pair_return
	object_pair    (pDonutParser ctx);
static 
 DonutParser_literal_return
	literal    (pDonutParser ctx);
static 
 DonutParser_boolean_literal_return
	boolean_literal    (pDonutParser ctx);
static 
 DonutParser_numeric_literal_return
	numeric_literal    (pDonutParser ctx);
static 
 DonutParser_string_literal_return
	string_literal    (pDonutParser ctx);
static 
 ANTLR3_BOOLEAN
	synpred1_Donut    (pDonutParser ctx);
static void	DonutParserFree(pDonutParser ctx);
static void     DonutParserReset (pDonutParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return DonutParserNewSSD(instream, NULL);
}

/** \brief Create a new DonutParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDonutParser
DonutParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pDonutParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pDonutParser) ANTLR3_CALLOC(1, sizeof(DonutParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in DonutParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our DonutParser interface
     */
    ctx->source	= source;
    ctx->program	= program;
    ctx->exprlist	= exprlist;
    ctx->expr	= expr;
    ctx->expr8	= expr8;
    ctx->expr7	= expr7;
    ctx->expr6	= expr6;
    ctx->expr5	= expr5;
    ctx->expr4	= expr4;
    ctx->expr3	= expr3;
    ctx->expr2	= expr2;
    ctx->expr1	= expr1;
    ctx->term	= term;
    ctx->postfix	= postfix;
    ctx->primary	= primary;
    ctx->cond	= cond;
    ctx->block	= block;
    ctx->name	= name;
    ctx->varlist	= varlist;
    ctx->arglist	= arglist;
    ctx->array	= array;
    ctx->exprlist_for_literal	= exprlist_for_literal;
    ctx->object	= object;
    ctx->object_pair	= object_pair;
    ctx->literal	= literal;
    ctx->boolean_literal	= boolean_literal;
    ctx->numeric_literal	= numeric_literal;
    ctx->string_literal	= string_literal;
    ctx->synpred1_Donut	= synpred1_Donut;
    ctx->free			= DonutParserFree;
    ctx->reset			= DonutParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */
ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);

ctx->vectors	= antlr3VectorFactoryNew(0);
    /* Install the token table
     */
    PSRSTATE->tokenNames   = DonutParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
DonutParserReset (pDonutParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 DonutParserFree(pDonutParser ctx)
 {
    /* Free any scope memory
     */

ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return DonutParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_program_in_source191  */
static	ANTLR3_BITWORD FOLLOW_program_in_source191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_program_in_source191	= { FOLLOW_program_in_source191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_source193  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_source193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_source193	= { FOLLOW_EOF_in_source193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_program205  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_program205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_program205	= { FOLLOW_exprlist_in_program205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist223  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist223	= { FOLLOW_expr_in_exprlist223_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_exprlist228  */
static	ANTLR3_BITWORD FOLLOW_83_in_exprlist228_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8086620) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_exprlist228	= { FOLLOW_83_in_exprlist228_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist232  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist232	= { FOLLOW_expr_in_exprlist232_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_exprlist237  */
static	ANTLR3_BITWORD FOLLOW_83_in_exprlist237_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_exprlist237	= { FOLLOW_83_in_exprlist237_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr8_in_expr257  */
static	ANTLR3_BITWORD FOLLOW_expr8_in_expr257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr8_in_expr257	= { FOLLOW_expr8_in_expr257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cond_in_expr262  */
static	ANTLR3_BITWORD FOLLOW_cond_in_expr262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cond_in_expr262	= { FOLLOW_cond_in_expr262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_expr267  */
static	ANTLR3_BITWORD FOLLOW_94_in_expr267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_expr267	= { FOLLOW_94_in_expr267_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_expr269  */
static	ANTLR3_BITWORD FOLLOW_69_in_expr269_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8086620) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_expr269	= { FOLLOW_69_in_expr269_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr273  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr273	= { FOLLOW_expr_in_expr273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_expr276  */
static	ANTLR3_BITWORD FOLLOW_83_in_expr276_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8086620) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_expr276	= { FOLLOW_83_in_expr276_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr280  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr280	= { FOLLOW_expr_in_expr280_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_expr283  */
static	ANTLR3_BITWORD FOLLOW_83_in_expr283_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006660) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_expr283	= { FOLLOW_83_in_expr283_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr287  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr287	= { FOLLOW_expr_in_expr287_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_expr290  */
static	ANTLR3_BITWORD FOLLOW_70_in_expr290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_expr290	= { FOLLOW_70_in_expr290_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_expr294  */
static	ANTLR3_BITWORD FOLLOW_block_in_expr294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_expr294	= { FOLLOW_block_in_expr294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_expr332  */
static	ANTLR3_BITWORD FOLLOW_96_in_expr332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_expr332	= { FOLLOW_96_in_expr332_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_expr334  */
static	ANTLR3_BITWORD FOLLOW_69_in_expr334_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006660) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_expr334	= { FOLLOW_69_in_expr334_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr338  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr338	= { FOLLOW_expr_in_expr338_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_expr341  */
static	ANTLR3_BITWORD FOLLOW_70_in_expr341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_expr341	= { FOLLOW_70_in_expr341_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_expr345  */
static	ANTLR3_BITWORD FOLLOW_block_in_expr345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_expr345	= { FOLLOW_block_in_expr345_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_expr374  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_expr374_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_expr374	= { FOLLOW_RETURN_in_expr374_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr376  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr376	= { FOLLOW_expr_in_expr376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERRUPT_in_expr389  */
static	ANTLR3_BITWORD FOLLOW_INTERRUPT_in_expr389_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERRUPT_in_expr389	= { FOLLOW_INTERRUPT_in_expr389_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr391  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr391	= { FOLLOW_expr_in_expr391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr7_in_expr8412  */
static	ANTLR3_BITWORD FOLLOW_expr7_in_expr8412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000448904) };
static  ANTLR3_BITSET_LIST FOLLOW_expr7_in_expr8412	= { FOLLOW_expr7_in_expr8412_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_expr8421  */
static	ANTLR3_BITWORD FOLLOW_86_in_expr8421_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_expr8421	= { FOLLOW_86_in_expr8421_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8426  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8426	= { FOLLOW_expr_in_expr8426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_75_in_expr8443  */
static	ANTLR3_BITWORD FOLLOW_75_in_expr8443_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_75_in_expr8443	= { FOLLOW_75_in_expr8443_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8447  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8447	= { FOLLOW_expr_in_expr8447_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_79_in_expr8466  */
static	ANTLR3_BITWORD FOLLOW_79_in_expr8466_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_79_in_expr8466	= { FOLLOW_79_in_expr8466_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8470  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8470	= { FOLLOW_expr_in_expr8470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_72_in_expr8489  */
static	ANTLR3_BITWORD FOLLOW_72_in_expr8489_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_72_in_expr8489	= { FOLLOW_72_in_expr8489_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8493  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8493	= { FOLLOW_expr_in_expr8493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_expr8512  */
static	ANTLR3_BITWORD FOLLOW_82_in_expr8512_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_expr8512	= { FOLLOW_82_in_expr8512_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8516  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8516	= { FOLLOW_expr_in_expr8516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_expr8535  */
static	ANTLR3_BITWORD FOLLOW_66_in_expr8535_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_expr8535	= { FOLLOW_66_in_expr8535_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr8539  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr8539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr8539	= { FOLLOW_expr_in_expr8539_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr7569  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr7569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr7569	= { FOLLOW_expr6_in_expr7569_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expr7576  */
static	ANTLR3_BITWORD FOLLOW_98_in_expr7576_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expr7576	= { FOLLOW_98_in_expr7576_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr6_in_expr7580  */
static	ANTLR3_BITWORD FOLLOW_expr6_in_expr7580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr6_in_expr7580	= { FOLLOW_expr6_in_expr7580_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6604  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6604	= { FOLLOW_expr5_in_expr6604_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_68_in_expr6611  */
static	ANTLR3_BITWORD FOLLOW_68_in_expr6611_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_68_in_expr6611	= { FOLLOW_68_in_expr6611_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr5_in_expr6615  */
static	ANTLR3_BITWORD FOLLOW_expr5_in_expr6615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expr5_in_expr6615	= { FOLLOW_expr5_in_expr6615_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5639  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5639	= { FOLLOW_expr4_in_expr5639_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_99_in_expr5646  */
static	ANTLR3_BITWORD FOLLOW_99_in_expr5646_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_99_in_expr5646	= { FOLLOW_99_in_expr5646_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr4_in_expr5650  */
static	ANTLR3_BITWORD FOLLOW_expr4_in_expr5650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr4_in_expr5650	= { FOLLOW_expr4_in_expr5650_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4674  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4674	= { FOLLOW_expr3_in_expr4674_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_expr4681  */
static	ANTLR3_BITWORD FOLLOW_67_in_expr4681_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_expr4681	= { FOLLOW_67_in_expr4681_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr3_in_expr4685  */
static	ANTLR3_BITWORD FOLLOW_expr3_in_expr4685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr3_in_expr4685	= { FOLLOW_expr3_in_expr4685_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3710  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3710_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000006B00001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3710	= { FOLLOW_expr2_in_expr3710_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_expr3720  */
static	ANTLR3_BITWORD FOLLOW_84_in_expr3720_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_expr3720	= { FOLLOW_84_in_expr3720_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3724  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000006B00001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3724	= { FOLLOW_expr2_in_expr3724_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_89_in_expr3741  */
static	ANTLR3_BITWORD FOLLOW_89_in_expr3741_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_89_in_expr3741	= { FOLLOW_89_in_expr3741_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3745  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000006B00001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3745	= { FOLLOW_expr2_in_expr3745_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_expr3762  */
static	ANTLR3_BITWORD FOLLOW_87_in_expr3762_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_expr3762	= { FOLLOW_87_in_expr3762_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3766  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000006B00001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3766	= { FOLLOW_expr2_in_expr3766_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_expr3783  */
static	ANTLR3_BITWORD FOLLOW_64_in_expr3783_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_expr3783	= { FOLLOW_64_in_expr3783_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3787  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000006B00001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3787	= { FOLLOW_expr2_in_expr3787_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_85_in_expr3804  */
static	ANTLR3_BITWORD FOLLOW_85_in_expr3804_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_85_in_expr3804	= { FOLLOW_85_in_expr3804_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3808  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000006B00001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3808	= { FOLLOW_expr2_in_expr3808_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_expr3825  */
static	ANTLR3_BITWORD FOLLOW_90_in_expr3825_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_expr3825	= { FOLLOW_90_in_expr3825_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr2_in_expr3829  */
static	ANTLR3_BITWORD FOLLOW_expr2_in_expr3829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000006B00001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr2_in_expr3829	= { FOLLOW_expr2_in_expr3829_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2856  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002200) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2856	= { FOLLOW_expr1_in_expr2856_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_73_in_expr2865  */
static	ANTLR3_BITWORD FOLLOW_73_in_expr2865_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_73_in_expr2865	= { FOLLOW_73_in_expr2865_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2869  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002200) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2869	= { FOLLOW_expr1_in_expr2869_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_expr2886  */
static	ANTLR3_BITWORD FOLLOW_77_in_expr2886_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_expr2886	= { FOLLOW_77_in_expr2886_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr1_in_expr2890  */
static	ANTLR3_BITWORD FOLLOW_expr1_in_expr2890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002200) };
static  ANTLR3_BITSET_LIST FOLLOW_expr1_in_expr2890	= { FOLLOW_expr1_in_expr2890_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1918  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020082) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1918	= { FOLLOW_term_in_expr1918_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_71_in_expr1927  */
static	ANTLR3_BITWORD FOLLOW_71_in_expr1927_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_71_in_expr1927	= { FOLLOW_71_in_expr1927_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1931  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020082) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1931	= { FOLLOW_term_in_expr1931_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_81_in_expr1948  */
static	ANTLR3_BITWORD FOLLOW_81_in_expr1948_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_81_in_expr1948	= { FOLLOW_81_in_expr1948_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1952  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020082) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1952	= { FOLLOW_term_in_expr1952_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_expr1969  */
static	ANTLR3_BITWORD FOLLOW_65_in_expr1969_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_expr1969	= { FOLLOW_65_in_expr1969_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expr1973  */
static	ANTLR3_BITWORD FOLLOW_term_in_expr1973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020082) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expr1973	= { FOLLOW_term_in_expr1973_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_term998  */
static	ANTLR3_BITWORD FOLLOW_74_in_term998_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_term998	= { FOLLOW_74_in_term998_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1000  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1000_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1000	= { FOLLOW_term_in_term1000_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_term1015  */
static	ANTLR3_BITWORD FOLLOW_78_in_term1015_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_term1015	= { FOLLOW_78_in_term1015_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1017  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1017	= { FOLLOW_term_in_term1017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_73_in_term1032  */
static	ANTLR3_BITWORD FOLLOW_73_in_term1032_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_73_in_term1032	= { FOLLOW_73_in_term1032_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1034  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1034	= { FOLLOW_term_in_term1034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_term1047  */
static	ANTLR3_BITWORD FOLLOW_77_in_term1047_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_term1047	= { FOLLOW_77_in_term1047_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1049  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1049	= { FOLLOW_term_in_term1049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_term1062  */
static	ANTLR3_BITWORD FOLLOW_63_in_term1062_bits[]	= { ANTLR3_UINT64_LIT(0x92C04816B0000000), ANTLR3_UINT64_LIT(0x0000000208006620) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_term1062	= { FOLLOW_63_in_term1062_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_term1064  */
static	ANTLR3_BITWORD FOLLOW_term_in_term1064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_term1064	= { FOLLOW_term_in_term1064_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_in_term1077  */
static	ANTLR3_BITWORD FOLLOW_postfix_in_term1077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_in_term1077	= { FOLLOW_postfix_in_term1077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_in_postfix1090  */
static	ANTLR3_BITWORD FOLLOW_primary_in_postfix1090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008014420) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_in_postfix1090	= { FOLLOW_primary_in_postfix1090_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_postfix1099  */
static	ANTLR3_BITWORD FOLLOW_74_in_postfix1099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008014420) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_postfix1099	= { FOLLOW_74_in_postfix1099_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_postfix1115  */
static	ANTLR3_BITWORD FOLLOW_78_in_postfix1115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008014420) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_postfix1115	= { FOLLOW_78_in_postfix1115_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_80_in_postfix1131  */
static	ANTLR3_BITWORD FOLLOW_80_in_postfix1131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_80_in_postfix1131	= { FOLLOW_80_in_postfix1131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_postfix1135  */
static	ANTLR3_BITWORD FOLLOW_name_in_postfix1135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008014420) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_postfix1135	= { FOLLOW_name_in_postfix1135_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_postfix1152  */
static	ANTLR3_BITWORD FOLLOW_91_in_postfix1152_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_postfix1152	= { FOLLOW_91_in_postfix1152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_postfix1156  */
static	ANTLR3_BITWORD FOLLOW_expr_in_postfix1156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_postfix1156	= { FOLLOW_expr_in_postfix1156_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_postfix1158  */
static	ANTLR3_BITWORD FOLLOW_92_in_postfix1158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008014420) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_postfix1158	= { FOLLOW_92_in_postfix1158_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_postfix1175  */
static	ANTLR3_BITWORD FOLLOW_69_in_postfix1175_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_postfix1175	= { FOLLOW_69_in_postfix1175_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_postfix1179  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_postfix1179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_postfix1179	= { FOLLOW_arglist_in_postfix1179_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_postfix1181  */
static	ANTLR3_BITWORD FOLLOW_70_in_postfix1181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000008014420) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_postfix1181	= { FOLLOW_70_in_postfix1181_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primary1207  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primary1207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primary1207	= { FOLLOW_literal_in_primary1207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_primary1212  */
static	ANTLR3_BITWORD FOLLOW_array_in_primary1212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_primary1212	= { FOLLOW_array_in_primary1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELF_in_primary1217  */
static	ANTLR3_BITWORD FOLLOW_SELF_in_primary1217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SELF_in_primary1217	= { FOLLOW_SELF_in_primary1217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_primary1222  */
static	ANTLR3_BITWORD FOLLOW_name_in_primary1222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_primary1222	= { FOLLOW_name_in_primary1222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_primary1237  */
static	ANTLR3_BITWORD FOLLOW_69_in_primary1237_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_primary1237	= { FOLLOW_69_in_primary1237_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_primary1239  */
static	ANTLR3_BITWORD FOLLOW_expr_in_primary1239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_primary1239	= { FOLLOW_expr_in_primary1239_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_primary1241  */
static	ANTLR3_BITWORD FOLLOW_70_in_primary1241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_primary1241	= { FOLLOW_70_in_primary1241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_in_primary1255  */
static	ANTLR3_BITWORD FOLLOW_object_in_primary1255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_in_primary1255	= { FOLLOW_object_in_primary1255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_primary1260  */
static	ANTLR3_BITWORD FOLLOW_block_in_primary1260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_primary1260	= { FOLLOW_block_in_primary1260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_cond1271  */
static	ANTLR3_BITWORD FOLLOW_95_in_cond1271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_cond1271	= { FOLLOW_95_in_cond1271_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_cond1273  */
static	ANTLR3_BITWORD FOLLOW_69_in_cond1273_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_cond1273	= { FOLLOW_69_in_cond1273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_cond1275  */
static	ANTLR3_BITWORD FOLLOW_expr_in_cond1275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_cond1275	= { FOLLOW_expr_in_cond1275_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_cond1277  */
static	ANTLR3_BITWORD FOLLOW_70_in_cond1277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_cond1277	= { FOLLOW_70_in_cond1277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_cond1281  */
static	ANTLR3_BITWORD FOLLOW_block_in_cond1281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_cond1281	= { FOLLOW_block_in_cond1281_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_cond1283  */
static	ANTLR3_BITWORD FOLLOW_93_in_cond1283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000280000000) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_cond1283	= { FOLLOW_93_in_cond1283_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_cond1290  */
static	ANTLR3_BITWORD FOLLOW_block_in_cond1290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_cond1290	= { FOLLOW_block_in_cond1290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cond_in_cond1311  */
static	ANTLR3_BITWORD FOLLOW_cond_in_cond1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cond_in_cond1311	= { FOLLOW_cond_in_cond1311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_block1338  */
static	ANTLR3_BITWORD FOLLOW_97_in_block1338_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000013C8086620) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_block1338	= { FOLLOW_97_in_block1338_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_in_block1340  */
static	ANTLR3_BITWORD FOLLOW_exprlist_in_block1340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_in_block1340	= { FOLLOW_exprlist_in_block1340_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_100_in_block1342  */
static	ANTLR3_BITWORD FOLLOW_100_in_block1342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_100_in_block1342	= { FOLLOW_100_in_block1342_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_name1354  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_name1354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_name1354	= { FOLLOW_IDENT_in_name1354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1363  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1363	= { FOLLOW_name_in_varlist1363_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_varlist1367  */
static	ANTLR3_BITWORD FOLLOW_76_in_varlist1367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_varlist1367	= { FOLLOW_76_in_varlist1367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_varlist1370  */
static	ANTLR3_BITWORD FOLLOW_name_in_varlist1370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_varlist1370	= { FOLLOW_name_in_varlist1370_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_arglist1391  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_arglist1391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_arglist1391	= { FOLLOW_exprlist_for_literal_in_arglist1391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_array1406  */
static	ANTLR3_BITWORD FOLLOW_91_in_array1406_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003D8007620) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_array1406	= { FOLLOW_91_in_array1406_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exprlist_for_literal_in_array1408  */
static	ANTLR3_BITWORD FOLLOW_exprlist_for_literal_in_array1408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010001000) };
static  ANTLR3_BITSET_LIST FOLLOW_exprlist_for_literal_in_array1408	= { FOLLOW_exprlist_for_literal_in_array1408_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_array1410  */
static	ANTLR3_BITWORD FOLLOW_76_in_array1410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_array1410	= { FOLLOW_76_in_array1410_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_array1413  */
static	ANTLR3_BITWORD FOLLOW_92_in_array1413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_array1413	= { FOLLOW_92_in_array1413_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1429  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1429	= { FOLLOW_expr_in_exprlist_for_literal1429_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_exprlist_for_literal1432  */
static	ANTLR3_BITWORD FOLLOW_76_in_exprlist_for_literal1432_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_exprlist_for_literal1432	= { FOLLOW_76_in_exprlist_for_literal1432_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exprlist_for_literal1434  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exprlist_for_literal1434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exprlist_for_literal1434	= { FOLLOW_expr_in_exprlist_for_literal1434_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_object1451  */
static	ANTLR3_BITWORD FOLLOW_97_in_object1451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_object1451	= { FOLLOW_97_in_object1451_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1454  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1454	= { FOLLOW_object_pair_in_object1454_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_object1457  */
static	ANTLR3_BITWORD FOLLOW_76_in_object1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_object1457	= { FOLLOW_76_in_object1457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object1459  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object1459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object1459	= { FOLLOW_object_pair_in_object1459_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_object1464  */
static	ANTLR3_BITWORD FOLLOW_76_in_object1464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_object1464	= { FOLLOW_76_in_object1464_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_100_in_object1470  */
static	ANTLR3_BITWORD FOLLOW_100_in_object1470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_100_in_object1470	= { FOLLOW_100_in_object1470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_object_pair1486  */
static	ANTLR3_BITWORD FOLLOW_name_in_object_pair1486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_object_pair1486	= { FOLLOW_name_in_object_pair1486_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_object_pair1488  */
static	ANTLR3_BITWORD FOLLOW_88_in_object_pair1488_bits[]	= { ANTLR3_UINT64_LIT(0x92D0481EB0000000), ANTLR3_UINT64_LIT(0x00000003C8006620) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_object_pair1488	= { FOLLOW_88_in_object_pair1488_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_object_pair1490  */
static	ANTLR3_BITWORD FOLLOW_expr_in_object_pair1490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_object_pair1490	= { FOLLOW_expr_in_object_pair1490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numeric_literal_in_literal1509  */
static	ANTLR3_BITWORD FOLLOW_numeric_literal_in_literal1509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numeric_literal_in_literal1509	= { FOLLOW_numeric_literal_in_literal1509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_literal_in_literal1514  */
static	ANTLR3_BITWORD FOLLOW_boolean_literal_in_literal1514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_literal_in_literal1514	= { FOLLOW_boolean_literal_in_literal1514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_literal1519  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_literal1519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_literal1519	= { FOLLOW_string_literal_in_literal1519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NULL_LITERAL_in_literal1524  */
static	ANTLR3_BITWORD FOLLOW_NULL_LITERAL_in_literal1524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NULL_LITERAL_in_literal1524	= { FOLLOW_NULL_LITERAL_in_literal1524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNC_in_literal1529  */
static	ANTLR3_BITWORD FOLLOW_FUNC_in_literal1529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNC_in_literal1529	= { FOLLOW_FUNC_in_literal1529_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_69_in_literal1531  */
static	ANTLR3_BITWORD FOLLOW_69_in_literal1531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_69_in_literal1531	= { FOLLOW_69_in_literal1531_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_varlist_in_literal1533  */
static	ANTLR3_BITWORD FOLLOW_varlist_in_literal1533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_varlist_in_literal1533	= { FOLLOW_varlist_in_literal1533_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_70_in_literal1535  */
static	ANTLR3_BITWORD FOLLOW_70_in_literal1535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_70_in_literal1535	= { FOLLOW_70_in_literal1535_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_literal1537  */
static	ANTLR3_BITWORD FOLLOW_block_in_literal1537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_literal1537	= { FOLLOW_block_in_literal1537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_in_synpred1_Donut1251  */
static	ANTLR3_BITWORD FOLLOW_object_in_synpred1_Donut1251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_in_synpred1_Donut1251	= { FOLLOW_object_in_synpred1_Donut1251_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start source
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:59:1: source : program EOF -> program ;
 */
static DonutParser_source_return
source(pDonutParser ctx)
{
    DonutParser_source_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EOF2;
    DonutParser_program_return program1;
    #undef	RETURN_TYPE_program1
    #define	RETURN_TYPE_program1 DonutParser_program_return

    pANTLR3_BASE_TREE EOF2_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_program;
    /* Initialize rule variables
     */

    root_0 = NULL;

    EOF2       = NULL;
    program1.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    EOF2_tree   = NULL;

    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_program   = NULL;
    #define CREATE_stream_program  if (stream_program == NULL) {stream_program = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule program"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:59:8: ( program EOF -> program )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:59:10: program EOF
        {
            FOLLOWPUSH(FOLLOW_program_in_source191);
            program1=program(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_program; stream_program->add(stream_program, program1.tree, NULL); }

            EOF2 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_source193);
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF2, NULL); }


            /* AST REWRITE
             * elements          : program
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 59:22: -> program
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_program == NULL ? NULL : stream_program->nextTree(stream_program));

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulesourceEx; /* Prevent compiler warnings */
    rulesourceEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_program != NULL) stream_program->free(stream_program);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end source */

/**
 * $ANTLR start program
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:61:1: program : exprlist -> ^( CLOS VARS exprlist ) ;
 */
static DonutParser_program_return
program(pDonutParser ctx)
{
    DonutParser_program_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_return exprlist3;
    #undef	RETURN_TYPE_exprlist3
    #define	RETURN_TYPE_exprlist3 DonutParser_exprlist_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist3.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:61:9: ( exprlist -> ^( CLOS VARS exprlist ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:61:11: exprlist
        {
            FOLLOWPUSH(FOLLOW_exprlist_in_program205);
            exprlist3=exprlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist3.tree, NULL); }

            /* AST REWRITE
             * elements          : exprlist
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 61:20: -> ^( CLOS VARS exprlist )
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:61:23: ^( CLOS VARS exprlist )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end program */

/**
 * $ANTLR start exprlist
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:1: exprlist : ( expr )? ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) ;
 */
static DonutParser_exprlist_return
exprlist(pDonutParser ctx)
{
    DonutParser_exprlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal5;
    pANTLR3_COMMON_TOKEN    char_literal7;
    DonutParser_expr_return expr4;
    #undef	RETURN_TYPE_expr4
    #define	RETURN_TYPE_expr4 DonutParser_expr_return

    DonutParser_expr_return expr6;
    #undef	RETURN_TYPE_expr6
    #define	RETURN_TYPE_expr6 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal5_tree;
    pANTLR3_BASE_TREE char_literal7_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal5       = NULL;
    char_literal7       = NULL;
    expr4.tree = NULL;

    expr6.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal5_tree   = NULL;
    char_literal7_tree   = NULL;

    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:10: ( ( expr )? ( ( ';' )+ expr )* ( ';' )? -> ^( CONT ( expr )* ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:12: ( expr )? ( ( ';' )+ expr )* ( ';' )?
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:12: ( expr )?
            {
                int alt1=2;
                switch ( LA(1) )
                {
                    case FALSE_LITERAL:
                    case FLOAT_LITERAL:
                    case FUNC:
                    case HEX_LITERAL:
                    case IDENT:
                    case INTERRUPT:
                    case INT_LITERAL:
                    case NULL_LITERAL:
                    case OCT_LITERAL:
                    case RETURN:
                    case SELF:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case TRUE_LITERAL:
                    case 63:
                    case 69:
                    case 73:
                    case 74:
                    case 77:
                    case 78:
                    case 91:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:12: expr
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist223);
            	        expr4=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr4.tree, NULL); }

            	    }
            	    break;

                }
            }

            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:18: ( ( ';' )+ expr )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case 83:
                	{
                		switch ( LA(2) )
                		{
                		case FALSE_LITERAL:
                		case FLOAT_LITERAL:
                		case FUNC:
                		case HEX_LITERAL:
                		case IDENT:
                		case INTERRUPT:
                		case INT_LITERAL:
                		case NULL_LITERAL:
                		case OCT_LITERAL:
                		case RETURN:
                		case SELF:
                		case STRING_DOUBLE:
                		case STRING_SINGLE:
                		case TRUE_LITERAL:
                		case 63:
                		case 69:
                		case 73:
                		case 74:
                		case 77:
                		case 78:
                		case 83:
                		case 91:
                		case 94:
                		case 95:
                		case 96:
                		case 97:
                			{
                				alt3=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:19: ( ';' )+ expr
            	    {
            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:19: ( ';' )+
            	        {
            	            int cnt2=0;

            	            for (;;)
            	            {
            	                int alt2=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case 83:
            	        		{
            	        			alt2=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt2)
            	        	{
            	        	    case 1:
            	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:20: ';'
            	        	        {
            	        	            char_literal5 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_exprlist228);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruleexprlistEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return retval;
            	        	            }
            	        	             
            	        	            if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal5, NULL); }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt2 >= 1 )
            	        		{
            	        		    goto loop2;
            	        		}
            	        		if (BACKTRACKING>0)
            	        		{
            	        		    FAILEDFLAG = ANTLR3_TRUE;
            	        		    return retval;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleexprlistEx;
            	        	}
            	        	cnt2++;
            	            }
            	            loop2: ;	/* Jump to here if this rule does not match */
            	        }

            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist232);
            	        expr6=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:33: ( ';' )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case 83:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:34: ';'
            	    {
            	        char_literal7 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_exprlist237);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal7, NULL); }


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 63:40: -> ^( CONT ( expr )* )
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:43: ^( CONT ( expr )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
            	        , root_1));

            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:63:50: ( expr )*
            	        {
            	        	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	}
            	        	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlistEx; /* Prevent compiler warnings */
    ruleexprlistEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist */

/**
 * $ANTLR start expr
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:65:1: expr : ( expr8 | cond | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' fd= block -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd) | 'while' '(' (fb= expr )? ')' fd= block -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd) | RETURN expr -> ^( RETURN expr ) | INTERRUPT expr -> ^( INTERRUPT expr ) );
 */
static DonutParser_expr_return
expr(pDonutParser ctx)
{
    DonutParser_expr_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal10;
    pANTLR3_COMMON_TOKEN    char_literal11;
    pANTLR3_COMMON_TOKEN    char_literal12;
    pANTLR3_COMMON_TOKEN    char_literal13;
    pANTLR3_COMMON_TOKEN    char_literal14;
    pANTLR3_COMMON_TOKEN    string_literal15;
    pANTLR3_COMMON_TOKEN    char_literal16;
    pANTLR3_COMMON_TOKEN    char_literal17;
    pANTLR3_COMMON_TOKEN    RETURN18;
    pANTLR3_COMMON_TOKEN    INTERRUPT20;
    DonutParser_expr_return fa;
    #undef	RETURN_TYPE_fa
    #define	RETURN_TYPE_fa DonutParser_expr_return

    DonutParser_expr_return fb;
    #undef	RETURN_TYPE_fb
    #define	RETURN_TYPE_fb DonutParser_expr_return

    DonutParser_expr_return fc;
    #undef	RETURN_TYPE_fc
    #define	RETURN_TYPE_fc DonutParser_expr_return

    DonutParser_block_return fd;
    #undef	RETURN_TYPE_fd
    #define	RETURN_TYPE_fd DonutParser_block_return

    DonutParser_expr8_return expr88;
    #undef	RETURN_TYPE_expr88
    #define	RETURN_TYPE_expr88 DonutParser_expr8_return

    DonutParser_cond_return cond9;
    #undef	RETURN_TYPE_cond9
    #define	RETURN_TYPE_cond9 DonutParser_cond_return

    DonutParser_expr_return expr19;
    #undef	RETURN_TYPE_expr19
    #define	RETURN_TYPE_expr19 DonutParser_expr_return

    DonutParser_expr_return expr21;
    #undef	RETURN_TYPE_expr21
    #define	RETURN_TYPE_expr21 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal10_tree;
    pANTLR3_BASE_TREE char_literal11_tree;
    pANTLR3_BASE_TREE char_literal12_tree;
    pANTLR3_BASE_TREE char_literal13_tree;
    pANTLR3_BASE_TREE char_literal14_tree;
    pANTLR3_BASE_TREE string_literal15_tree;
    pANTLR3_BASE_TREE char_literal16_tree;
    pANTLR3_BASE_TREE char_literal17_tree;
    pANTLR3_BASE_TREE RETURN18_tree;
    pANTLR3_BASE_TREE INTERRUPT20_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_96;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INTERRUPT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_94;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RETURN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal10       = NULL;
    char_literal11       = NULL;
    char_literal12       = NULL;
    char_literal13       = NULL;
    char_literal14       = NULL;
    string_literal15       = NULL;
    char_literal16       = NULL;
    char_literal17       = NULL;
    RETURN18       = NULL;
    INTERRUPT20       = NULL;
    fa.tree = NULL;

    fb.tree = NULL;

    fc.tree = NULL;

    fd.tree = NULL;

    expr88.tree = NULL;

    cond9.tree = NULL;

    expr19.tree = NULL;

    expr21.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal10_tree   = NULL;
    char_literal11_tree   = NULL;
    char_literal12_tree   = NULL;
    char_literal13_tree   = NULL;
    char_literal14_tree   = NULL;
    string_literal15_tree   = NULL;
    char_literal16_tree   = NULL;
    char_literal17_tree   = NULL;
    RETURN18_tree   = NULL;
    INTERRUPT20_tree   = NULL;

    stream_96   = NULL;
    #define CREATE_stream_96  if (stream_96 == NULL) {stream_96 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 96"); } 
    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_INTERRUPT   = NULL;
    #define CREATE_stream_INTERRUPT  if (stream_INTERRUPT == NULL) {stream_INTERRUPT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INTERRUPT"); } 
    stream_94   = NULL;
    #define CREATE_stream_94  if (stream_94 == NULL) {stream_94 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 94"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_RETURN   = NULL;
    #define CREATE_stream_RETURN  if (stream_RETURN == NULL) {stream_RETURN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RETURN"); } 
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:66:2: ( expr8 | cond | 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' fd= block -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd) | 'while' '(' (fb= expr )? ')' fd= block -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd) | RETURN expr -> ^( RETURN expr ) | INTERRUPT expr -> ^( INTERRUPT expr ) )

            ANTLR3_UINT32 alt9;

            alt9=6;

            switch ( LA(1) )
            {
            case FALSE_LITERAL:
            case FLOAT_LITERAL:
            case FUNC:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case NULL_LITERAL:
            case OCT_LITERAL:
            case SELF:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case TRUE_LITERAL:
            case 63:
            case 69:
            case 73:
            case 74:
            case 77:
            case 78:
            case 91:
            case 97:
            	{
            		alt9=1;
            	}
                break;
            case 95:
            	{
            		alt9=2;
            	}
                break;
            case 94:
            	{
            		alt9=3;
            	}
                break;
            case 96:
            	{
            		alt9=4;
            	}
                break;
            case RETURN:
            	{
            		alt9=5;
            	}
                break;
            case INTERRUPT:
            	{
            		alt9=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto ruleexprEx;

            }

            switch (alt9)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:66:4: expr8
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_expr8_in_expr257);
        	        expr88=expr8(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr88.tree);

        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:67:4: cond
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_cond_in_expr262);
        	        cond9=cond(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cond9.tree);

        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:4: 'for' '(' (fa= expr )? ';' (fb= expr )? ';' (fc= expr )? ')' fd= block
        	    {
        	        string_literal10 = (pANTLR3_COMMON_TOKEN) MATCHT(94, &FOLLOW_94_in_expr267);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_94; stream_94->add(stream_94, string_literal10, NULL); }


        	        char_literal11 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_expr269);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_69; stream_69->add(stream_69, char_literal11, NULL); }


        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:16: (fa= expr )?
        	        {
        	            int alt5=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 63:
        	                case 69:
        	                case 73:
        	                case 74:
        	                case 77:
        	                case 78:
        	                case 91:
        	                case 94:
        	                case 95:
        	                case 96:
        	                case 97:
        	                	{
        	                		alt5=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt5)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:16: fa= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr273);
        	        	        fa=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fa.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal12 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_expr276);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal12, NULL); }


        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:29: (fb= expr )?
        	        {
        	            int alt6=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 63:
        	                case 69:
        	                case 73:
        	                case 74:
        	                case 77:
        	                case 78:
        	                case 91:
        	                case 94:
        	                case 95:
        	                case 96:
        	                case 97:
        	                	{
        	                		alt6=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:29: fb= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr280);
        	        	        fb=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fb.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal13 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_expr283);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal13, NULL); }


        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:42: (fc= expr )?
        	        {
        	            int alt7=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 63:
        	                case 69:
        	                case 73:
        	                case 74:
        	                case 77:
        	                case 78:
        	                case 91:
        	                case 94:
        	                case 95:
        	                case 96:
        	                case 97:
        	                	{
        	                		alt7=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt7)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:42: fc= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr287);
        	        	        fc=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fc.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_expr290);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal14, NULL); }


        	        FOLLOWPUSH(FOLLOW_block_in_expr294);
        	        fd=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, fd.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : fc, fd, fa, fb
        	         * token labels      : 
        	         * rule labels       : retval, fa, fd, fb, fc
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fa;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fd;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fb;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fc;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_fa=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fa", fa.tree != NULL ? fa.tree : NULL);
        	        	stream_fd=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fd", fd.tree != NULL ? fd.tree : NULL);
        	        	stream_fb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fb", fb.tree != NULL ? fb.tree : NULL);
        	        	stream_fc=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fc", fc.tree != NULL ? fc.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 68:62: -> ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd)
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:65: ^( FOR ^( CONT ( $fa)? ) ^( CONT ( $fb)? ) ^( CONT ( $fc)? ) $fd)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR")
        	        	        , root_1));

        	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:71: ^( CONT ( $fa)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:79: ( $fa)?
        	        	            {
        	        	            	if ( (stream_fa != NULL && stream_fa->hasNext(stream_fa))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fa == NULL ? NULL : stream_fa->nextTree(stream_fa));

        	        	            	}
        	        	            	if ( stream_fa != NULL) stream_fa->reset(stream_fa);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:84: ^( CONT ( $fb)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:92: ( $fb)?
        	        	            {
        	        	            	if ( (stream_fb != NULL && stream_fb->hasNext(stream_fb))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fb == NULL ? NULL : stream_fb->nextTree(stream_fb));

        	        	            	}
        	        	            	if ( stream_fb != NULL) stream_fb->reset(stream_fb);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:97: ^( CONT ( $fc)? )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:68:105: ( $fc)?
        	        	            {
        	        	            	if ( (stream_fc != NULL && stream_fc->hasNext(stream_fc))  )
        	        	            	{
        	        	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_fc == NULL ? NULL : stream_fc->nextTree(stream_fc));

        	        	            	}
        	        	            	if ( stream_fc != NULL) stream_fc->reset(stream_fc);

        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fd == NULL ? NULL : stream_fd->nextTree(stream_fd));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_fa != NULL) stream_fa->free(stream_fa);
        	        	if (stream_fd != NULL) stream_fd->free(stream_fd);
        	        	if (stream_fb != NULL) stream_fb->free(stream_fb);
        	        	if (stream_fc != NULL) stream_fc->free(stream_fc);


        	        }
        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:69:4: 'while' '(' (fb= expr )? ')' fd= block
        	    {
        	        string_literal15 = (pANTLR3_COMMON_TOKEN) MATCHT(96, &FOLLOW_96_in_expr332);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_96; stream_96->add(stream_96, string_literal15, NULL); }


        	        char_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_expr334);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_69; stream_69->add(stream_69, char_literal16, NULL); }


        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:69:18: (fb= expr )?
        	        {
        	            int alt8=2;
        	            switch ( LA(1) )
        	            {
        	                case FALSE_LITERAL:
        	                case FLOAT_LITERAL:
        	                case FUNC:
        	                case HEX_LITERAL:
        	                case IDENT:
        	                case INTERRUPT:
        	                case INT_LITERAL:
        	                case NULL_LITERAL:
        	                case OCT_LITERAL:
        	                case RETURN:
        	                case SELF:
        	                case STRING_DOUBLE:
        	                case STRING_SINGLE:
        	                case TRUE_LITERAL:
        	                case 63:
        	                case 69:
        	                case 73:
        	                case 74:
        	                case 77:
        	                case 78:
        	                case 91:
        	                case 94:
        	                case 95:
        	                case 96:
        	                case 97:
        	                	{
        	                		alt8=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt8)
        	            {
        	        	case 1:
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:69:18: fb= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_expr338);
        	        	        fb=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexprEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, fb.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        char_literal17 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_expr341);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal17, NULL); }


        	        FOLLOWPUSH(FOLLOW_block_in_expr345);
        	        fd=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, fd.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : fd, fb
        	         * token labels      : 
        	         * rule labels       : retval, fd, fb
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fd;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fb;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_fd=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fd", fd.tree != NULL ? fd.tree : NULL);
        	        	stream_fb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token fb", fb.tree != NULL ? fb.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 69:38: -> ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd)
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:69:41: ^( FOR ^( CONT ) ^( CONT $fb) ^( CONT ) $fd)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR")
        	        	        , root_1));

        	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:69:47: ^( CONT )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:69:55: ^( CONT $fb)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_fb == NULL ? NULL : stream_fb->nextTree(stream_fb));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:69:67: ^( CONT )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONT, (pANTLR3_UINT8)"CONT")
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_fd == NULL ? NULL : stream_fd->nextTree(stream_fd));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_fd != NULL) stream_fd->free(stream_fd);
        	        	if (stream_fb != NULL) stream_fb->free(stream_fb);


        	        }
        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:70:4: RETURN expr
        	    {
        	        RETURN18 = (pANTLR3_COMMON_TOKEN) MATCHT(RETURN, &FOLLOW_RETURN_in_expr374);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RETURN; stream_RETURN->add(stream_RETURN, RETURN18, NULL); }


        	        FOLLOWPUSH(FOLLOW_expr_in_expr376);
        	        expr19=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr19.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : RETURN, expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 70:16: -> ^( RETURN expr )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:70:19: ^( RETURN expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        stream_RETURN == NULL ? NULL : stream_RETURN->nextNode(stream_RETURN)
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:71:4: INTERRUPT expr
        	    {
        	        INTERRUPT20 = (pANTLR3_COMMON_TOKEN) MATCHT(INTERRUPT, &FOLLOW_INTERRUPT_in_expr389);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_INTERRUPT; stream_INTERRUPT->add(stream_INTERRUPT, INTERRUPT20, NULL); }


        	        FOLLOWPUSH(FOLLOW_expr_in_expr391);
        	        expr21=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr21.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : INTERRUPT, expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 71:19: -> ^( INTERRUPT expr )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:71:22: ^( INTERRUPT expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        stream_INTERRUPT == NULL ? NULL : stream_INTERRUPT->nextNode(stream_INTERRUPT)
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_96 != NULL) stream_96->free(stream_96);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_INTERRUPT != NULL) stream_INTERRUPT->free(stream_INTERRUPT);
        if (stream_94 != NULL) stream_94->free(stream_94);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_RETURN != NULL) stream_RETURN->free(stream_RETURN);
        if (stream_block != NULL) stream_block->free(stream_block);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr */

/**
 * $ANTLR start expr8
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:74:1: expr8 : (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )? ;
 */
static DonutParser_expr8_return
expr8(pDonutParser ctx)
{
    DonutParser_expr8_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal22;
    pANTLR3_COMMON_TOKEN    string_literal23;
    pANTLR3_COMMON_TOKEN    string_literal24;
    pANTLR3_COMMON_TOKEN    string_literal25;
    pANTLR3_COMMON_TOKEN    string_literal26;
    pANTLR3_COMMON_TOKEN    string_literal27;
    DonutParser_expr7_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr7_return

    DonutParser_expr_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal22_tree;
    pANTLR3_BASE_TREE string_literal23_tree;
    pANTLR3_BASE_TREE string_literal24_tree;
    pANTLR3_BASE_TREE string_literal25_tree;
    pANTLR3_BASE_TREE string_literal26_tree;
    pANTLR3_BASE_TREE string_literal27_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_79;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_66;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_72;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_75;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr7;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal22       = NULL;
    string_literal23       = NULL;
    string_literal24       = NULL;
    string_literal25       = NULL;
    string_literal26       = NULL;
    string_literal27       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal22_tree   = NULL;
    string_literal23_tree   = NULL;
    string_literal24_tree   = NULL;
    string_literal25_tree   = NULL;
    string_literal26_tree   = NULL;
    string_literal27_tree   = NULL;

    stream_79   = NULL;
    #define CREATE_stream_79  if (stream_79 == NULL) {stream_79 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 79"); } 
    stream_66   = NULL;
    #define CREATE_stream_66  if (stream_66 == NULL) {stream_66 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 66"); } 
    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_72   = NULL;
    #define CREATE_stream_72  if (stream_72 == NULL) {stream_72 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 72"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_75   = NULL;
    #define CREATE_stream_75  if (stream_75 == NULL) {stream_75 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 75"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_expr7   = NULL;
    #define CREATE_stream_expr7  if (stream_expr7 == NULL) {stream_expr7 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr7"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:74:7: ( (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )? )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:74:9: (a= expr7 -> $a) ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )?
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:74:9: (a= expr7 -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:74:10: a= expr7
            {
                FOLLOWPUSH(FOLLOW_expr7_in_expr8412);
                a=expr7(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr8Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr7; stream_expr7->add(stream_expr7, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 74:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:75:2: ( '=' b= expr -> ^( ASSIGN $expr8 $b) | '+=' b= expr -> ^( ASSIGN_OP ADD $expr8 $b) | '-=' b= expr -> ^( ASSIGN_OP SUB $expr8 $b) | '*=' b= expr -> ^( ASSIGN_OP MUL $expr8 $b) | '/=' b= expr -> ^( ASSIGN_OP DIV $expr8 $b) | '%=' b= expr -> ^( ASSIGN_OP MOD $expr8 $b) )?
            {
                int alt10=7;
                switch ( LA(1) )
                {
                    case 86:
                    	{
                    		alt10=1;
                    	}
                        break;
                    case 75:
                    	{
                    		alt10=2;
                    	}
                        break;
                    case 79:
                    	{
                    		alt10=3;
                    	}
                        break;
                    case 72:
                    	{
                    		alt10=4;
                    	}
                        break;
                    case 82:
                    	{
                    		alt10=5;
                    	}
                        break;
                    case 66:
                    	{
                    		alt10=6;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:75:4: '=' b= expr
            	    {
            	        char_literal22 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_expr8421);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal22, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8426);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr8
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 75:16: -> ^( ASSIGN $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:75:19: ^( ASSIGN $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:76:4: '+=' b= expr
            	    {
            	        string_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(75, &FOLLOW_75_in_expr8443);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_75; stream_75->add(stream_75, string_literal23, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8447);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr8
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 76:16: -> ^( ASSIGN_OP ADD $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:76:19: ^( ASSIGN_OP ADD $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:77:4: '-=' b= expr
            	    {
            	        string_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(79, &FOLLOW_79_in_expr8466);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_79; stream_79->add(stream_79, string_literal24, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8470);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr8
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 77:16: -> ^( ASSIGN_OP SUB $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:77:19: ^( ASSIGN_OP SUB $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:78:4: '*=' b= expr
            	    {
            	        string_literal25 = (pANTLR3_COMMON_TOKEN) MATCHT(72, &FOLLOW_72_in_expr8489);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_72; stream_72->add(stream_72, string_literal25, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8493);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 78:16: -> ^( ASSIGN_OP MUL $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:78:19: ^( ASSIGN_OP MUL $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:79:4: '/=' b= expr
            	    {
            	        string_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_expr8512);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_82; stream_82->add(stream_82, string_literal26, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8516);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 79:16: -> ^( ASSIGN_OP DIV $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:79:19: ^( ASSIGN_OP DIV $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:80:4: '%=' b= expr
            	    {
            	        string_literal27 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_expr8535);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_66; stream_66->add(stream_66, string_literal27, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_expr8539);
            	        b=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr8Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr8, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 80:16: -> ^( ASSIGN_OP MOD $expr8 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:80:19: ^( ASSIGN_OP MOD $expr8 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_OP, (pANTLR3_UINT8)"ASSIGN_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr8Ex; /* Prevent compiler warnings */
    ruleexpr8Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_79 != NULL) stream_79->free(stream_79);
        if (stream_66 != NULL) stream_66->free(stream_66);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_72 != NULL) stream_72->free(stream_72);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_75 != NULL) stream_75->free(stream_75);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_expr7 != NULL) stream_expr7->free(stream_expr7);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr8 */

/**
 * $ANTLR start expr7
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:1: expr7 : (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )* ;
 */
static DonutParser_expr7_return
expr7(pDonutParser ctx)
{
    DonutParser_expr7_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal28;
    DonutParser_expr6_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr6_return

    DonutParser_expr6_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr6_return

    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_98;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr6;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal28       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal28_tree   = NULL;

    stream_98   = NULL;
    #define CREATE_stream_98  if (stream_98 == NULL) {stream_98 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 98"); } 
    stream_expr6   = NULL;
    #define CREATE_stream_expr6  if (stream_expr6 == NULL) {stream_expr6 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr6"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:7: ( (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:9: (a= expr6 -> $a) ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:9: (a= expr6 -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:10: a= expr6
            {
                FOLLOWPUSH(FOLLOW_expr6_in_expr7569);
                a=expr6(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr7Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr6; stream_expr6->add(stream_expr6, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 84:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:23: ( '|' b= expr6 -> ^( BIT_OR $expr7 $b) )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) )
                {
                case 98:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:24: '|' b= expr6
            	    {
            	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_expr7576);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr7Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_98; stream_98->add(stream_98, char_literal28, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr6_in_expr7580);
            	        b=expr6(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr7Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr6; stream_expr6->add(stream_expr6, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr7
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 84:36: -> ^( BIT_OR $expr7 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:84:39: ^( BIT_OR $expr7 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr7Ex; /* Prevent compiler warnings */
    ruleexpr7Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_98 != NULL) stream_98->free(stream_98);
        if (stream_expr6 != NULL) stream_expr6->free(stream_expr6);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr7 */

/**
 * $ANTLR start expr6
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:1: expr6 : (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )* ;
 */
static DonutParser_expr6_return
expr6(pDonutParser ctx)
{
    DonutParser_expr6_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal29;
    DonutParser_expr5_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr5_return

    DonutParser_expr5_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr5_return

    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_68;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr5;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal29       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal29_tree   = NULL;

    stream_68   = NULL;
    #define CREATE_stream_68  if (stream_68 == NULL) {stream_68 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 68"); } 
    stream_expr5   = NULL;
    #define CREATE_stream_expr5  if (stream_expr5 == NULL) {stream_expr5 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr5"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:7: ( (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:9: (a= expr5 -> $a) ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:9: (a= expr5 -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:10: a= expr5
            {
                FOLLOWPUSH(FOLLOW_expr5_in_expr6604);
                a=expr5(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr6Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr5; stream_expr5->add(stream_expr5, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 85:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:23: ( '&' b= expr5 -> ^( BIT_AND $expr6 $b) )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case 68:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:24: '&' b= expr5
            	    {
            	        char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(68, &FOLLOW_68_in_expr6611);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_68; stream_68->add(stream_68, char_literal29, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr5_in_expr6615);
            	        b=expr5(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr6Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr5; stream_expr5->add(stream_expr5, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr6
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 85:36: -> ^( BIT_AND $expr6 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:85:39: ^( BIT_AND $expr6 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr6Ex; /* Prevent compiler warnings */
    ruleexpr6Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_68 != NULL) stream_68->free(stream_68);
        if (stream_expr5 != NULL) stream_expr5->free(stream_expr5);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr6 */

/**
 * $ANTLR start expr5
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:1: expr5 : (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* ;
 */
static DonutParser_expr5_return
expr5(pDonutParser ctx)
{
    DonutParser_expr5_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal30;
    DonutParser_expr4_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr4_return

    DonutParser_expr4_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr4_return

    pANTLR3_BASE_TREE string_literal30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_99;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr4;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal30       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal30_tree   = NULL;

    stream_99   = NULL;
    #define CREATE_stream_99  if (stream_99 == NULL) {stream_99 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 99"); } 
    stream_expr4   = NULL;
    #define CREATE_stream_expr4  if (stream_expr4 == NULL) {stream_expr4 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr4"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:7: ( (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:9: (a= expr4 -> $a) ( '||' b= expr4 -> ^( OR $expr5 $b) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:9: (a= expr4 -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:10: a= expr4
            {
                FOLLOWPUSH(FOLLOW_expr4_in_expr5639);
                a=expr4(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr5Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr4; stream_expr4->add(stream_expr4, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 86:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:23: ( '||' b= expr4 -> ^( OR $expr5 $b) )*

            for (;;)
            {
                int alt13=2;
                switch ( LA(1) )
                {
                case 99:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:24: '||' b= expr4
            	    {
            	        string_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(99, &FOLLOW_99_in_expr5646);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_99; stream_99->add(stream_99, string_literal30, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr4_in_expr5650);
            	        b=expr4(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr5Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr4; stream_expr4->add(stream_expr4, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr5
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 86:37: -> ^( OR $expr5 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:86:40: ^( OR $expr5 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr5Ex; /* Prevent compiler warnings */
    ruleexpr5Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_99 != NULL) stream_99->free(stream_99);
        if (stream_expr4 != NULL) stream_expr4->free(stream_expr4);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr5 */

/**
 * $ANTLR start expr4
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:1: expr4 : (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* ;
 */
static DonutParser_expr4_return
expr4(pDonutParser ctx)
{
    DonutParser_expr4_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal31;
    DonutParser_expr3_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr3_return

    DonutParser_expr3_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr3_return

    pANTLR3_BASE_TREE string_literal31_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_67;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr3;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal31       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal31_tree   = NULL;

    stream_67   = NULL;
    #define CREATE_stream_67  if (stream_67 == NULL) {stream_67 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 67"); } 
    stream_expr3   = NULL;
    #define CREATE_stream_expr3  if (stream_expr3 == NULL) {stream_expr3 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr3"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:7: ( (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:9: (a= expr3 -> $a) ( '&&' b= expr3 -> ^( AND $expr4 $b) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:9: (a= expr3 -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:10: a= expr3
            {
                FOLLOWPUSH(FOLLOW_expr3_in_expr4674);
                a=expr3(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr4Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr3; stream_expr3->add(stream_expr3, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 87:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:23: ( '&&' b= expr3 -> ^( AND $expr4 $b) )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) )
                {
                case 67:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:24: '&&' b= expr3
            	    {
            	        string_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_expr4681);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_67; stream_67->add(stream_67, string_literal31, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr3_in_expr4685);
            	        b=expr3(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr4Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr3; stream_expr3->add(stream_expr3, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr4
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 87:37: -> ^( AND $expr4 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:87:40: ^( AND $expr4 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr4Ex; /* Prevent compiler warnings */
    ruleexpr4Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_67 != NULL) stream_67->free(stream_67);
        if (stream_expr3 != NULL) stream_expr3->free(stream_expr3);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr4 */

/**
 * $ANTLR start expr3
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:89:1: expr3 : (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* ;
 */
static DonutParser_expr3_return
expr3(pDonutParser ctx)
{
    DonutParser_expr3_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    string_literal34;
    pANTLR3_COMMON_TOKEN    string_literal35;
    pANTLR3_COMMON_TOKEN    string_literal36;
    pANTLR3_COMMON_TOKEN    string_literal37;
    DonutParser_expr2_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr2_return

    DonutParser_expr2_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr2_return

    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE string_literal34_tree;
    pANTLR3_BASE_TREE string_literal35_tree;
    pANTLR3_BASE_TREE string_literal36_tree;
    pANTLR3_BASE_TREE string_literal37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_64;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_84;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_89;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_85;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal32       = NULL;
    char_literal33       = NULL;
    string_literal34       = NULL;
    string_literal35       = NULL;
    string_literal36       = NULL;
    string_literal37       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal32_tree   = NULL;
    char_literal33_tree   = NULL;
    string_literal34_tree   = NULL;
    string_literal35_tree   = NULL;
    string_literal36_tree   = NULL;
    string_literal37_tree   = NULL;

    stream_64   = NULL;
    #define CREATE_stream_64  if (stream_64 == NULL) {stream_64 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 64"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_84   = NULL;
    #define CREATE_stream_84  if (stream_84 == NULL) {stream_84 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 84"); } 
    stream_89   = NULL;
    #define CREATE_stream_89  if (stream_89 == NULL) {stream_89 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 89"); } 
    stream_85   = NULL;
    #define CREATE_stream_85  if (stream_85 == NULL) {stream_85 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 85"); } 
    stream_expr2   = NULL;
    #define CREATE_stream_expr2  if (stream_expr2 == NULL) {stream_expr2 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr2"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:89:7: ( (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:89:9: (a= expr2 -> $a) ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:89:9: (a= expr2 -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:89:10: a= expr2
            {
                FOLLOWPUSH(FOLLOW_expr2_in_expr3710);
                a=expr2(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr3Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 89:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:90:2: ( '<' b= expr2 -> ^( CLT $expr3 $b) | '>' b= expr2 -> ^( CGT $expr3 $b) | '==' b= expr2 -> ^( CEQ $expr3 $b) | '!=' b= expr2 -> ^( CNE $expr3 $b) | '<=' b= expr2 -> ^( CLE $expr3 $b) | '>=' b= expr2 -> ^( CGE $expr3 $b) )*

            for (;;)
            {
                int alt15=7;
                switch ( LA(1) )
                {
                case 84:
                	{
                		alt15=1;
                	}
                    break;
                case 89:
                	{
                		alt15=2;
                	}
                    break;
                case 87:
                	{
                		alt15=3;
                	}
                    break;
                case 64:
                	{
                		alt15=4;
                	}
                    break;
                case 85:
                	{
                		alt15=5;
                	}
                    break;
                case 90:
                	{
                		alt15=6;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:90:4: '<' b= expr2
            	    {
            	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_expr3720);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_84; stream_84->add(stream_84, char_literal32, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3724);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 90:16: -> ^( CLT $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:90:19: ^( CLT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLT, (pANTLR3_UINT8)"CLT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:91:4: '>' b= expr2
            	    {
            	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(89, &FOLLOW_89_in_expr3741);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_89; stream_89->add(stream_89, char_literal33, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3745);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 91:16: -> ^( CGT $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:91:19: ^( CGT $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGT, (pANTLR3_UINT8)"CGT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:92:4: '==' b= expr2
            	    {
            	        string_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_expr3762);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, string_literal34, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3766);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 92:17: -> ^( CEQ $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:92:20: ^( CEQ $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CEQ, (pANTLR3_UINT8)"CEQ")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 4:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:93:4: '!=' b= expr2
            	    {
            	        string_literal35 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_expr3783);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_64; stream_64->add(stream_64, string_literal35, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3787);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 93:17: -> ^( CNE $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:93:20: ^( CNE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CNE, (pANTLR3_UINT8)"CNE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 5:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:94:4: '<=' b= expr2
            	    {
            	        string_literal36 = (pANTLR3_COMMON_TOKEN) MATCHT(85, &FOLLOW_85_in_expr3804);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_85; stream_85->add(stream_85, string_literal36, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3808);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr3
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 94:17: -> ^( CLE $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:94:20: ^( CLE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLE, (pANTLR3_UINT8)"CLE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 6:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:95:4: '>=' b= expr2
            	    {
            	        string_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_expr3825);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_90; stream_90->add(stream_90, string_literal37, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr2_in_expr3829);
            	        b=expr2(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr2; stream_expr2->add(stream_expr2, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr3, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 95:17: -> ^( CGE $expr3 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:95:20: ^( CGE $expr3 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CGE, (pANTLR3_UINT8)"CGE")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr3Ex; /* Prevent compiler warnings */
    ruleexpr3Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_64 != NULL) stream_64->free(stream_64);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_84 != NULL) stream_84->free(stream_84);
        if (stream_89 != NULL) stream_89->free(stream_89);
        if (stream_85 != NULL) stream_85->free(stream_85);
        if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr3 */

/**
 * $ANTLR start expr2
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:98:1: expr2 : (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* ;
 */
static DonutParser_expr2_return
expr2(pDonutParser ctx)
{
    DonutParser_expr2_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal38;
    pANTLR3_COMMON_TOKEN    char_literal39;
    DonutParser_expr1_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_expr1_return

    DonutParser_expr1_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_expr1_return

    pANTLR3_BASE_TREE char_literal38_tree;
    pANTLR3_BASE_TREE char_literal39_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_73;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal38       = NULL;
    char_literal39       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal38_tree   = NULL;
    char_literal39_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_73   = NULL;
    #define CREATE_stream_73  if (stream_73 == NULL) {stream_73 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 73"); } 
    stream_expr1   = NULL;
    #define CREATE_stream_expr1  if (stream_expr1 == NULL) {stream_expr1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr1"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:98:7: ( (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:98:9: (a= expr1 -> $a) ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:98:9: (a= expr1 -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:98:10: a= expr1
            {
                FOLLOWPUSH(FOLLOW_expr1_in_expr2856);
                a=expr1(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr2Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_expr1; stream_expr1->add(stream_expr1, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 98:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:99:2: ( '+' b= expr1 -> ^( ADD $expr2 $b) | '-' b= expr1 -> ^( SUB $expr2 $b) )*

            for (;;)
            {
                int alt16=3;
                switch ( LA(1) )
                {
                case 73:
                	{
                		alt16=1;
                	}
                    break;
                case 77:
                	{
                		alt16=2;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:99:4: '+' b= expr1
            	    {
            	        char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(73, &FOLLOW_73_in_expr2865);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_73; stream_73->add(stream_73, char_literal38, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2869);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr2
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 99:16: -> ^( ADD $expr2 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:99:19: ^( ADD $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:100:4: '-' b= expr1
            	    {
            	        char_literal39 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_expr2886);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal39, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr1_in_expr2890);
            	        b=expr1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr1; stream_expr1->add(stream_expr1, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr2, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 100:16: -> ^( SUB $expr2 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:100:19: ^( SUB $expr2 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr2Ex; /* Prevent compiler warnings */
    ruleexpr2Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_73 != NULL) stream_73->free(stream_73);
        if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr2 */

/**
 * $ANTLR start expr1
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:103:1: expr1 : (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* ;
 */
static DonutParser_expr1_return
expr1(pDonutParser ctx)
{
    DonutParser_expr1_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal40;
    pANTLR3_COMMON_TOKEN    char_literal41;
    pANTLR3_COMMON_TOKEN    char_literal42;
    DonutParser_term_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_term_return

    DonutParser_term_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_term_return

    pANTLR3_BASE_TREE char_literal40_tree;
    pANTLR3_BASE_TREE char_literal41_tree;
    pANTLR3_BASE_TREE char_literal42_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_65;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_71;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_81;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal40       = NULL;
    char_literal41       = NULL;
    char_literal42       = NULL;
    a.tree = NULL;

    b.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal40_tree   = NULL;
    char_literal41_tree   = NULL;
    char_literal42_tree   = NULL;

    stream_65   = NULL;
    #define CREATE_stream_65  if (stream_65 == NULL) {stream_65 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 65"); } 
    stream_71   = NULL;
    #define CREATE_stream_71  if (stream_71 == NULL) {stream_71 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 71"); } 
    stream_81   = NULL;
    #define CREATE_stream_81  if (stream_81 == NULL) {stream_81 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 81"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:103:8: ( (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:103:10: (a= term -> $a) ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:103:10: (a= term -> $a)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:103:11: a= term
            {
                FOLLOWPUSH(FOLLOW_term_in_expr1918);
                a=term(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexpr1Ex;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, a.tree, NULL); }

                /* AST REWRITE
                 * elements          : a
                 * token labels      : 
                 * rule labels       : retval, a
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 103:17: -> $a
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_a != NULL) stream_a->free(stream_a);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:104:2: ( '*' b= term -> ^( MUL $expr1 $b) | '/' b= term -> ^( DIV $expr1 $b) | '%' b= term -> ^( MOD $expr1 $b) )*

            for (;;)
            {
                int alt17=4;
                switch ( LA(1) )
                {
                case 71:
                	{
                		alt17=1;
                	}
                    break;
                case 81:
                	{
                		alt17=2;
                	}
                    break;
                case 65:
                	{
                		alt17=3;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:104:4: '*' b= term
            	    {
            	        char_literal40 = (pANTLR3_COMMON_TOKEN) MATCHT(71, &FOLLOW_71_in_expr1927);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_71; stream_71->add(stream_71, char_literal40, NULL); }


            	        FOLLOWPUSH(FOLLOW_term_in_expr1931);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 104:15: -> ^( MUL $expr1 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:104:18: ^( MUL $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MUL, (pANTLR3_UINT8)"MUL")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:105:4: '/' b= term
            	    {
            	        char_literal41 = (pANTLR3_COMMON_TOKEN) MATCHT(81, &FOLLOW_81_in_expr1948);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_81; stream_81->add(stream_81, char_literal41, NULL); }


            	        FOLLOWPUSH(FOLLOW_term_in_expr1952);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr1
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 105:15: -> ^( DIV $expr1 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:105:18: ^( DIV $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:106:4: '%' b= term
            	    {
            	        char_literal42 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_expr1969);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_65; stream_65->add(stream_65, char_literal42, NULL); }


            	        FOLLOWPUSH(FOLLOW_term_in_expr1973);
            	        b=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : expr1, b
            	         * token labels      : 
            	         * rule labels       : retval, b
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 106:15: -> ^( MOD $expr1 $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:106:18: ^( MOD $expr1 $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpr1Ex; /* Prevent compiler warnings */
    ruleexpr1Ex: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_65 != NULL) stream_65->free(stream_65);
        if (stream_71 != NULL) stream_71->free(stream_71);
        if (stream_81 != NULL) stream_81->free(stream_81);
        if (stream_term != NULL) stream_term->free(stream_term);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expr1 */

/**
 * $ANTLR start term
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:109:1: term : ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix );
 */
static DonutParser_term_return
term(pDonutParser ctx)
{
    DonutParser_term_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal43;
    pANTLR3_COMMON_TOKEN    string_literal45;
    pANTLR3_COMMON_TOKEN    char_literal47;
    pANTLR3_COMMON_TOKEN    char_literal49;
    pANTLR3_COMMON_TOKEN    char_literal51;
    DonutParser_term_return term44;
    #undef	RETURN_TYPE_term44
    #define	RETURN_TYPE_term44 DonutParser_term_return

    DonutParser_term_return term46;
    #undef	RETURN_TYPE_term46
    #define	RETURN_TYPE_term46 DonutParser_term_return

    DonutParser_term_return term48;
    #undef	RETURN_TYPE_term48
    #define	RETURN_TYPE_term48 DonutParser_term_return

    DonutParser_term_return term50;
    #undef	RETURN_TYPE_term50
    #define	RETURN_TYPE_term50 DonutParser_term_return

    DonutParser_term_return term52;
    #undef	RETURN_TYPE_term52
    #define	RETURN_TYPE_term52 DonutParser_term_return

    DonutParser_postfix_return postfix53;
    #undef	RETURN_TYPE_postfix53
    #define	RETURN_TYPE_postfix53 DonutParser_postfix_return

    pANTLR3_BASE_TREE string_literal43_tree;
    pANTLR3_BASE_TREE string_literal45_tree;
    pANTLR3_BASE_TREE char_literal47_tree;
    pANTLR3_BASE_TREE char_literal49_tree;
    pANTLR3_BASE_TREE char_literal51_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_78;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_73;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_74;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_term;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal43       = NULL;
    string_literal45       = NULL;
    char_literal47       = NULL;
    char_literal49       = NULL;
    char_literal51       = NULL;
    term44.tree = NULL;

    term46.tree = NULL;

    term48.tree = NULL;

    term50.tree = NULL;

    term52.tree = NULL;

    postfix53.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal43_tree   = NULL;
    string_literal45_tree   = NULL;
    char_literal47_tree   = NULL;
    char_literal49_tree   = NULL;
    char_literal51_tree   = NULL;

    stream_78   = NULL;
    #define CREATE_stream_78  if (stream_78 == NULL) {stream_78 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 78"); } 
    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_73   = NULL;
    #define CREATE_stream_73  if (stream_73 == NULL) {stream_73 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 73"); } 
    stream_74   = NULL;
    #define CREATE_stream_74  if (stream_74 == NULL) {stream_74 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 74"); } 
    stream_term   = NULL;
    #define CREATE_stream_term  if (stream_term == NULL) {stream_term = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule term"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:110:2: ( '++' term -> ^( PRE_OP ADD term ) | '--' term -> ^( PRE_OP SUB term ) | '+' term -> ^( PLUS term ) | '-' term -> ^( MINUS term ) | '!' term -> ^( NOT term ) | postfix )

            ANTLR3_UINT32 alt18;

            alt18=6;

            switch ( LA(1) )
            {
            case 74:
            	{
            		alt18=1;
            	}
                break;
            case 78:
            	{
            		alt18=2;
            	}
                break;
            case 73:
            	{
            		alt18=3;
            	}
                break;
            case 77:
            	{
            		alt18=4;
            	}
                break;
            case 63:
            	{
            		alt18=5;
            	}
                break;
            case FALSE_LITERAL:
            case FLOAT_LITERAL:
            case FUNC:
            case HEX_LITERAL:
            case IDENT:
            case INT_LITERAL:
            case NULL_LITERAL:
            case OCT_LITERAL:
            case SELF:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case TRUE_LITERAL:
            case 69:
            case 91:
            case 97:
            	{
            		alt18=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto ruletermEx;

            }

            switch (alt18)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:110:4: '++' term
        	    {
        	        string_literal43 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_term998);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_74; stream_74->add(stream_74, string_literal43, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1000);
        	        term44=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term44.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 110:14: -> ^( PRE_OP ADD term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:110:17: ^( PRE_OP ADD term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:111:4: '--' term
        	    {
        	        string_literal45 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_term1015);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_78; stream_78->add(stream_78, string_literal45, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1017);
        	        term46=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term46.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 111:14: -> ^( PRE_OP SUB term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:111:17: ^( PRE_OP SUB term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PRE_OP, (pANTLR3_UINT8)"PRE_OP")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:112:4: '+' term
        	    {
        	        char_literal47 = (pANTLR3_COMMON_TOKEN) MATCHT(73, &FOLLOW_73_in_term1032);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_73; stream_73->add(stream_73, char_literal47, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1034);
        	        term48=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term48.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 112:13: -> ^( PLUS term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:112:16: ^( PLUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUS, (pANTLR3_UINT8)"PLUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:113:4: '-' term
        	    {
        	        char_literal49 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_term1047);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal49, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1049);
        	        term50=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term50.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 113:13: -> ^( MINUS term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:113:16: ^( MINUS term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUS, (pANTLR3_UINT8)"MINUS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:114:4: '!' term
        	    {
        	        char_literal51 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_term1062);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_63; stream_63->add(stream_63, char_literal51, NULL); }


        	        FOLLOWPUSH(FOLLOW_term_in_term1064);
        	        term52=term(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_term; stream_term->add(stream_term, term52.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : term
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 114:13: -> ^( NOT term )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:114:16: ^( NOT term )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_term == NULL ? NULL : stream_term->nextTree(stream_term));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:115:4: postfix
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_postfix_in_term1077);
        	        postfix53=postfix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, postfix53.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_78 != NULL) stream_78->free(stream_78);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_73 != NULL) stream_73->free(stream_73);
        if (stream_74 != NULL) stream_74->free(stream_74);
        if (stream_term != NULL) stream_term->free(stream_term);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end term */

/**
 * $ANTLR start postfix
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:117:1: postfix : (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )* ;
 */
static DonutParser_postfix_return
postfix(pDonutParser ctx)
{
    DonutParser_postfix_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal54;
    pANTLR3_COMMON_TOKEN    string_literal55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    char_literal58;
    pANTLR3_COMMON_TOKEN    char_literal59;
    pANTLR3_COMMON_TOKEN    char_literal60;
    DonutParser_primary_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p DonutParser_primary_return

    DonutParser_name_return n;
    #undef	RETURN_TYPE_n
    #define	RETURN_TYPE_n DonutParser_name_return

    DonutParser_expr_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e DonutParser_expr_return

    DonutParser_arglist_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_arglist_return

    pANTLR3_BASE_TREE string_literal54_tree;
    pANTLR3_BASE_TREE string_literal55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE char_literal58_tree;
    pANTLR3_BASE_TREE char_literal59_tree;
    pANTLR3_BASE_TREE char_literal60_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_78;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_92;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_80;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_74;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arglist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal54       = NULL;
    string_literal55       = NULL;
    char_literal56       = NULL;
    char_literal57       = NULL;
    char_literal58       = NULL;
    char_literal59       = NULL;
    char_literal60       = NULL;
    p.tree = NULL;

    n.tree = NULL;

    e.tree = NULL;

    a.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal54_tree   = NULL;
    string_literal55_tree   = NULL;
    char_literal56_tree   = NULL;
    char_literal57_tree   = NULL;
    char_literal58_tree   = NULL;
    char_literal59_tree   = NULL;
    char_literal60_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_78   = NULL;
    #define CREATE_stream_78  if (stream_78 == NULL) {stream_78 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 78"); } 
    stream_92   = NULL;
    #define CREATE_stream_92  if (stream_92 == NULL) {stream_92 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 92"); } 
    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_80   = NULL;
    #define CREATE_stream_80  if (stream_80 == NULL) {stream_80 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 80"); } 
    stream_74   = NULL;
    #define CREATE_stream_74  if (stream_74 == NULL) {stream_74 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 74"); } 
    stream_arglist   = NULL;
    #define CREATE_stream_arglist  if (stream_arglist == NULL) {stream_arglist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arglist"); }
    stream_primary   = NULL;
    #define CREATE_stream_primary  if (stream_primary == NULL) {stream_primary = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary"); }
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:118:2: ( (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:118:4: (p= primary -> $p) ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )*
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:118:4: (p= primary -> $p)
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:118:5: p= primary
            {
                FOLLOWPUSH(FOLLOW_primary_in_postfix1090);
                p=primary(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_primary; stream_primary->add(stream_primary, p.tree, NULL); }

                /* AST REWRITE
                 * elements          : p
                 * token labels      : 
                 * rule labels       : retval, p
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_p=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", p.tree != NULL ? p.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 118:14: -> $p
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_p != NULL) stream_p->free(stream_p);


                }
            }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:119:2: ( '++' -> ^( POST_OP ADD $postfix) | '--' -> ^( POST_OP SUB $postfix) | '.' n= name -> ^( DOT $postfix $n) | '[' e= expr ']' -> ^( DOT $postfix $e) | '(' a= arglist ')' -> ^( APPLY $postfix $a) )*

            for (;;)
            {
                int alt19=6;
                switch ( LA(1) )
                {
                case 74:
                	{
                		alt19=1;
                	}
                    break;
                case 78:
                	{
                		alt19=2;
                	}
                    break;
                case 80:
                	{
                		alt19=3;
                	}
                    break;
                case 91:
                	{
                		alt19=4;
                	}
                    break;
                case 69:
                	{
                		alt19=5;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:119:4: '++'
            	    {
            	        string_literal54 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_postfix1099);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_74; stream_74->add(stream_74, string_literal54, NULL); }


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 119:9: -> ^( POST_OP ADD $postfix)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:119:12: ^( POST_OP ADD $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:120:4: '--'
            	    {
            	        string_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_postfix1115);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_78; stream_78->add(stream_78, string_literal55, NULL); }


            	        /* AST REWRITE
            	         * elements          : postfix
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 120:9: -> ^( POST_OP SUB $postfix)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:120:12: ^( POST_OP SUB $postfix)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POST_OP, (pANTLR3_UINT8)"POST_OP")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB")
            	        	        );

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:121:4: '.' n= name
            	    {
            	        char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(80, &FOLLOW_80_in_postfix1131);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_80; stream_80->add(stream_80, char_literal56, NULL); }


            	        FOLLOWPUSH(FOLLOW_name_in_postfix1135);
            	        n=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, n.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : n, postfix
            	         * token labels      : 
            	         * rule labels       : retval, n
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_n;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_n=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n.tree != NULL ? n.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 121:15: -> ^( DOT $postfix $n)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:121:18: ^( DOT $postfix $n)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n == NULL ? NULL : stream_n->nextTree(stream_n));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_n != NULL) stream_n->free(stream_n);


            	        }
            	    }
            	    break;
            	case 4:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:122:4: '[' e= expr ']'
            	    {
            	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_postfix1152);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_91; stream_91->add(stream_91, char_literal57, NULL); }


            	        FOLLOWPUSH(FOLLOW_expr_in_postfix1156);
            	        e=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

            	        char_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_postfix1158);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_92; stream_92->add(stream_92, char_literal58, NULL); }


            	        /* AST REWRITE
            	         * elements          : postfix, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 122:19: -> ^( DOT $postfix $e)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:122:22: ^( DOT $postfix $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;
            	case 5:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:123:4: '(' a= arglist ')'
            	    {
            	        char_literal59 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_postfix1175);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_69; stream_69->add(stream_69, char_literal59, NULL); }


            	        FOLLOWPUSH(FOLLOW_arglist_in_postfix1179);
            	        a=arglist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_arglist; stream_arglist->add(stream_arglist, a.tree, NULL); }

            	        char_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_postfix1181);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepostfixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal60, NULL); }


            	        /* AST REWRITE
            	         * elements          : postfix, a
            	         * token labels      : 
            	         * rule labels       : retval, a
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 123:22: -> ^( APPLY $postfix $a)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:123:25: ^( APPLY $postfix $a)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, APPLY, (pANTLR3_UINT8)"APPLY")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_a != NULL) stream_a->free(stream_a);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepostfixEx; /* Prevent compiler warnings */
    rulepostfixEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_78 != NULL) stream_78->free(stream_78);
        if (stream_92 != NULL) stream_92->free(stream_92);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_80 != NULL) stream_80->free(stream_80);
        if (stream_74 != NULL) stream_74->free(stream_74);
        if (stream_arglist != NULL) stream_arglist->free(stream_arglist);
        if (stream_primary != NULL) stream_primary->free(stream_primary);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end postfix */

/**
 * $ANTLR start primary
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:126:1: primary : ( literal | array | SELF | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | ( object )=> object | block );
 */
static DonutParser_primary_return
primary(pDonutParser ctx)
{
    DonutParser_primary_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SELF63;
    pANTLR3_COMMON_TOKEN    char_literal65;
    pANTLR3_COMMON_TOKEN    char_literal67;
    DonutParser_literal_return literal61;
    #undef	RETURN_TYPE_literal61
    #define	RETURN_TYPE_literal61 DonutParser_literal_return

    DonutParser_array_return array62;
    #undef	RETURN_TYPE_array62
    #define	RETURN_TYPE_array62 DonutParser_array_return

    DonutParser_name_return name64;
    #undef	RETURN_TYPE_name64
    #define	RETURN_TYPE_name64 DonutParser_name_return

    DonutParser_expr_return expr66;
    #undef	RETURN_TYPE_expr66
    #define	RETURN_TYPE_expr66 DonutParser_expr_return

    DonutParser_object_return object68;
    #undef	RETURN_TYPE_object68
    #define	RETURN_TYPE_object68 DonutParser_object_return

    DonutParser_block_return block69;
    #undef	RETURN_TYPE_block69
    #define	RETURN_TYPE_block69 DonutParser_block_return

    pANTLR3_BASE_TREE SELF63_tree;
    pANTLR3_BASE_TREE char_literal65_tree;
    pANTLR3_BASE_TREE char_literal67_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    SELF63       = NULL;
    char_literal65       = NULL;
    char_literal67       = NULL;
    literal61.tree = NULL;

    array62.tree = NULL;

    name64.tree = NULL;

    expr66.tree = NULL;

    object68.tree = NULL;

    block69.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    SELF63_tree   = NULL;
    char_literal65_tree   = NULL;
    char_literal67_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:127:2: ( literal | array | SELF | name -> ^( DOT SCOPE name ) | '(' expr ')' -> expr | ( object )=> object | block )

            ANTLR3_UINT32 alt20;

            alt20=7;

            switch ( LA(1) )
            {
            case FALSE_LITERAL:
            case FLOAT_LITERAL:
            case FUNC:
            case HEX_LITERAL:
            case INT_LITERAL:
            case NULL_LITERAL:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case TRUE_LITERAL:
            	{
            		alt20=1;
            	}
                break;
            case 91:
            	{
            		alt20=2;
            	}
                break;
            case SELF:
            	{
            		alt20=3;
            	}
                break;
            case IDENT:
            	{
            		alt20=4;
            	}
                break;
            case 69:
            	{
            		alt20=5;
            	}
                break;
            case 97:
            	{
            		switch ( LA(2) )
            		{
            		case IDENT:
            			{
            				{
            				    int LA20_7 = LA(3);
            				    if ( (synpred1_Donut(ctx)) && (LA20_7 == 88))
            				    {
            				        alt20=6;
            				    }
            				    else if ( (((LA20_7 >= 64) && (LA20_7 <= 69)) || ((LA20_7 >= 71) && (LA20_7 <= 75)) || ((LA20_7 >= 77) && (LA20_7 <= 87)) || ((LA20_7 >= 89) && (LA20_7 <= 91)) || ((LA20_7 >= 98) && (LA20_7 <= 100))))
            				    {
            				        alt20=7;
            				    }
            				    else
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }


            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 20;
            				        EXCEPTION->state        = 7;


            				        goto ruleprimaryEx;

            				    }
            				}
            			}
            		    break;
            		case 100:
            			{
            				{
            				    int LA20_8 = LA(3);
            				    if ( (synpred1_Donut(ctx)))
            				    {
            				        alt20=6;
            				    }
            				    else if ( (ANTLR3_TRUE))
            				    {
            				        alt20=7;
            				    }
            				    else
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }


            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 20;
            				        EXCEPTION->state        = 8;


            				        goto ruleprimaryEx;

            				    }
            				}
            			}
            		    break;
            		case FALSE_LITERAL:
            		case FLOAT_LITERAL:
            		case FUNC:
            		case HEX_LITERAL:
            		case INTERRUPT:
            		case INT_LITERAL:
            		case NULL_LITERAL:
            		case OCT_LITERAL:
            		case RETURN:
            		case SELF:
            		case STRING_DOUBLE:
            		case STRING_SINGLE:
            		case TRUE_LITERAL:
            		case 63:
            		case 69:
            		case 73:
            		case 74:
            		case 77:
            		case 78:
            		case 83:
            		case 91:
            		case 94:
            		case 95:
            		case 96:
            		case 97:
            			{
            				alt20=7;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }

            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 20;
            		    EXCEPTION->state        = 6;


            		    goto ruleprimaryEx;

            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 20;
                EXCEPTION->state        = 0;


                goto ruleprimaryEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:127:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_literal_in_primary1207);
        	        literal61=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal61.tree);

        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:128:4: array
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_array_in_primary1212);
        	        array62=array(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array62.tree);

        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:129:4: SELF
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        SELF63 = (pANTLR3_COMMON_TOKEN) MATCHT(SELF, &FOLLOW_SELF_in_primary1217);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        SELF63_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SELF63));
        	        ADAPTOR->addChild(ADAPTOR, root_0, SELF63_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:130:4: name
        	    {
        	        FOLLOWPUSH(FOLLOW_name_in_primary1222);
        	        name64=name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name64.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : name
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 130:9: -> ^( DOT SCOPE name )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:130:12: ^( DOT SCOPE name )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SCOPE, (pANTLR3_UINT8)"SCOPE")
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:131:4: '(' expr ')'
        	    {
        	        char_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_primary1237);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_69; stream_69->add(stream_69, char_literal65, NULL); }


        	        FOLLOWPUSH(FOLLOW_expr_in_primary1239);
        	        expr66=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr66.tree, NULL); }

        	        char_literal67 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_primary1241);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal67, NULL); }


        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 131:17: -> expr
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:132:4: ( object )=> object
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_object_in_primary1255);
        	        object68=object(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, object68.tree);

        	    }
        	    break;
        	case 7:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:133:4: block
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_block_in_primary1260);
        	        block69=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, block69.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleprimaryEx; /* Prevent compiler warnings */
    ruleprimaryEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end primary */

/**
 * $ANTLR start cond
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:136:1: cond : 'if' '(' expr ')' a= block 'else' (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) ) ;
 */
static DonutParser_cond_return
cond(pDonutParser ctx)
{
    DonutParser_cond_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal70;
    pANTLR3_COMMON_TOKEN    char_literal71;
    pANTLR3_COMMON_TOKEN    char_literal73;
    pANTLR3_COMMON_TOKEN    string_literal74;
    DonutParser_block_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a DonutParser_block_return

    DonutParser_block_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b DonutParser_block_return

    DonutParser_cond_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c DonutParser_cond_return

    DonutParser_expr_return expr72;
    #undef	RETURN_TYPE_expr72
    #define	RETURN_TYPE_expr72 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal70_tree;
    pANTLR3_BASE_TREE char_literal71_tree;
    pANTLR3_BASE_TREE char_literal73_tree;
    pANTLR3_BASE_TREE string_literal74_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_95;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_93;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal70       = NULL;
    char_literal71       = NULL;
    char_literal73       = NULL;
    string_literal74       = NULL;
    a.tree = NULL;

    b.tree = NULL;

    c.tree = NULL;

    expr72.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal70_tree   = NULL;
    char_literal71_tree   = NULL;
    char_literal73_tree   = NULL;
    string_literal74_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_95   = NULL;
    #define CREATE_stream_95  if (stream_95 == NULL) {stream_95 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 95"); } 
    stream_93   = NULL;
    #define CREATE_stream_93  if (stream_93 == NULL) {stream_93 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 93"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_cond   = NULL;
    #define CREATE_stream_cond  if (stream_cond == NULL) {stream_cond = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule cond"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:137:2: ( 'if' '(' expr ')' a= block 'else' (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:137:4: 'if' '(' expr ')' a= block 'else' (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) )
        {
            string_literal70 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_cond1271);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_95; stream_95->add(stream_95, string_literal70, NULL); }


            char_literal71 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_cond1273);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_69; stream_69->add(stream_69, char_literal71, NULL); }


            FOLLOWPUSH(FOLLOW_expr_in_cond1275);
            expr72=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr72.tree, NULL); }

            char_literal73 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_cond1277);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal73, NULL); }


            FOLLOWPUSH(FOLLOW_block_in_cond1281);
            a=block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, a.tree, NULL); }

            string_literal74 = (pANTLR3_COMMON_TOKEN) MATCHT(93, &FOLLOW_93_in_cond1283);
            if  (HASEXCEPTION())
            {
                goto rulecondEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_93; stream_93->add(stream_93, string_literal74, NULL); }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:138:3: (b= block -> ^( COND expr $a $b) |c= cond -> ^( COND expr $a $c) )
            {
                int alt21=2;
                switch ( LA(1) )
                {
                case 97:
                	{
                		alt21=1;
                	}
                    break;
                case 95:
                	{
                		alt21=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 21;
                    EXCEPTION->state        = 0;


                    goto rulecondEx;

                }

                switch (alt21)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:138:4: b= block
            	    {
            	        FOLLOWPUSH(FOLLOW_block_in_cond1290);
            	        b=block(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, b.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : b, expr, a
            	         * token labels      : 
            	         * rule labels       : retval, b, a
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);
            	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 138:12: -> ^( COND expr $a $b)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:138:15: ^( COND expr $a $b)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND, (pANTLR3_UINT8)"COND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_b != NULL) stream_b->free(stream_b);
            	        	if (stream_a != NULL) stream_a->free(stream_a);


            	        }
            	    }
            	    break;
            	case 2:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:139:4: c= cond
            	    {
            	        FOLLOWPUSH(FOLLOW_cond_in_cond1311);
            	        c=cond(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_cond; stream_cond->add(stream_cond, c.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : c, expr, a
            	         * token labels      : 
            	         * rule labels       : retval, c, a
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_c=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c.tree != NULL ? c.tree : NULL);
            	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 139:11: -> ^( COND expr $a $c)
            	        	{
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:139:14: ^( COND expr $a $c)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND, (pANTLR3_UINT8)"COND")
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_c == NULL ? NULL : stream_c->nextTree(stream_c));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_c != NULL) stream_c->free(stream_c);
            	        	if (stream_a != NULL) stream_a->free(stream_a);


            	        }
            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondEx; /* Prevent compiler warnings */
    rulecondEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_95 != NULL) stream_95->free(stream_95);
        if (stream_93 != NULL) stream_93->free(stream_93);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_block != NULL) stream_block->free(stream_block);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_cond != NULL) stream_cond->free(stream_cond);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end cond */

/**
 * $ANTLR start block
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:143:1: block : '{' exprlist '}' -> exprlist ;
 */
static DonutParser_block_return
block(pDonutParser ctx)
{
    DonutParser_block_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal75;
    pANTLR3_COMMON_TOKEN    char_literal77;
    DonutParser_exprlist_return exprlist76;
    #undef	RETURN_TYPE_exprlist76
    #define	RETURN_TYPE_exprlist76 DonutParser_exprlist_return

    pANTLR3_BASE_TREE char_literal75_tree;
    pANTLR3_BASE_TREE char_literal77_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_97;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_100;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal75       = NULL;
    char_literal77       = NULL;
    exprlist76.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal75_tree   = NULL;
    char_literal77_tree   = NULL;

    stream_97   = NULL;
    #define CREATE_stream_97  if (stream_97 == NULL) {stream_97 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 97"); } 
    stream_100   = NULL;
    #define CREATE_stream_100  if (stream_100 == NULL) {stream_100 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 100"); } 
    stream_exprlist   = NULL;
    #define CREATE_stream_exprlist  if (stream_exprlist == NULL) {stream_exprlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:143:6: ( '{' exprlist '}' -> exprlist )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:143:8: '{' exprlist '}'
        {
            char_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(97, &FOLLOW_97_in_block1338);
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_97; stream_97->add(stream_97, char_literal75, NULL); }


            FOLLOWPUSH(FOLLOW_exprlist_in_block1340);
            exprlist76=exprlist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist; stream_exprlist->add(stream_exprlist, exprlist76.tree, NULL); }

            char_literal77 = (pANTLR3_COMMON_TOKEN) MATCHT(100, &FOLLOW_100_in_block1342);
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_100; stream_100->add(stream_100, char_literal77, NULL); }


            /* AST REWRITE
             * elements          : exprlist
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 143:25: -> exprlist
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_exprlist == NULL ? NULL : stream_exprlist->nextTree(stream_exprlist));

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_97 != NULL) stream_97->free(stream_97);
        if (stream_100 != NULL) stream_100->free(stream_100);
        if (stream_exprlist != NULL) stream_exprlist->free(stream_exprlist);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end block */

/**
 * $ANTLR start name
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:145:1: name : IDENT ;
 */
static DonutParser_name_return
name(pDonutParser ctx)
{
    DonutParser_name_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT78;

    pANTLR3_BASE_TREE IDENT78_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    IDENT78       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    IDENT78_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:145:6: ( IDENT )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:145:8: IDENT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            IDENT78 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_name1354);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) {
            IDENT78_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT78));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT78_tree);
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start varlist
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:1: varlist : ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) ;
 */
static DonutParser_varlist_return
varlist(pDonutParser ctx)
{
    DonutParser_varlist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal80;
    DonutParser_name_return name79;
    #undef	RETURN_TYPE_name79
    #define	RETURN_TYPE_name79 DonutParser_name_return

    DonutParser_name_return name81;
    #undef	RETURN_TYPE_name81
    #define	RETURN_TYPE_name81 DonutParser_name_return

    pANTLR3_BASE_TREE char_literal80_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal80       = NULL;
    name79.tree = NULL;

    name81.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal80_tree   = NULL;

    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:9: ( ( name ( ( ',' ) name )* )? -> ^( VARS ( name )* ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:11: ( name ( ( ',' ) name )* )?
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:11: ( name ( ( ',' ) name )* )?
            {
                int alt23=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt23=1;
                    	}
                        break;
                }

                switch (alt23)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:12: name ( ( ',' ) name )*
            	    {
            	        FOLLOWPUSH(FOLLOW_name_in_varlist1363);
            	        name79=name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevarlistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name79.tree, NULL); }

            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:17: ( ( ',' ) name )*

            	        for (;;)
            	        {
            	            int alt22=2;
            	            switch ( LA(1) )
            	            {
            	            case 76:
            	            	{
            	            		alt22=1;
            	            	}
            	                break;

            	            }

            	            switch (alt22)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:18: ( ',' ) name
            	        	    {
            	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:18: ( ',' )
            	        	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:19: ','
            	        	        {
            	        	            char_literal80 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_varlist1367);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulevarlistEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return retval;
            	        	            }
            	        	             
            	        	            if ( BACKTRACKING==0 ) { CREATE_stream_76; stream_76->add(stream_76, char_literal80, NULL); }


            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_name_in_varlist1370);
            	        	        name81=name(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevarlistEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name81.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop22;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop22: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : name
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 147:33: -> ^( VARS ( name )* )
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:36: ^( VARS ( name )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARS, (pANTLR3_UINT8)"VARS")
            	        , root_1));

            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:147:43: ( name )*
            	        {
            	        	while ( (stream_name != NULL && stream_name->hasNext(stream_name))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        	}
            	        	if (stream_name != NULL) stream_name->reset(stream_name);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulevarlistEx; /* Prevent compiler warnings */
    rulevarlistEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_name != NULL) stream_name->free(stream_name);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end varlist */

/**
 * $ANTLR start arglist
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:149:1: arglist : exprlist_for_literal -> ^( ARGS exprlist_for_literal ) ;
 */
static DonutParser_arglist_return
arglist(pDonutParser ctx)
{
    DonutParser_arglist_return retval;


    pANTLR3_BASE_TREE root_0;

    DonutParser_exprlist_for_literal_return exprlist_for_literal82;
    #undef	RETURN_TYPE_exprlist_for_literal82
    #define	RETURN_TYPE_exprlist_for_literal82 DonutParser_exprlist_for_literal_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    exprlist_for_literal82.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:149:9: ( exprlist_for_literal -> ^( ARGS exprlist_for_literal ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:149:11: exprlist_for_literal
        {
            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_arglist1391);
            exprlist_for_literal82=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearglistEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal82.tree, NULL); }

            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 149:32: -> ^( ARGS exprlist_for_literal )
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:149:35: ^( ARGS exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGS, (pANTLR3_UINT8)"ARGS")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end arglist */

/**
 * $ANTLR start array
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:150:1: array : '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) ;
 */
static DonutParser_array_return
array(pDonutParser ctx)
{
    DonutParser_array_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal83;
    pANTLR3_COMMON_TOKEN    char_literal85;
    pANTLR3_COMMON_TOKEN    char_literal86;
    DonutParser_exprlist_for_literal_return exprlist_for_literal84;
    #undef	RETURN_TYPE_exprlist_for_literal84
    #define	RETURN_TYPE_exprlist_for_literal84 DonutParser_exprlist_for_literal_return

    pANTLR3_BASE_TREE char_literal83_tree;
    pANTLR3_BASE_TREE char_literal85_tree;
    pANTLR3_BASE_TREE char_literal86_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_92;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exprlist_for_literal;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal83       = NULL;
    char_literal85       = NULL;
    char_literal86       = NULL;
    exprlist_for_literal84.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal83_tree   = NULL;
    char_literal85_tree   = NULL;
    char_literal86_tree   = NULL;

    stream_92   = NULL;
    #define CREATE_stream_92  if (stream_92 == NULL) {stream_92 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 92"); } 
    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_exprlist_for_literal   = NULL;
    #define CREATE_stream_exprlist_for_literal  if (stream_exprlist_for_literal == NULL) {stream_exprlist_for_literal = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exprlist_for_literal"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:150:7: ( '[' exprlist_for_literal ( ',' )? ']' -> ^( ARRAY exprlist_for_literal ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:150:9: '[' exprlist_for_literal ( ',' )? ']'
        {
            char_literal83 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_array1406);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_91; stream_91->add(stream_91, char_literal83, NULL); }


            FOLLOWPUSH(FOLLOW_exprlist_for_literal_in_array1408);
            exprlist_for_literal84=exprlist_for_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_exprlist_for_literal; stream_exprlist_for_literal->add(stream_exprlist_for_literal, exprlist_for_literal84.tree, NULL); }

            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:150:34: ( ',' )?
            {
                int alt24=2;
                switch ( LA(1) )
                {
                    case 76:
                    	{
                    		alt24=1;
                    	}
                        break;
                }

                switch (alt24)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:150:34: ','
            	    {
            	        char_literal85 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_array1410);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrayEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_76; stream_76->add(stream_76, char_literal85, NULL); }


            	    }
            	    break;

                }
            }

            char_literal86 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_array1413);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_92; stream_92->add(stream_92, char_literal86, NULL); }


            /* AST REWRITE
             * elements          : exprlist_for_literal
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 150:43: -> ^( ARRAY exprlist_for_literal )
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:150:46: ^( ARRAY exprlist_for_literal )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY, (pANTLR3_UINT8)"ARRAY")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exprlist_for_literal == NULL ? NULL : stream_exprlist_for_literal->nextTree(stream_exprlist_for_literal));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_92 != NULL) stream_92->free(stream_92);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_exprlist_for_literal != NULL) stream_exprlist_for_literal->free(stream_exprlist_for_literal);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end array */

/**
 * $ANTLR start exprlist_for_literal
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:1: exprlist_for_literal : ( expr ( ',' expr )* )? -> ( expr )* ;
 */
static DonutParser_exprlist_for_literal_return
exprlist_for_literal(pDonutParser ctx)
{
    DonutParser_exprlist_for_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal88;
    DonutParser_expr_return expr87;
    #undef	RETURN_TYPE_expr87
    #define	RETURN_TYPE_expr87 DonutParser_expr_return

    DonutParser_expr_return expr89;
    #undef	RETURN_TYPE_expr89
    #define	RETURN_TYPE_expr89 DonutParser_expr_return

    pANTLR3_BASE_TREE char_literal88_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal88       = NULL;
    expr87.tree = NULL;

    expr89.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal88_tree   = NULL;

    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:22: ( ( expr ( ',' expr )* )? -> ( expr )* )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:24: ( expr ( ',' expr )* )?
        {
            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:24: ( expr ( ',' expr )* )?
            {
                int alt26=2;
                switch ( LA(1) )
                {
                    case FALSE_LITERAL:
                    case FLOAT_LITERAL:
                    case FUNC:
                    case HEX_LITERAL:
                    case IDENT:
                    case INTERRUPT:
                    case INT_LITERAL:
                    case NULL_LITERAL:
                    case OCT_LITERAL:
                    case RETURN:
                    case SELF:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case TRUE_LITERAL:
                    case 63:
                    case 69:
                    case 73:
                    case 74:
                    case 77:
                    case 78:
                    case 91:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    	{
                    		alt26=1;
                    	}
                        break;
                }

                switch (alt26)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:25: expr ( ',' expr )*
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1429);
            	        expr87=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexprlist_for_literalEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr87.tree, NULL); }

            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:30: ( ',' expr )*

            	        for (;;)
            	        {
            	            int alt25=2;
            	            switch ( LA(1) )
            	            {
            	            case 76:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case FALSE_LITERAL:
            	            		case FLOAT_LITERAL:
            	            		case FUNC:
            	            		case HEX_LITERAL:
            	            		case IDENT:
            	            		case INTERRUPT:
            	            		case INT_LITERAL:
            	            		case NULL_LITERAL:
            	            		case OCT_LITERAL:
            	            		case RETURN:
            	            		case SELF:
            	            		case STRING_DOUBLE:
            	            		case STRING_SINGLE:
            	            		case TRUE_LITERAL:
            	            		case 63:
            	            		case 69:
            	            		case 73:
            	            		case 74:
            	            		case 77:
            	            		case 78:
            	            		case 91:
            	            		case 94:
            	            		case 95:
            	            		case 96:
            	            		case 97:
            	            			{
            	            				alt25=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt25)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:31: ',' expr
            	        	    {
            	        	        char_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_exprlist_for_literal1432);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_76; stream_76->add(stream_76, char_literal88, NULL); }


            	        	        FOLLOWPUSH(FOLLOW_expr_in_exprlist_for_literal1434);
            	        	        expr89=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexprlist_for_literalEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr89.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop25;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop25: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 151:44: -> ( expr )*
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:151:47: ( expr )*
            	    {
            	    	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	    	{
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	    	}
            	    	if (stream_expr != NULL) stream_expr->reset(stream_expr);

            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexprlist_for_literalEx; /* Prevent compiler warnings */
    ruleexprlist_for_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end exprlist_for_literal */

/**
 * $ANTLR start object
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:1: object : '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) ;
 */
static DonutParser_object_return
object(pDonutParser ctx)
{
    DonutParser_object_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal90;
    pANTLR3_COMMON_TOKEN    char_literal92;
    pANTLR3_COMMON_TOKEN    char_literal94;
    pANTLR3_COMMON_TOKEN    char_literal95;
    DonutParser_object_pair_return object_pair91;
    #undef	RETURN_TYPE_object_pair91
    #define	RETURN_TYPE_object_pair91 DonutParser_object_pair_return

    DonutParser_object_pair_return object_pair93;
    #undef	RETURN_TYPE_object_pair93
    #define	RETURN_TYPE_object_pair93 DonutParser_object_pair_return

    pANTLR3_BASE_TREE char_literal90_tree;
    pANTLR3_BASE_TREE char_literal92_tree;
    pANTLR3_BASE_TREE char_literal94_tree;
    pANTLR3_BASE_TREE char_literal95_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_97;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_100;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_object_pair;
    /* Initialize rule variables
     */

    root_0 = NULL;

    char_literal90       = NULL;
    char_literal92       = NULL;
    char_literal94       = NULL;
    char_literal95       = NULL;
    object_pair91.tree = NULL;

    object_pair93.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    char_literal90_tree   = NULL;
    char_literal92_tree   = NULL;
    char_literal94_tree   = NULL;
    char_literal95_tree   = NULL;

    stream_97   = NULL;
    #define CREATE_stream_97  if (stream_97 == NULL) {stream_97 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 97"); } 
    stream_100   = NULL;
    #define CREATE_stream_100  if (stream_100 == NULL) {stream_100 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 100"); } 
    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_object_pair   = NULL;
    #define CREATE_stream_object_pair  if (stream_object_pair == NULL) {stream_object_pair = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule object_pair"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:8: ( '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}' -> ^( OBJECT ( object_pair )* ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:10: '{' ( object_pair ( ',' object_pair )* ( ',' )? )? '}'
        {
            char_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(97, &FOLLOW_97_in_object1451);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_97; stream_97->add(stream_97, char_literal90, NULL); }


            // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:14: ( object_pair ( ',' object_pair )* ( ',' )? )?
            {
                int alt29=2;
                switch ( LA(1) )
                {
                    case IDENT:
                    	{
                    		alt29=1;
                    	}
                        break;
                }

                switch (alt29)
                {
            	case 1:
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:15: object_pair ( ',' object_pair )* ( ',' )?
            	    {
            	        FOLLOWPUSH(FOLLOW_object_pair_in_object1454);
            	        object_pair91=object_pair(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair91.tree, NULL); }

            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:27: ( ',' object_pair )*

            	        for (;;)
            	        {
            	            int alt27=2;
            	            switch ( LA(1) )
            	            {
            	            case 76:
            	            	{
            	            		switch ( LA(2) )
            	            		{
            	            		case IDENT:
            	            			{
            	            				alt27=1;
            	            			}
            	            		    break;

            	            		}

            	            	}
            	                break;

            	            }

            	            switch (alt27)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:28: ',' object_pair
            	        	    {
            	        	        char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_object1457);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_76; stream_76->add(stream_76, char_literal92, NULL); }


            	        	        FOLLOWPUSH(FOLLOW_object_pair_in_object1459);
            	        	        object_pair93=object_pair(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_object_pair; stream_object_pair->add(stream_object_pair, object_pair93.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop27;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop27: ; /* Jump out to here if this rule does not match */


            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:46: ( ',' )?
            	        {
            	            int alt28=2;
            	            switch ( LA(1) )
            	            {
            	                case 76:
            	                	{
            	                		alt28=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt28)
            	            {
            	        	case 1:
            	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:47: ','
            	        	    {
            	        	        char_literal94 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_object1464);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_76; stream_76->add(stream_76, char_literal94, NULL); }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            char_literal95 = (pANTLR3_COMMON_TOKEN) MATCHT(100, &FOLLOW_100_in_object1470);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_100; stream_100->add(stream_100, char_literal95, NULL); }


            /* AST REWRITE
             * elements          : object_pair
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 153:59: -> ^( OBJECT ( object_pair )* )
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:62: ^( OBJECT ( object_pair )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJECT, (pANTLR3_UINT8)"OBJECT")
            	        , root_1));

            	        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:153:71: ( object_pair )*
            	        {
            	        	while ( (stream_object_pair != NULL && stream_object_pair->hasNext(stream_object_pair))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_object_pair == NULL ? NULL : stream_object_pair->nextTree(stream_object_pair));

            	        	}
            	        	if (stream_object_pair != NULL) stream_object_pair->reset(stream_object_pair);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobjectEx; /* Prevent compiler warnings */
    ruleobjectEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_97 != NULL) stream_97->free(stream_97);
        if (stream_100 != NULL) stream_100->free(stream_100);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_object_pair != NULL) stream_object_pair->free(stream_object_pair);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object */

/**
 * $ANTLR start object_pair
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:154:1: object_pair : name '=>' expr -> ^( PAIR name expr ) ;
 */
static DonutParser_object_pair_return
object_pair(pDonutParser ctx)
{
    DonutParser_object_pair_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal97;
    DonutParser_name_return name96;
    #undef	RETURN_TYPE_name96
    #define	RETURN_TYPE_name96 DonutParser_name_return

    DonutParser_expr_return expr98;
    #undef	RETURN_TYPE_expr98
    #define	RETURN_TYPE_expr98 DonutParser_expr_return

    pANTLR3_BASE_TREE string_literal97_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_88;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */

    root_0 = NULL;

    string_literal97       = NULL;
    name96.tree = NULL;

    expr98.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    string_literal97_tree   = NULL;

    stream_88   = NULL;
    #define CREATE_stream_88  if (stream_88 == NULL) {stream_88 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 88"); } 
    stream_name   = NULL;
    #define CREATE_stream_name  if (stream_name == NULL) {stream_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule name"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:154:13: ( name '=>' expr -> ^( PAIR name expr ) )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:154:15: name '=>' expr
        {
            FOLLOWPUSH(FOLLOW_name_in_object_pair1486);
            name96=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_name; stream_name->add(stream_name, name96.tree, NULL); }

            string_literal97 = (pANTLR3_COMMON_TOKEN) MATCHT(88, &FOLLOW_88_in_object_pair1488);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_88; stream_88->add(stream_88, string_literal97, NULL); }


            FOLLOWPUSH(FOLLOW_expr_in_object_pair1490);
            expr98=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr98.tree, NULL); }

            /* AST REWRITE
             * elements          : expr, name
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 154:30: -> ^( PAIR name expr )
            	{
            	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:154:33: ^( PAIR name expr )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAIR, (pANTLR3_UINT8)"PAIR")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextTree(stream_name));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_pairEx; /* Prevent compiler warnings */
    ruleobject_pairEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_88 != NULL) stream_88->free(stream_88);
        if (stream_name != NULL) stream_name->free(stream_name);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end object_pair */

/**
 * $ANTLR start literal
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:156:1: literal : ( numeric_literal | boolean_literal | string_literal | NULL_LITERAL | FUNC '(' varlist ')' block -> ^( CLOS varlist block ) );
 */
static DonutParser_literal_return
literal(pDonutParser ctx)
{
    DonutParser_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NULL_LITERAL102;
    pANTLR3_COMMON_TOKEN    FUNC103;
    pANTLR3_COMMON_TOKEN    char_literal104;
    pANTLR3_COMMON_TOKEN    char_literal106;
    DonutParser_numeric_literal_return numeric_literal99;
    #undef	RETURN_TYPE_numeric_literal99
    #define	RETURN_TYPE_numeric_literal99 DonutParser_numeric_literal_return

    DonutParser_boolean_literal_return boolean_literal100;
    #undef	RETURN_TYPE_boolean_literal100
    #define	RETURN_TYPE_boolean_literal100 DonutParser_boolean_literal_return

    DonutParser_string_literal_return string_literal101;
    #undef	RETURN_TYPE_string_literal101
    #define	RETURN_TYPE_string_literal101 DonutParser_string_literal_return

    DonutParser_varlist_return varlist105;
    #undef	RETURN_TYPE_varlist105
    #define	RETURN_TYPE_varlist105 DonutParser_varlist_return

    DonutParser_block_return block107;
    #undef	RETURN_TYPE_block107
    #define	RETURN_TYPE_block107 DonutParser_block_return

    pANTLR3_BASE_TREE NULL_LITERAL102_tree;
    pANTLR3_BASE_TREE FUNC103_tree;
    pANTLR3_BASE_TREE char_literal104_tree;
    pANTLR3_BASE_TREE char_literal106_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_69;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_70;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FUNC;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_varlist;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_block;
    /* Initialize rule variables
     */

    root_0 = NULL;

    NULL_LITERAL102       = NULL;
    FUNC103       = NULL;
    char_literal104       = NULL;
    char_literal106       = NULL;
    numeric_literal99.tree = NULL;

    boolean_literal100.tree = NULL;

    string_literal101.tree = NULL;

    varlist105.tree = NULL;

    block107.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    NULL_LITERAL102_tree   = NULL;
    FUNC103_tree   = NULL;
    char_literal104_tree   = NULL;
    char_literal106_tree   = NULL;

    stream_69   = NULL;
    #define CREATE_stream_69  if (stream_69 == NULL) {stream_69 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 69"); } 
    stream_70   = NULL;
    #define CREATE_stream_70  if (stream_70 == NULL) {stream_70 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 70"); } 
    stream_FUNC   = NULL;
    #define CREATE_stream_FUNC  if (stream_FUNC == NULL) {stream_FUNC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FUNC"); } 
    stream_varlist   = NULL;
    #define CREATE_stream_varlist  if (stream_varlist == NULL) {stream_varlist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule varlist"); }
    stream_block   = NULL;
    #define CREATE_stream_block  if (stream_block == NULL) {stream_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule block"); }

    retval.tree  = NULL;

    {
        {
            //  d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:157:2: ( numeric_literal | boolean_literal | string_literal | NULL_LITERAL | FUNC '(' varlist ')' block -> ^( CLOS varlist block ) )

            ANTLR3_UINT32 alt30;

            alt30=5;

            switch ( LA(1) )
            {
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case INT_LITERAL:
            case OCT_LITERAL:
            	{
            		alt30=1;
            	}
                break;
            case FALSE_LITERAL:
            case TRUE_LITERAL:
            	{
            		alt30=2;
            	}
                break;
            case STRING_DOUBLE:
            case STRING_SINGLE:
            	{
            		alt30=3;
            	}
                break;
            case NULL_LITERAL:
            	{
            		alt30=4;
            	}
                break;
            case FUNC:
            	{
            		alt30=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 30;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:157:4: numeric_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_numeric_literal_in_literal1509);
        	        numeric_literal99=numeric_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, numeric_literal99.tree);

        	    }
        	    break;
        	case 2:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:158:4: boolean_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_boolean_literal_in_literal1514);
        	        boolean_literal100=boolean_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, boolean_literal100.tree);

        	    }
        	    break;
        	case 3:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:159:4: string_literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_string_literal_in_literal1519);
        	        string_literal101=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, string_literal101.tree);

        	    }
        	    break;
        	case 4:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:160:4: NULL_LITERAL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        NULL_LITERAL102 = (pANTLR3_COMMON_TOKEN) MATCHT(NULL_LITERAL, &FOLLOW_NULL_LITERAL_in_literal1524);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NULL_LITERAL102_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NULL_LITERAL102));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NULL_LITERAL102_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:161:4: FUNC '(' varlist ')' block
        	    {
        	        FUNC103 = (pANTLR3_COMMON_TOKEN) MATCHT(FUNC, &FOLLOW_FUNC_in_literal1529);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_FUNC; stream_FUNC->add(stream_FUNC, FUNC103, NULL); }


        	        char_literal104 = (pANTLR3_COMMON_TOKEN) MATCHT(69, &FOLLOW_69_in_literal1531);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_69; stream_69->add(stream_69, char_literal104, NULL); }


        	        FOLLOWPUSH(FOLLOW_varlist_in_literal1533);
        	        varlist105=varlist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_varlist; stream_varlist->add(stream_varlist, varlist105.tree, NULL); }

        	        char_literal106 = (pANTLR3_COMMON_TOKEN) MATCHT(70, &FOLLOW_70_in_literal1535);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_70; stream_70->add(stream_70, char_literal106, NULL); }


        	        FOLLOWPUSH(FOLLOW_block_in_literal1537);
        	        block107=block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_block; stream_block->add(stream_block, block107.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : varlist, block
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 161:31: -> ^( CLOS varlist block )
        	        	{
        	        	    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:161:34: ^( CLOS varlist block )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOS, (pANTLR3_UINT8)"CLOS")
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_varlist == NULL ? NULL : stream_varlist->nextTree(stream_varlist));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_block == NULL ? NULL : stream_block->nextTree(stream_block));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_69 != NULL) stream_69->free(stream_69);
        if (stream_70 != NULL) stream_70->free(stream_70);
        if (stream_FUNC != NULL) stream_FUNC->free(stream_FUNC);
        if (stream_varlist != NULL) stream_varlist->free(stream_varlist);
        if (stream_block != NULL) stream_block->free(stream_block);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end literal */

/**
 * $ANTLR start boolean_literal
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:164:1: boolean_literal : ( TRUE_LITERAL | FALSE_LITERAL );
 */
static DonutParser_boolean_literal_return
boolean_literal(pDonutParser ctx)
{
    DonutParser_boolean_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set108;

    pANTLR3_BASE_TREE set108_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set108       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set108_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:164:17: ( TRUE_LITERAL | FALSE_LITERAL )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set108=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == FALSE_LITERAL || LA(1) == TRUE_LITERAL )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set108))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleboolean_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleboolean_literalEx; /* Prevent compiler warnings */
    ruleboolean_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end boolean_literal */

/**
 * $ANTLR start numeric_literal
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:166:1: numeric_literal : ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL );
 */
static DonutParser_numeric_literal_return
numeric_literal(pDonutParser ctx)
{
    DonutParser_numeric_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set109;

    pANTLR3_BASE_TREE set109_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set109       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set109_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:167:2: ( HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set109=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == FLOAT_LITERAL || LA(1) == HEX_LITERAL || LA(1) == INT_LITERAL || LA(1) == OCT_LITERAL )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set109))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulenumeric_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenumeric_literalEx; /* Prevent compiler warnings */
    rulenumeric_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end numeric_literal */

/**
 * $ANTLR start string_literal
 * d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:172:1: string_literal : ( STRING_SINGLE | STRING_DOUBLE );
 */
static DonutParser_string_literal_return
string_literal(pDonutParser ctx)
{
    DonutParser_string_literal_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set110;

    pANTLR3_BASE_TREE set110_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    set110       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    set110_tree   = NULL;


    retval.tree  = NULL;

    {
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:172:16: ( STRING_SINGLE | STRING_DOUBLE )
        // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            set110=(pANTLR3_COMMON_TOKEN)LT(1);

            if ( LA(1) == STRING_DOUBLE || LA(1) == STRING_SINGLE )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
                (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set110))
                );
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end string_literal */

// $ANTLR start synpred1_Donut
static void synpred1_Donut_fragment(pDonutParser ctx )
{
    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:132:4: ( object )
    // d:/Dropbox/src/chisa/src/chisa/donut/parser\\Donut.g:132:5: object
    {
        FOLLOWPUSH(FOLLOW_object_in_synpred1_Donut1251);
        object(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_DonutEx;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_DonutEx; /* Prevent compiler warnings */
rulesynpred1_DonutEx: ;

}
// $ANTLR end synpred1_Donut
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred1_Donut(pDonutParser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Donut_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
