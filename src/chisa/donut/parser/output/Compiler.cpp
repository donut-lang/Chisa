/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g
 *     -                            On : 2012-11-19 20:47:33
 *     -           for the tree parser : CompilerTreeParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

#include <string>
#include <vector>
#include <cstdlib>
#include <cstddef>
#include <algorithm>
#include "../../source/Source.h"
#include "../../source/Closure.h"
#include "../ParseUtil.h"
#include "../../../util/StringUtil.h"
using namespace chisa;
using namespace chisa::donut;
using std::string;
using chisa::donut::unescapeString;
using chisa::util::parseInt;
using chisa::util::parseFloat;

typedef pANTLR3_COMMON_TOKEN Token;

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "Compiler.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pCompiler_##scope##_SCOPE
#define SCOPE_STACK(scope)  pCompiler_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pCompiler_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pCompiler_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO
#undef		SEEK
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger



#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   CompilerTokenNames[95+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "APPLY",
        (pANTLR3_UINT8) "ARGS",
        (pANTLR3_UINT8) "ARRAY",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "ASSIGN_OP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "CEQ",
        (pANTLR3_UINT8) "CGE",
        (pANTLR3_UINT8) "CGT",
        (pANTLR3_UINT8) "CLE",
        (pANTLR3_UINT8) "CLOS",
        (pANTLR3_UINT8) "CLT",
        (pANTLR3_UINT8) "CNE",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "CONT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT_LITERAL",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "IDX",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "INT_LITERAL",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "MUL",
        (pANTLR3_UINT8) "NONZERO_DIGIT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "OBJECT",
        (pANTLR3_UINT8) "OCT_DIGIT",
        (pANTLR3_UINT8) "OCT_LITERAL",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "PAIR",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "POST_OP",
        (pANTLR3_UINT8) "PRE_OP",
        (pANTLR3_UINT8) "SCOPE",
        (pANTLR3_UINT8) "STRING_DOUBLE",
        (pANTLR3_UINT8) "STRING_DOUBLE_ELEMENT",
        (pANTLR3_UINT8) "STRING_SINGLE",
        (pANTLR3_UINT8) "STRING_SINGLE_ELEMENT",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "VARS",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'=>'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'func'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 unsigned int
	prog    (pCompiler ctx, donut::Source* code);
static 
 Compiler_closure_return
	closure    (pCompiler ctx, donut::Source* code);
static 
 std::vector<std::string>
	vars    (pCompiler ctx, donut::Source* code);
static 
 std::vector<donut::Instruction>
	block    (pCompiler ctx, donut::Source* code);
static 
 std::string
	operation    (pCompiler ctx);
static 
 std::string
	unary_operation    (pCompiler ctx);
static 
 std::vector<donut::Instruction>
	expr    (pCompiler ctx, donut::Source* code);
static 
 std::vector<donut::Instruction>
	index    (pCompiler ctx, donut::Source* code);
static 
 std::vector<donut::Instruction>
	apply    (pCompiler ctx, donut::Source* code);
static 
 std::vector<donut::Instruction>
	literal    (pCompiler ctx, donut::Source* code);
static 
 std::vector<donut::Instruction>
	object    (pCompiler ctx, donut::Source* code);
static 
 std::vector<donut::Instruction>
	object_pair    (pCompiler ctx, donut::Source* code);
static 
 std::vector<donut::Instruction>
	array    (pCompiler ctx, donut::Source* code);
static 
 Compiler_arglist_return
	arglist    (pCompiler ctx, donut::Source* code);
static void	CompilerFree(pCompiler ctx);
static void     CompilerReset (pCompiler ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new Compiler parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pCompiler
CompilerNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return CompilerNewSSD(instream, NULL);
}

/** \brief Create a new Compiler parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pCompiler
CompilerNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pCompiler ctx;	    /* Context structure we will build and return   */

    ctx	= (pCompiler) ANTLR3_CALLOC(1, sizeof(Compiler));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in Compiler.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);

    /* Install the implementation of our Compiler interface
     */
    ctx->prog	= prog;
    ctx->closure	= closure;
    ctx->vars	= vars;
    ctx->block	= block;
    ctx->operation	= operation;
    ctx->unary_operation	= unary_operation;
    ctx->expr	= expr;
    ctx->index	= index;
    ctx->apply	= apply;
    ctx->literal	= literal;
    ctx->object	= object;
    ctx->object_pair	= object_pair;
    ctx->array	= array;
    ctx->arglist	= arglist;
    ctx->free			= CompilerFree;
    ctx->reset			= CompilerReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = CompilerTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
CompilerReset (pCompiler ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 CompilerFree(pCompiler ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);

    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
tree parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return CompilerTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_closure_in_prog61  */
static	ANTLR3_BITWORD FOLLOW_closure_in_prog61_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_closure_in_prog61	= { FOLLOW_closure_in_prog61_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CLOS_in_closure83  */
static	ANTLR3_BITWORD FOLLOW_CLOS_in_closure83_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CLOS_in_closure83	= { FOLLOW_CLOS_in_closure83_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vars_in_closure85  */
static	ANTLR3_BITWORD FOLLOW_vars_in_closure85_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_vars_in_closure85	= { FOLLOW_vars_in_closure85_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_closure88  */
static	ANTLR3_BITWORD FOLLOW_block_in_closure88_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_closure88	= { FOLLOW_block_in_closure88_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VARS_in_vars113  */
static	ANTLR3_BITWORD FOLLOW_VARS_in_vars113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VARS_in_vars113	= { FOLLOW_VARS_in_vars113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_vars116  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_vars116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_vars116	= { FOLLOW_IDENT_in_vars116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONT_in_block140  */
static	ANTLR3_BITWORD FOLLOW_CONT_in_block140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONT_in_block140	= { FOLLOW_CONT_in_block140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_block145  */
static	ANTLR3_BITWORD FOLLOW_expr_in_block145_bits[]	= { ANTLR3_UINT64_LIT(0x0055DB77598FFF78), ANTLR3_UINT64_LIT(0x0000000031000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_block145	= { FOLLOW_expr_in_block145_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ADD_in_operation167  */
static	ANTLR3_BITWORD FOLLOW_ADD_in_operation167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ADD_in_operation167	= { FOLLOW_ADD_in_operation167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SUB_in_operation174  */
static	ANTLR3_BITWORD FOLLOW_SUB_in_operation174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SUB_in_operation174	= { FOLLOW_SUB_in_operation174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MUL_in_operation181  */
static	ANTLR3_BITWORD FOLLOW_MUL_in_operation181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_MUL_in_operation181	= { FOLLOW_MUL_in_operation181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIV_in_operation188  */
static	ANTLR3_BITWORD FOLLOW_DIV_in_operation188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DIV_in_operation188	= { FOLLOW_DIV_in_operation188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_in_operation195  */
static	ANTLR3_BITWORD FOLLOW_MOD_in_operation195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_in_operation195	= { FOLLOW_MOD_in_operation195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_operation202  */
static	ANTLR3_BITWORD FOLLOW_AND_in_operation202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_operation202	= { FOLLOW_AND_in_operation202_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_operation209  */
static	ANTLR3_BITWORD FOLLOW_OR_in_operation209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_operation209	= { FOLLOW_OR_in_operation209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CLT_in_operation216  */
static	ANTLR3_BITWORD FOLLOW_CLT_in_operation216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CLT_in_operation216	= { FOLLOW_CLT_in_operation216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CGT_in_operation223  */
static	ANTLR3_BITWORD FOLLOW_CGT_in_operation223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CGT_in_operation223	= { FOLLOW_CGT_in_operation223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CLE_in_operation230  */
static	ANTLR3_BITWORD FOLLOW_CLE_in_operation230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CLE_in_operation230	= { FOLLOW_CLE_in_operation230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CGE_in_operation237  */
static	ANTLR3_BITWORD FOLLOW_CGE_in_operation237_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CGE_in_operation237	= { FOLLOW_CGE_in_operation237_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CEQ_in_operation244  */
static	ANTLR3_BITWORD FOLLOW_CEQ_in_operation244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CEQ_in_operation244	= { FOLLOW_CEQ_in_operation244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CNE_in_operation251  */
static	ANTLR3_BITWORD FOLLOW_CNE_in_operation251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CNE_in_operation251	= { FOLLOW_CNE_in_operation251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_OR_in_operation258  */
static	ANTLR3_BITWORD FOLLOW_BIT_OR_in_operation258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_OR_in_operation258	= { FOLLOW_BIT_OR_in_operation258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BIT_AND_in_operation265  */
static	ANTLR3_BITWORD FOLLOW_BIT_AND_in_operation265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BIT_AND_in_operation265	= { FOLLOW_BIT_AND_in_operation265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_unary_operation282  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_unary_operation282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_unary_operation282	= { FOLLOW_PLUS_in_unary_operation282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUS_in_unary_operation289  */
static	ANTLR3_BITWORD FOLLOW_MINUS_in_unary_operation289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUS_in_unary_operation289	= { FOLLOW_MINUS_in_unary_operation289_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_unary_operation296  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_unary_operation296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_unary_operation296	= { FOLLOW_NOT_in_unary_operation296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_expr317  */
static	ANTLR3_BITWORD FOLLOW_literal_in_expr317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_expr317	= { FOLLOW_literal_in_expr317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_apply_in_expr327  */
static	ANTLR3_BITWORD FOLLOW_apply_in_expr327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_apply_in_expr327	= { FOLLOW_apply_in_expr327_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_in_expr337  */
static	ANTLR3_BITWORD FOLLOW_index_in_expr337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_in_expr337	= { FOLLOW_index_in_expr337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_POST_OP_in_expr346  */
static	ANTLR3_BITWORD FOLLOW_POST_OP_in_expr346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_POST_OP_in_expr346	= { FOLLOW_POST_OP_in_expr346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operation_in_expr350  */
static	ANTLR3_BITWORD FOLLOW_operation_in_expr350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_operation_in_expr350	= { FOLLOW_operation_in_expr350_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr353  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr353	= { FOLLOW_DOT_in_expr353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_expr355  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_expr355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_expr355	= { FOLLOW_SCOPE_in_expr355_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr357  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr357	= { FOLLOW_IDENT_in_expr357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_POST_OP_in_expr367  */
static	ANTLR3_BITWORD FOLLOW_POST_OP_in_expr367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_POST_OP_in_expr367	= { FOLLOW_POST_OP_in_expr367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operation_in_expr371  */
static	ANTLR3_BITWORD FOLLOW_operation_in_expr371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_operation_in_expr371	= { FOLLOW_operation_in_expr371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr374  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr374	= { FOLLOW_DOT_in_expr374_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr378  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr378	= { FOLLOW_expr_in_expr378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr381  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr381	= { FOLLOW_IDENT_in_expr381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PRE_OP_in_expr391  */
static	ANTLR3_BITWORD FOLLOW_PRE_OP_in_expr391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PRE_OP_in_expr391	= { FOLLOW_PRE_OP_in_expr391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operation_in_expr395  */
static	ANTLR3_BITWORD FOLLOW_operation_in_expr395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_operation_in_expr395	= { FOLLOW_operation_in_expr395_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr398  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr398	= { FOLLOW_DOT_in_expr398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_expr400  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_expr400_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_expr400	= { FOLLOW_SCOPE_in_expr400_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr402  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr402	= { FOLLOW_IDENT_in_expr402_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PRE_OP_in_expr412  */
static	ANTLR3_BITWORD FOLLOW_PRE_OP_in_expr412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PRE_OP_in_expr412	= { FOLLOW_PRE_OP_in_expr412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operation_in_expr416  */
static	ANTLR3_BITWORD FOLLOW_operation_in_expr416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_operation_in_expr416	= { FOLLOW_operation_in_expr416_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr419  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr419	= { FOLLOW_DOT_in_expr419_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr423  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr423	= { FOLLOW_expr_in_expr423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr426  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr426	= { FOLLOW_IDENT_in_expr426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_expr436  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_expr436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_expr436	= { FOLLOW_ASSIGN_in_expr436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr439  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr439	= { FOLLOW_DOT_in_expr439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_expr441  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_expr441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_expr441	= { FOLLOW_SCOPE_in_expr441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr443  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr443	= { FOLLOW_IDENT_in_expr443_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr448  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr448	= { FOLLOW_expr_in_expr448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_expr458  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_expr458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_expr458	= { FOLLOW_ASSIGN_in_expr458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr461  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr461	= { FOLLOW_DOT_in_expr461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr465  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr465	= { FOLLOW_expr_in_expr465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr468  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr468	= { FOLLOW_IDENT_in_expr468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr473  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr473	= { FOLLOW_expr_in_expr473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_OP_in_expr483  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_OP_in_expr483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_OP_in_expr483	= { FOLLOW_ASSIGN_OP_in_expr483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operation_in_expr487  */
static	ANTLR3_BITWORD FOLLOW_operation_in_expr487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_operation_in_expr487	= { FOLLOW_operation_in_expr487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr490  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr490	= { FOLLOW_DOT_in_expr490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_expr492  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_expr492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_expr492	= { FOLLOW_SCOPE_in_expr492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr494  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr494	= { FOLLOW_IDENT_in_expr494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr499  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr499	= { FOLLOW_expr_in_expr499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_OP_in_expr509  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_OP_in_expr509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_OP_in_expr509	= { FOLLOW_ASSIGN_OP_in_expr509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operation_in_expr511  */
static	ANTLR3_BITWORD FOLLOW_operation_in_expr511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_operation_in_expr511	= { FOLLOW_operation_in_expr511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr514  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr514	= { FOLLOW_DOT_in_expr514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr518  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr518_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr518	= { FOLLOW_expr_in_expr518_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr521  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr521	= { FOLLOW_IDENT_in_expr521_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr526  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr526	= { FOLLOW_expr_in_expr526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_operation_in_expr536  */
static	ANTLR3_BITWORD FOLLOW_unary_operation_in_expr536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_operation_in_expr536	= { FOLLOW_unary_operation_in_expr536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr540  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr540	= { FOLLOW_expr_in_expr540_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operation_in_expr552  */
static	ANTLR3_BITWORD FOLLOW_operation_in_expr552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_operation_in_expr552	= { FOLLOW_operation_in_expr552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr556  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr556_bits[]	= { ANTLR3_UINT64_LIT(0x0055DB77598FFF70), ANTLR3_UINT64_LIT(0x0000000031000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr556	= { FOLLOW_expr_in_expr556_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr561  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr561	= { FOLLOW_expr_in_expr561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr571  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr571	= { FOLLOW_DOT_in_expr571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr575  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr575	= { FOLLOW_expr_in_expr575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr578  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr578	= { FOLLOW_IDENT_in_expr578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_expr588  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_expr588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_expr588	= { FOLLOW_DOT_in_expr588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_expr590  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_expr590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_expr590	= { FOLLOW_SCOPE_in_expr590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_expr592  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_expr592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_expr592	= { FOLLOW_IDENT_in_expr592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDX_in_index614  */
static	ANTLR3_BITWORD FOLLOW_IDX_in_index614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDX_in_index614	= { FOLLOW_IDX_in_index614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_index618  */
static	ANTLR3_BITWORD FOLLOW_expr_in_index618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_index618	= { FOLLOW_expr_in_index618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_index623  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_index623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_index623	= { FOLLOW_arglist_in_index623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_APPLY_in_apply646  */
static	ANTLR3_BITWORD FOLLOW_APPLY_in_apply646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_APPLY_in_apply646	= { FOLLOW_APPLY_in_apply646_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_apply649  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_apply649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_apply649	= { FOLLOW_DOT_in_apply649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_apply651  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_apply651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_apply651	= { FOLLOW_SCOPE_in_apply651_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_apply653  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_apply653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_apply653	= { FOLLOW_IDENT_in_apply653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_apply658  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_apply658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_apply658	= { FOLLOW_arglist_in_apply658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_APPLY_in_apply669  */
static	ANTLR3_BITWORD FOLLOW_APPLY_in_apply669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_APPLY_in_apply669	= { FOLLOW_APPLY_in_apply669_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_apply672  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_apply672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_apply672	= { FOLLOW_DOT_in_apply672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_apply676  */
static	ANTLR3_BITWORD FOLLOW_expr_in_apply676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_apply676	= { FOLLOW_expr_in_apply676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_apply679  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_apply679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_apply679	= { FOLLOW_IDENT_in_apply679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arglist_in_apply684  */
static	ANTLR3_BITWORD FOLLOW_arglist_in_apply684_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arglist_in_apply684	= { FOLLOW_arglist_in_apply684_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IF_in_apply695  */
static	ANTLR3_BITWORD FOLLOW_IF_in_apply695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IF_in_apply695	= { FOLLOW_IF_in_apply695_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_apply699  */
static	ANTLR3_BITWORD FOLLOW_expr_in_apply699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_apply699	= { FOLLOW_expr_in_apply699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_apply704  */
static	ANTLR3_BITWORD FOLLOW_block_in_apply704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_apply704	= { FOLLOW_block_in_apply704_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_apply709  */
static	ANTLR3_BITWORD FOLLOW_block_in_apply709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_apply709	= { FOLLOW_block_in_apply709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FOR_in_apply720  */
static	ANTLR3_BITWORD FOLLOW_FOR_in_apply720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FOR_in_apply720	= { FOLLOW_FOR_in_apply720_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_apply724  */
static	ANTLR3_BITWORD FOLLOW_block_in_apply724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_apply724	= { FOLLOW_block_in_apply724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_apply729  */
static	ANTLR3_BITWORD FOLLOW_block_in_apply729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_apply729	= { FOLLOW_block_in_apply729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_apply734  */
static	ANTLR3_BITWORD FOLLOW_block_in_apply734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_apply734	= { FOLLOW_block_in_apply734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_apply739  */
static	ANTLR3_BITWORD FOLLOW_block_in_apply739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_apply739	= { FOLLOW_block_in_apply739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_literal761  */
static	ANTLR3_BITWORD FOLLOW_93_in_literal761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_literal761	= { FOLLOW_93_in_literal761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_literal769  */
static	ANTLR3_BITWORD FOLLOW_88_in_literal769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_literal769	= { FOLLOW_88_in_literal769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_literal777  */
static	ANTLR3_BITWORD FOLLOW_92_in_literal777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_literal777	= { FOLLOW_92_in_literal777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEX_LITERAL_in_literal785  */
static	ANTLR3_BITWORD FOLLOW_HEX_LITERAL_in_literal785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_HEX_LITERAL_in_literal785	= { FOLLOW_HEX_LITERAL_in_literal785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OCT_LITERAL_in_literal793  */
static	ANTLR3_BITWORD FOLLOW_OCT_LITERAL_in_literal793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OCT_LITERAL_in_literal793	= { FOLLOW_OCT_LITERAL_in_literal793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_LITERAL_in_literal801  */
static	ANTLR3_BITWORD FOLLOW_INT_LITERAL_in_literal801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_LITERAL_in_literal801	= { FOLLOW_INT_LITERAL_in_literal801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_LITERAL_in_literal809  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_LITERAL_in_literal809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_LITERAL_in_literal809	= { FOLLOW_FLOAT_LITERAL_in_literal809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_SINGLE_in_literal817  */
static	ANTLR3_BITWORD FOLLOW_STRING_SINGLE_in_literal817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_SINGLE_in_literal817	= { FOLLOW_STRING_SINGLE_in_literal817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_DOUBLE_in_literal825  */
static	ANTLR3_BITWORD FOLLOW_STRING_DOUBLE_in_literal825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_DOUBLE_in_literal825	= { FOLLOW_STRING_DOUBLE_in_literal825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_literal833  */
static	ANTLR3_BITWORD FOLLOW_array_in_literal833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_literal833	= { FOLLOW_array_in_literal833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_in_literal841  */
static	ANTLR3_BITWORD FOLLOW_object_in_literal841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_in_literal841	= { FOLLOW_object_in_literal841_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_closure_in_literal849  */
static	ANTLR3_BITWORD FOLLOW_closure_in_literal849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_closure_in_literal849	= { FOLLOW_closure_in_literal849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OBJECT_in_object875  */
static	ANTLR3_BITWORD FOLLOW_OBJECT_in_object875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OBJECT_in_object875	= { FOLLOW_OBJECT_in_object875_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_pair_in_object880  */
static	ANTLR3_BITWORD FOLLOW_object_pair_in_object880_bits[]	= { ANTLR3_UINT64_LIT(0x0000200000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_object_pair_in_object880	= { FOLLOW_object_pair_in_object880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PAIR_in_object_pair906  */
static	ANTLR3_BITWORD FOLLOW_PAIR_in_object_pair906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_PAIR_in_object_pair906	= { FOLLOW_PAIR_in_object_pair906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_object_pair908  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_object_pair908_bits[]	= { ANTLR3_UINT64_LIT(0x0055DB77598FFF70), ANTLR3_UINT64_LIT(0x0000000031000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_object_pair908	= { FOLLOW_IDENT_in_object_pair908_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_object_pair912  */
static	ANTLR3_BITWORD FOLLOW_expr_in_object_pair912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_object_pair912	= { FOLLOW_expr_in_object_pair912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARRAY_in_array940  */
static	ANTLR3_BITWORD FOLLOW_ARRAY_in_array940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARRAY_in_array940	= { FOLLOW_ARRAY_in_array940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_array946  */
static	ANTLR3_BITWORD FOLLOW_expr_in_array946_bits[]	= { ANTLR3_UINT64_LIT(0x0055DB77598FFF78), ANTLR3_UINT64_LIT(0x0000000031000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_array946	= { FOLLOW_expr_in_array946_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARGS_in_arglist980  */
static	ANTLR3_BITWORD FOLLOW_ARGS_in_arglist980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARGS_in_arglist980	= { FOLLOW_ARGS_in_arglist980_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_arglist985  */
static	ANTLR3_BITWORD FOLLOW_expr_in_arglist985_bits[]	= { ANTLR3_UINT64_LIT(0x0055DB77598FFF78), ANTLR3_UINT64_LIT(0x0000000031000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_arglist985	= { FOLLOW_expr_in_arglist985_bits, 2	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start prog
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:34:1: prog[ donut::Source* code] returns [ unsigned int mainClosure ] : closure[$code] ;
 */
static unsigned int
prog(pCompiler ctx, donut::Source* code)
{
    unsigned int mainClosure;


    Compiler_closure_return closure1;
    #undef	RETURN_TYPE_closure1
    #define	RETURN_TYPE_closure1 Compiler_closure_return

    /* Initialize rule variables
     */

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:35:2: ( closure[$code] )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:35:4: closure[$code]
        {
            FOLLOWPUSH(FOLLOW_closure_in_prog61);
            closure1=closure(ctx, code);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogEx;
            }


            {

                		mainClosure= 
                closure1.closureNo
                ;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleprogEx; /* Prevent compiler warnings */
    ruleprogEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return mainClosure;
}
/* $ANTLR end prog */

/**
 * $ANTLR start closure
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:41:1: closure[ donut::Source* code] returns [ std::vector<donut::Instruction> asmlist, unsigned int closureNo ] : ^( CLOS vars[$code] block[$code] ) ;
 */
static Compiler_closure_return
closure(pCompiler ctx, donut::Source* code)
{
    Compiler_closure_return retval;


    std::vector<std::string> vars2;
    #undef	RETURN_TYPE_vars2
    #define	RETURN_TYPE_vars2 std::vector<std::string>

    std::vector<donut::Instruction> block3;
    #undef	RETURN_TYPE_block3
    #define	RETURN_TYPE_block3 std::vector<donut::Instruction>

    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:42:2: ( ^( CLOS vars[$code] block[$code] ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:42:4: ^( CLOS vars[$code] block[$code] )
        {
             MATCHT(CLOS, &FOLLOW_CLOS_in_closure83);
            if  (HASEXCEPTION())
            {
                goto ruleclosureEx;
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL);
            if  (HASEXCEPTION())
            {
                goto ruleclosureEx;
            }

            FOLLOWPUSH(FOLLOW_vars_in_closure85);
            vars2=vars(ctx, code);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclosureEx;
            }


            FOLLOWPUSH(FOLLOW_block_in_closure88);
            block3=block(ctx, code);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleclosureEx;
            }


            {

                		Handler<donut::Closure> closure = Handler<donut::Closure>(new donut::Closure(vars2
                , block3
                ));
                		retval.closureNo= code->constCode<Handler<donut::Closure> >(closure);

                		closure->code(retval.closureNo
                );
                		retval.asmlist
                .push_back(Inst::Push | retval.closureNo
                );
                	
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL);
            if  (HASEXCEPTION())
            {
                goto ruleclosureEx;
            }



        }

    }

    // This is where rules clean up and exit
    //
    goto ruleclosureEx; /* Prevent compiler warnings */
    ruleclosureEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end closure */

/**
 * $ANTLR start vars
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:52:1: vars[ donut::Source* code ] returns [ std::vector<std::string> list ] : ^( VARS ( IDENT )* ) ;
 */
static std::vector<std::string>
vars(pCompiler ctx, donut::Source* code)
{
    std::vector<std::string> list;


    pANTLR3_BASE_TREE    IDENT4;

    /* Initialize rule variables
     */

    IDENT4       = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:53:2: ( ^( VARS ( IDENT )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:53:4: ^( VARS ( IDENT )* )
        {
             MATCHT(VARS, &FOLLOW_VARS_in_vars113);
            if  (HASEXCEPTION())
            {
                goto rulevarsEx;
            }


            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL);
                if  (HASEXCEPTION())
                {
                    goto rulevarsEx;
                }

                // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:53:11: ( IDENT )*

                for (;;)
                {
                    int alt1=2;
                    switch ( LA(1) )
                    {
                    case IDENT:
                    	{
                    		alt1=1;
                    	}
                        break;

                    }

                    switch (alt1)
                    {
                	case 1:
                	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:53:12: IDENT
                	    {
                	        IDENT4 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_vars116);
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulevarsEx;
                	        }


                	        {

                	            		list.push_back(createStringFromString((IDENT4->getText(IDENT4))));
                	            	
                	        }


                	    }
                	    break;

                	default:
                	    goto loop1;	/* break out of the loop */
                	    break;
                    }
                }
                loop1: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL);
                if  (HASEXCEPTION())
                {
                    goto rulevarsEx;
                }

            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevarsEx; /* Prevent compiler warnings */
    rulevarsEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return list;
}
/* $ANTLR end vars */

/**
 * $ANTLR start block
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:57:1: block[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : ^( CONT (ex= expr[$code] )* ) ;
 */
static std::vector<donut::Instruction>
block(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    std::vector<donut::Instruction> ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex std::vector<donut::Instruction>

    /* Initialize rule variables
     */

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:67:2: ( ^( CONT (ex= expr[$code] )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:67:4: ^( CONT (ex= expr[$code] )* )
        {
             MATCHT(CONT, &FOLLOW_CONT_in_block140);
            if  (HASEXCEPTION())
            {
                goto ruleblockEx;
            }


            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL);
                if  (HASEXCEPTION())
                {
                    goto ruleblockEx;
                }

                // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:67:11: (ex= expr[$code] )*

                for (;;)
                {
                    int alt2=2;
                    switch ( LA(1) )
                    {
                    case ADD:
                    case AND:
                    case APPLY:
                    case ARRAY:
                    case ASSIGN:
                    case ASSIGN_OP:
                    case BIT_AND:
                    case BIT_OR:
                    case CEQ:
                    case CGE:
                    case CGT:
                    case CLE:
                    case CLOS:
                    case CLT:
                    case CNE:
                    case DIV:
                    case DOT:
                    case FLOAT_LITERAL:
                    case FOR:
                    case HEX_LITERAL:
                    case IDX:
                    case IF:
                    case INT_LITERAL:
                    case MINUS:
                    case MOD:
                    case MUL:
                    case NOT:
                    case OBJECT:
                    case OCT_LITERAL:
                    case OR:
                    case PLUS:
                    case POST_OP:
                    case PRE_OP:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case SUB:
                    case 88:
                    case 92:
                    case 93:
                    	{
                    		alt2=1;
                    	}
                        break;

                    }

                    switch (alt2)
                    {
                	case 1:
                	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:67:12: ex= expr[$code]
                	    {
                	        FOLLOWPUSH(FOLLOW_expr_in_block145);
                	        ex=expr(ctx, code);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleblockEx;
                	        }


                	        {

                	            		asmlist
                	            .insert(asmlist
                	            .end(), ex
                	            .begin(), ex
                	            .end());
                	            		asmlist
                	            .push_back(Inst::Pop | 0);
                	            	
                	        }


                	    }
                	    break;

                	default:
                	    goto loop2;	/* break out of the loop */
                	    break;
                    }
                }
                loop2: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL);
                if  (HASEXCEPTION())
                {
                    goto ruleblockEx;
                }

            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	if( asmlist
                    .empty() ){
                    		//null値がセットされる
                    			asmlist
                    .push_back(Inst::Push | code->constCode<std::nullptr_t>(nullptr));
                    	}else{
                    		//最後のpopは削除する（＝値がひとつだけ残る）
                    		
                    asmlist
                    .erase(asmlist
                    .end()-1);
                    	}

                }
            }


    return asmlist;
}
/* $ANTLR end block */

/**
 * $ANTLR start operation
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:74:1: operation returns [ std::string sym ] : ( ADD | SUB | MUL | DIV | MOD | AND | OR | CLT | CGT | CLE | CGE | CEQ | CNE | BIT_OR | BIT_AND );
 */
static std::string
operation(pCompiler ctx)
{
    std::string sym;


    /* Initialize rule variables
     */

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:75:2: ( ADD | SUB | MUL | DIV | MOD | AND | OR | CLT | CGT | CLE | CGE | CEQ | CNE | BIT_OR | BIT_AND )

            ANTLR3_UINT32 alt3;

            alt3=15;

            switch ( LA(1) )
            {
            case ADD:
            	{
            		alt3=1;
            	}
                break;
            case SUB:
            	{
            		alt3=2;
            	}
                break;
            case MUL:
            	{
            		alt3=3;
            	}
                break;
            case DIV:
            	{
            		alt3=4;
            	}
                break;
            case MOD:
            	{
            		alt3=5;
            	}
                break;
            case AND:
            	{
            		alt3=6;
            	}
                break;
            case OR:
            	{
            		alt3=7;
            	}
                break;
            case CLT:
            	{
            		alt3=8;
            	}
                break;
            case CGT:
            	{
            		alt3=9;
            	}
                break;
            case CLE:
            	{
            		alt3=10;
            	}
                break;
            case CGE:
            	{
            		alt3=11;
            	}
                break;
            case CEQ:
            	{
            		alt3=12;
            	}
                break;
            case CNE:
            	{
            		alt3=13;
            	}
                break;
            case BIT_OR:
            	{
            		alt3=14;
            	}
                break;
            case BIT_AND:
            	{
            		alt3=15;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 3;
                EXCEPTION->state        = 0;


                goto ruleoperationEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:75:4: ADD
        	    {
        	         MATCHT(ADD, &FOLLOW_ADD_in_operation167);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym="opAdd"; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:76:4: SUB
        	    {
        	         MATCHT(SUB, &FOLLOW_SUB_in_operation174);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym="opSub"; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:77:4: MUL
        	    {
        	         MATCHT(MUL, &FOLLOW_MUL_in_operation181);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opMul"; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:78:4: DIV
        	    {
        	         MATCHT(DIV, &FOLLOW_DIV_in_operation188);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opDiv"; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:79:4: MOD
        	    {
        	         MATCHT(MOD, &FOLLOW_MOD_in_operation195);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opMod"; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:80:4: AND
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_operation202);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opAnd"; 
        	        }


        	    }
        	    break;
        	case 7:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:81:4: OR
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_operation209);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opOr"; 
        	        }


        	    }
        	    break;
        	case 8:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:82:4: CLT
        	    {
        	         MATCHT(CLT, &FOLLOW_CLT_in_operation216);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opLt"; 
        	        }


        	    }
        	    break;
        	case 9:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:83:4: CGT
        	    {
        	         MATCHT(CGT, &FOLLOW_CGT_in_operation223);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opGt"; 
        	        }


        	    }
        	    break;
        	case 10:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:84:4: CLE
        	    {
        	         MATCHT(CLE, &FOLLOW_CLE_in_operation230);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opLe"; 
        	        }


        	    }
        	    break;
        	case 11:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:85:4: CGE
        	    {
        	         MATCHT(CGE, &FOLLOW_CGE_in_operation237);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opGe"; 
        	        }


        	    }
        	    break;
        	case 12:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:86:4: CEQ
        	    {
        	         MATCHT(CEQ, &FOLLOW_CEQ_in_operation244);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opEq"; 
        	        }


        	    }
        	    break;
        	case 13:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:87:4: CNE
        	    {
        	         MATCHT(CNE, &FOLLOW_CNE_in_operation251);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	             sym = "opNe"; 
        	        }


        	    }
        	    break;
        	case 14:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:88:4: BIT_OR
        	    {
        	         MATCHT(BIT_OR, &FOLLOW_BIT_OR_in_operation258);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	            sym="opBitOr";
        	        }


        	    }
        	    break;
        	case 15:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:89:4: BIT_AND
        	    {
        	         MATCHT(BIT_AND, &FOLLOW_BIT_AND_in_operation265);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperationEx;
        	        }


        	        {
        	            sym="opBitAnd";
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleoperationEx; /* Prevent compiler warnings */
    ruleoperationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sym;
}
/* $ANTLR end operation */

/**
 * $ANTLR start unary_operation
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:92:1: unary_operation returns [ std::string sym ] : ( PLUS | MINUS | NOT );
 */
static std::string
unary_operation(pCompiler ctx)
{
    std::string sym;


    /* Initialize rule variables
     */

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:93:2: ( PLUS | MINUS | NOT )

            ANTLR3_UINT32 alt4;

            alt4=3;

            switch ( LA(1) )
            {
            case PLUS:
            	{
            		alt4=1;
            	}
                break;
            case MINUS:
            	{
            		alt4=2;
            	}
                break;
            case NOT:
            	{
            		alt4=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruleunary_operationEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:93:4: PLUS
        	    {
        	         MATCHT(PLUS, &FOLLOW_PLUS_in_unary_operation282);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunary_operationEx;
        	        }


        	        {
        	             sym="opPlus"; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:94:4: MINUS
        	    {
        	         MATCHT(MINUS, &FOLLOW_MINUS_in_unary_operation289);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunary_operationEx;
        	        }


        	        {
        	             sym="opMinus"; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:95:4: NOT
        	    {
        	         MATCHT(NOT, &FOLLOW_NOT_in_unary_operation296);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunary_operationEx;
        	        }


        	        {
        	             sym="opNot"; 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleunary_operationEx; /* Prevent compiler warnings */
    ruleunary_operationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sym;
}
/* $ANTLR end unary_operation */

/**
 * $ANTLR start expr
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:98:1: expr[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : (lt= literal[$code] |app= apply[$code] |idx= index[$code] | ^( POST_OP postop= operation ^( DOT SCOPE IDENT ) ) | ^( POST_OP postop= operation ^( DOT postexpr= expr[$code] IDENT ) ) | ^( PRE_OP preop= operation ^( DOT SCOPE IDENT ) ) | ^( PRE_OP preop= operation ^( DOT preexpr= expr[$code] IDENT ) ) | ^( ASSIGN ^( DOT SCOPE IDENT ) asrhs= expr[$code] ) | ^( ASSIGN ^( DOT asscope= expr[$code] IDENT ) asrhs= expr[$code] ) | ^( ASSIGN_OP asopoperation= operation ^( DOT SCOPE IDENT ) asoprhs= expr[$code] ) | ^( ASSIGN_OP operation ^( DOT asopscope= expr[$code] IDENT ) asoprhs= expr[$code] ) | ^( unary_operation uobj= expr[$code] ) | ^(biop= operation blhs= expr[$code] brhs= expr[$code] ) | ^( DOT dexpr= expr[$code] IDENT ) | ^( DOT SCOPE IDENT ) );
 */
static std::vector<donut::Instruction>
expr(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    pANTLR3_BASE_TREE    IDENT5;
    pANTLR3_BASE_TREE    IDENT6;
    pANTLR3_BASE_TREE    IDENT7;
    pANTLR3_BASE_TREE    IDENT8;
    pANTLR3_BASE_TREE    IDENT9;
    pANTLR3_BASE_TREE    IDENT10;
    pANTLR3_BASE_TREE    IDENT11;
    pANTLR3_BASE_TREE    IDENT12;
    pANTLR3_BASE_TREE    IDENT14;
    pANTLR3_BASE_TREE    IDENT15;
    std::vector<donut::Instruction> lt;
    #undef	RETURN_TYPE_lt
    #define	RETURN_TYPE_lt std::vector<donut::Instruction>

    std::vector<donut::Instruction> app;
    #undef	RETURN_TYPE_app
    #define	RETURN_TYPE_app std::vector<donut::Instruction>

    std::vector<donut::Instruction> idx;
    #undef	RETURN_TYPE_idx
    #define	RETURN_TYPE_idx std::vector<donut::Instruction>

    std::string postop;
    #undef	RETURN_TYPE_postop
    #define	RETURN_TYPE_postop std::string

    std::vector<donut::Instruction> postexpr;
    #undef	RETURN_TYPE_postexpr
    #define	RETURN_TYPE_postexpr std::vector<donut::Instruction>

    std::string preop;
    #undef	RETURN_TYPE_preop
    #define	RETURN_TYPE_preop std::string

    std::vector<donut::Instruction> preexpr;
    #undef	RETURN_TYPE_preexpr
    #define	RETURN_TYPE_preexpr std::vector<donut::Instruction>

    std::vector<donut::Instruction> asrhs;
    #undef	RETURN_TYPE_asrhs
    #define	RETURN_TYPE_asrhs std::vector<donut::Instruction>

    std::vector<donut::Instruction> asscope;
    #undef	RETURN_TYPE_asscope
    #define	RETURN_TYPE_asscope std::vector<donut::Instruction>

    std::string asopoperation;
    #undef	RETURN_TYPE_asopoperation
    #define	RETURN_TYPE_asopoperation std::string

    std::vector<donut::Instruction> asoprhs;
    #undef	RETURN_TYPE_asoprhs
    #define	RETURN_TYPE_asoprhs std::vector<donut::Instruction>

    std::vector<donut::Instruction> asopscope;
    #undef	RETURN_TYPE_asopscope
    #define	RETURN_TYPE_asopscope std::vector<donut::Instruction>

    std::vector<donut::Instruction> uobj;
    #undef	RETURN_TYPE_uobj
    #define	RETURN_TYPE_uobj std::vector<donut::Instruction>

    std::string biop;
    #undef	RETURN_TYPE_biop
    #define	RETURN_TYPE_biop std::string

    std::vector<donut::Instruction> blhs;
    #undef	RETURN_TYPE_blhs
    #define	RETURN_TYPE_blhs std::vector<donut::Instruction>

    std::vector<donut::Instruction> brhs;
    #undef	RETURN_TYPE_brhs
    #define	RETURN_TYPE_brhs std::vector<donut::Instruction>

    std::vector<donut::Instruction> dexpr;
    #undef	RETURN_TYPE_dexpr
    #define	RETURN_TYPE_dexpr std::vector<donut::Instruction>

    std::string unary_operation13;
    #undef	RETURN_TYPE_unary_operation13
    #define	RETURN_TYPE_unary_operation13 std::string

    /* Initialize rule variables
     */

    IDENT5       = NULL;
    IDENT6       = NULL;
    IDENT7       = NULL;
    IDENT8       = NULL;
    IDENT9       = NULL;
    IDENT10       = NULL;
    IDENT11       = NULL;
    IDENT12       = NULL;
    IDENT14       = NULL;
    IDENT15       = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:99:2: (lt= literal[$code] |app= apply[$code] |idx= index[$code] | ^( POST_OP postop= operation ^( DOT SCOPE IDENT ) ) | ^( POST_OP postop= operation ^( DOT postexpr= expr[$code] IDENT ) ) | ^( PRE_OP preop= operation ^( DOT SCOPE IDENT ) ) | ^( PRE_OP preop= operation ^( DOT preexpr= expr[$code] IDENT ) ) | ^( ASSIGN ^( DOT SCOPE IDENT ) asrhs= expr[$code] ) | ^( ASSIGN ^( DOT asscope= expr[$code] IDENT ) asrhs= expr[$code] ) | ^( ASSIGN_OP asopoperation= operation ^( DOT SCOPE IDENT ) asoprhs= expr[$code] ) | ^( ASSIGN_OP operation ^( DOT asopscope= expr[$code] IDENT ) asoprhs= expr[$code] ) | ^( unary_operation uobj= expr[$code] ) | ^(biop= operation blhs= expr[$code] brhs= expr[$code] ) | ^( DOT dexpr= expr[$code] IDENT ) | ^( DOT SCOPE IDENT ) )

            ANTLR3_UINT32 alt5;

            alt5=15;

            switch ( LA(1) )
            {
            case ARRAY:
            case CLOS:
            case FLOAT_LITERAL:
            case HEX_LITERAL:
            case INT_LITERAL:
            case OBJECT:
            case OCT_LITERAL:
            case STRING_DOUBLE:
            case STRING_SINGLE:
            case 88:
            case 92:
            case 93:
            	{
            		alt5=1;
            	}
                break;
            case APPLY:
            case FOR:
            case IF:
            	{
            		alt5=2;
            	}
                break;
            case IDX:
            	{
            		alt5=3;
            	}
                break;
            case POST_OP:
            	{
            		switch ( LA(2) )
            		{
            		case DOWN:
            			{
            				switch ( LA(3) )
            				{
            				case ADD:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 16;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case SUB:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 17;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case MUL:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 18;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case DIV:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 19;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case MOD:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 20;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case AND:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 21;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case OR:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 22;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CLT:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 23;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CGT:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 24;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CLE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 25;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CGE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 26;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CEQ:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 27;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CNE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 28;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case BIT_OR:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 29;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case BIT_AND:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=4;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=5;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 68;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 64;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 30;


            						    goto ruleexprEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 5;
            				    EXCEPTION->state        = 11;


            				    goto ruleexprEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 5;
            		    EXCEPTION->state        = 4;


            		    goto ruleexprEx;

            		}

            	}
                break;
            case PRE_OP:
            	{
            		switch ( LA(2) )
            		{
            		case DOWN:
            			{
            				switch ( LA(3) )
            				{
            				case ADD:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 31;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case SUB:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 32;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case MUL:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 33;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case DIV:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 34;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case MOD:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 35;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case AND:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 36;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case OR:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 37;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CLT:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 38;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CGT:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 39;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CLE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 40;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CGE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 41;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CEQ:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 42;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CNE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 43;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case BIT_OR:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 44;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case BIT_AND:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=6;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=7;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 69;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 65;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 45;


            						    goto ruleexprEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 5;
            				    EXCEPTION->state        = 12;


            				    goto ruleexprEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 5;
            		    EXCEPTION->state        = 5;


            		    goto ruleexprEx;

            		}

            	}
                break;
            case ASSIGN:
            	{
            		switch ( LA(2) )
            		{
            		case DOWN:
            			{
            				switch ( LA(3) )
            				{
            				case DOT:
            					{
            						switch ( LA(4) )
            						{
            						case DOWN:
            							{
            								switch ( LA(5) )
            								{
            								case SCOPE:
            									{
            										alt5=8;
            									}
            								    break;
            								case ADD:
            								case AND:
            								case APPLY:
            								case ARRAY:
            								case ASSIGN:
            								case ASSIGN_OP:
            								case BIT_AND:
            								case BIT_OR:
            								case CEQ:
            								case CGE:
            								case CGT:
            								case CLE:
            								case CLOS:
            								case CLT:
            								case CNE:
            								case DIV:
            								case DOT:
            								case FLOAT_LITERAL:
            								case FOR:
            								case HEX_LITERAL:
            								case IDX:
            								case IF:
            								case INT_LITERAL:
            								case MINUS:
            								case MOD:
            								case MUL:
            								case NOT:
            								case OBJECT:
            								case OCT_LITERAL:
            								case OR:
            								case PLUS:
            								case POST_OP:
            								case PRE_OP:
            								case STRING_DOUBLE:
            								case STRING_SINGLE:
            								case SUB:
            								case 88:
            								case 92:
            								case 93:
            									{
            										alt5=9;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 66;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 46;


            						    goto ruleexprEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 5;
            				    EXCEPTION->state        = 13;


            				    goto ruleexprEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 5;
            		    EXCEPTION->state        = 6;


            		    goto ruleexprEx;

            		}

            	}
                break;
            case ASSIGN_OP:
            	{
            		switch ( LA(2) )
            		{
            		case DOWN:
            			{
            				switch ( LA(3) )
            				{
            				case ADD:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 47;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case SUB:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 48;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case MUL:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 49;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case DIV:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 50;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case MOD:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 51;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case AND:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 52;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case OR:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 53;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CLT:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 54;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CGT:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 55;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CLE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 56;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CGE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 57;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CEQ:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 58;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case CNE:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 59;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case BIT_OR:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 60;


            						    goto ruleexprEx;

            						}

            					}
            				    break;
            				case BIT_AND:
            					{
            						switch ( LA(4) )
            						{
            						case DOT:
            							{
            								switch ( LA(5) )
            								{
            								case DOWN:
            									{
            										switch ( LA(6) )
            										{
            										case SCOPE:
            											{
            												alt5=10;
            											}
            										    break;
            										case ADD:
            										case AND:
            										case APPLY:
            										case ARRAY:
            										case ASSIGN:
            										case ASSIGN_OP:
            										case BIT_AND:
            										case BIT_OR:
            										case CEQ:
            										case CGE:
            										case CGT:
            										case CLE:
            										case CLOS:
            										case CLT:
            										case CNE:
            										case DIV:
            										case DOT:
            										case FLOAT_LITERAL:
            										case FOR:
            										case HEX_LITERAL:
            										case IDX:
            										case IF:
            										case INT_LITERAL:
            										case MINUS:
            										case MOD:
            										case MUL:
            										case NOT:
            										case OBJECT:
            										case OCT_LITERAL:
            										case OR:
            										case PLUS:
            										case POST_OP:
            										case PRE_OP:
            										case STRING_DOUBLE:
            										case STRING_SINGLE:
            										case SUB:
            										case 88:
            										case 92:
            										case 93:
            											{
            												alt5=11;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 5;
            										    EXCEPTION->state        = 72;


            										    goto ruleexprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 5;
            								    EXCEPTION->state        = 67;


            								    goto ruleexprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 5;
            						    EXCEPTION->state        = 61;


            						    goto ruleexprEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 5;
            				    EXCEPTION->state        = 14;


            				    goto ruleexprEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 5;
            		    EXCEPTION->state        = 7;


            		    goto ruleexprEx;

            		}

            	}
                break;
            case MINUS:
            case NOT:
            case PLUS:
            	{
            		alt5=12;
            	}
                break;
            case ADD:
            case AND:
            case BIT_AND:
            case BIT_OR:
            case CEQ:
            case CGE:
            case CGT:
            case CLE:
            case CLT:
            case CNE:
            case DIV:
            case MOD:
            case MUL:
            case OR:
            case SUB:
            	{
            		alt5=13;
            	}
                break;
            case DOT:
            	{
            		switch ( LA(2) )
            		{
            		case DOWN:
            			{
            				switch ( LA(3) )
            				{
            				case SCOPE:
            					{
            						alt5=15;
            					}
            				    break;
            				case ADD:
            				case AND:
            				case APPLY:
            				case ARRAY:
            				case ASSIGN:
            				case ASSIGN_OP:
            				case BIT_AND:
            				case BIT_OR:
            				case CEQ:
            				case CGE:
            				case CGT:
            				case CLE:
            				case CLOS:
            				case CLT:
            				case CNE:
            				case DIV:
            				case DOT:
            				case FLOAT_LITERAL:
            				case FOR:
            				case HEX_LITERAL:
            				case IDX:
            				case IF:
            				case INT_LITERAL:
            				case MINUS:
            				case MOD:
            				case MUL:
            				case NOT:
            				case OBJECT:
            				case OCT_LITERAL:
            				case OR:
            				case PLUS:
            				case POST_OP:
            				case PRE_OP:
            				case STRING_DOUBLE:
            				case STRING_SINGLE:
            				case SUB:
            				case 88:
            				case 92:
            				case 93:
            					{
            						alt5=14;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 5;
            				    EXCEPTION->state        = 15;


            				    goto ruleexprEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 5;
            		    EXCEPTION->state        = 10;


            		    goto ruleexprEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto ruleexprEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:99:4: lt= literal[$code]
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_expr317);
        	        lt=literal(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {
        	             asmlist
        	            .swap(lt
        	            ); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:100:4: app= apply[$code]
        	    {
        	        FOLLOWPUSH(FOLLOW_apply_in_expr327);
        	        app=apply(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {
        	             asmlist
        	            .swap(app
        	            ); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:101:4: idx= index[$code]
        	    {
        	        FOLLOWPUSH(FOLLOW_index_in_expr337);
        	        idx=index(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {
        	             asmlist
        	            .swap(idx
        	            ); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:102:4: ^( POST_OP postop= operation ^( DOT SCOPE IDENT ) )
        	    {
        	         MATCHT(POST_OP, &FOLLOW_POST_OP_in_expr346);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_operation_in_expr350);
        	        postop=operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	         MATCHT(DOT, &FOLLOW_DOT_in_expr353);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_expr355);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT5 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr357);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        {

        	            		//設定先を取得
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT5->getText(IDENT5)))));
        	            		
        	            asmlist
        	            .push_back(Inst::SearchScope);
        	            		asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT5->getText(IDENT5)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            			//演算オブジェクト
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT5->getText(IDENT5)))));
        	            			
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            			asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            			//操作を実行
        	            			asmlist
        	            .push_back(Inst::PushCopy | 0);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            postop
        	            ));
        	            			asmlist
        	            .push_back(Inst::LoadObj);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<int>(1));
        	            			
        	            asmlist
        	            .push_back(Inst::Apply | 1);
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            		asmlist
        	            .push_back(Inst::Pop | 0);
        	            		//退避してたのを戻す
        	            		asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:125:4: ^( POST_OP postop= operation ^( DOT postexpr= expr[$code] IDENT ) )
        	    {
        	         MATCHT(POST_OP, &FOLLOW_POST_OP_in_expr367);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_operation_in_expr371);
        	        postop=operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	         MATCHT(DOT, &FOLLOW_DOT_in_expr374);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_expr378);
        	        postexpr=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT6 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr381);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        {

        	            		//設定先を取得
        	            		asmlist
        	            .insert(asmlist
        	            .end(), postexpr
        	            .begin(), postexpr
        	            .end());
        	            		asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT6->getText(IDENT6)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            			//演算オブジェクト
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT6->getText(IDENT6)))));
        	            			
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            			asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            			//操作を実行
        	            			asmlist
        	            .push_back(Inst::PushCopy | 0);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            postop
        	            ));
        	            			asmlist
        	            .push_back(Inst::LoadObj);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<int>(1));
        	            			
        	            asmlist
        	            .push_back(Inst::Apply | 1);
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            		asmlist
        	            .push_back(Inst::Pop | 0);
        	            		//退避してたのを戻す
        	            		asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 6:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:147:4: ^( PRE_OP preop= operation ^( DOT SCOPE IDENT ) )
        	    {
        	         MATCHT(PRE_OP, &FOLLOW_PRE_OP_in_expr391);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_operation_in_expr395);
        	        preop=operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	         MATCHT(DOT, &FOLLOW_DOT_in_expr398);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_expr400);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT7 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr402);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        {

        	            		//設定先を取得
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT7->getText(IDENT7)))));
        	            		
        	            asmlist
        	            .push_back(Inst::SearchScope);
        	            		asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT7->getText(IDENT7)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            			//演算オブジェクト
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT7->getText(IDENT7)))));
        	            			
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            			//操作を実行
        	            			asmlist
        	            .push_back(Inst::PushCopy | 0);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            preop
        	            ));
        	            			asmlist
        	            .push_back(Inst::LoadObj);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<int>(1));
        	            			
        	            asmlist
        	            .push_back(Inst::Apply | 1);
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 7:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:166:4: ^( PRE_OP preop= operation ^( DOT preexpr= expr[$code] IDENT ) )
        	    {
        	         MATCHT(PRE_OP, &FOLLOW_PRE_OP_in_expr412);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_operation_in_expr416);
        	        preop=operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	         MATCHT(DOT, &FOLLOW_DOT_in_expr419);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_expr423);
        	        preexpr=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT8 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr426);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        {

        	            		//設定先を取得
        	            		asmlist
        	            .insert(asmlist
        	            .end(), preexpr
        	            .begin(), preexpr
        	            .end());
        	            		asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT8->getText(IDENT8)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            			//演算オブジェクト
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT8->getText(IDENT8)))));
        	            			
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            			//操作を実行
        	            			asmlist
        	            .push_back(Inst::PushCopy | 0);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            preop
        	            ));
        	            			asmlist
        	            .push_back(Inst::LoadObj);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<int>(1));
        	            			
        	            asmlist
        	            .push_back(Inst::Apply | 0);
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 8:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:184:4: ^( ASSIGN ^( DOT SCOPE IDENT ) asrhs= expr[$code] )
        	    {
        	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_expr436);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	         MATCHT(DOT, &FOLLOW_DOT_in_expr439);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_expr441);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT9 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr443);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        FOLLOWPUSH(FOLLOW_expr_in_expr448);
        	        asrhs=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {

        	            		//適用先：解決されたスコープの先
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT9->getText(IDENT9)))));
        	            		
        	            asmlist
        	            .push_back(Inst::SearchScope);
        	            		//第一引数：名前
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT9->getText(IDENT9)))));
        	            		//第二引数：rhsオブジェクト
        	            		
        	            asmlist
        	            .insert(asmlist
        	            .end(), asrhs
        	            .begin(), asrhs
        	            .end());
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 9:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:195:4: ^( ASSIGN ^( DOT asscope= expr[$code] IDENT ) asrhs= expr[$code] )
        	    {
        	         MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_expr458);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	         MATCHT(DOT, &FOLLOW_DOT_in_expr461);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_expr465);
        	        asscope=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT10 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr468);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        FOLLOWPUSH(FOLLOW_expr_in_expr473);
        	        asrhs=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {
        	             //
        	            		//適用先：scopeオブジェクト
        	            		asmlist
        	            .insert(asmlist
        	            .end(), asscope
        	            .begin(), asscope
        	            .end());
        	            		//第一引数：名前
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT10->getText(IDENT10)))));
        	            		//第二引数：rhsオブジェクト
        	            		
        	            asmlist
        	            .insert(asmlist
        	            .end(), asrhs
        	            .begin(), asrhs
        	            .end());
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 10:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:205:4: ^( ASSIGN_OP asopoperation= operation ^( DOT SCOPE IDENT ) asoprhs= expr[$code] )
        	    {
        	         MATCHT(ASSIGN_OP, &FOLLOW_ASSIGN_OP_in_expr483);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_operation_in_expr487);
        	        asopoperation=operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	         MATCHT(DOT, &FOLLOW_DOT_in_expr490);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_expr492);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT11 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr494);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        FOLLOWPUSH(FOLLOW_expr_in_expr499);
        	        asoprhs=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {

        	            		//設定先
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT11->getText(IDENT11)))));
        	            		
        	            asmlist
        	            .push_back(Inst::SearchScope);
        	            		asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            		//名前
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT11->getText(IDENT11)))));
        	            			//操作先のオブジェクトを取得
        	            			
        	            asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT11->getText(IDENT11)))));
        	            			
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            			//メソッドを取得
        	            			asmlist
        	            .push_back(Inst::PushCopy | 0);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            asopoperation
        	            ));
        	            			asmlist
        	            .push_back(Inst::LoadObj);
        	            			//第１引数：rhsオブジェクト
        	            			asmlist
        	            .insert(asmlist
        	            .end(), asoprhs
        	            .begin(), asoprhs
        	            .end());
        	            			//実行
        	            			asmlist
        	            .push_back(Inst::Apply | 1);
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 11:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:227:4: ^( ASSIGN_OP operation ^( DOT asopscope= expr[$code] IDENT ) asoprhs= expr[$code] )
        	    {
        	         MATCHT(ASSIGN_OP, &FOLLOW_ASSIGN_OP_in_expr509);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_operation_in_expr511);
        	        operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	         MATCHT(DOT, &FOLLOW_DOT_in_expr514);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_expr518);
        	        asopscope=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT12 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr521);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        FOLLOWPUSH(FOLLOW_expr_in_expr526);
        	        asoprhs=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {

        	            		//設定先
        	            		asmlist
        	            .insert(asmlist
        	            .end(), asscope
        	            .begin(), asscope
        	            .end());
        	            		asmlist
        	            .push_back(Inst::StoreLocal | 0);
        	            		//名前
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT12->getText(IDENT12)))));
        	            			//操作先のオブジェクトを取得
        	            			
        	            asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT12->getText(IDENT12)))));
        	            			
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            			//メソッドを取得
        	            			asmlist
        	            .push_back(Inst::LoadLocal | 0);
        	            			asmlist
        	            .push_back(Inst::PushCopy | 0);
        	            			asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            asopoperation
        	            ));
        	            			asmlist
        	            .push_back(Inst::LoadObj);
        	            			//第１引数：rhsオブジェクト
        	            			asmlist
        	            .insert(asmlist
        	            .end(), asoprhs
        	            .begin(), asoprhs
        	            .end());
        	            			//実行
        	            			asmlist
        	            .push_back(Inst::Apply | 1);
        	            		//設定
        	            		asmlist
        	            .push_back(Inst::StoreObj);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 12:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:248:4: ^( unary_operation uobj= expr[$code] )
        	    {
        	        FOLLOWPUSH(FOLLOW_unary_operation_in_expr536);
        	        unary_operation13=unary_operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_expr540);
        	        uobj=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {

        	            		asmlist
        	            .insert(asmlist
        	            .end(), uobj
        	            .begin(), uobj
        	            .end());
        	            		//メソッドの解決
        	            		asmlist
        	            .push_back(Inst::PushCopy | 0);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            unary_operation13
        	            ));
        	            		asmlist
        	            .push_back(Inst::LoadObj);
        	            		//実行：引数：０
        	            		asmlist
        	            .push_back(Inst::Apply | 0);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 13:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:257:4: ^(biop= operation blhs= expr[$code] brhs= expr[$code] )
        	    {
        	        FOLLOWPUSH(FOLLOW_operation_in_expr552);
        	        biop=operation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_expr556);
        	        blhs=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expr_in_expr561);
        	        brhs=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        {

        	            		//適用先：lhs
        	            		asmlist
        	            .insert(asmlist
        	            .end(), blhs
        	            .begin(), blhs
        	            .end());
        	            		//メソッド解決
        	            		asmlist
        	            .push_back(Inst::PushCopy);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(
        	            biop
        	            ));
        	            		asmlist
        	            .push_back(Inst::LoadObj);
        	            		//第１引数：rhsオブジェクト
        	            		asmlist
        	            .insert(asmlist
        	            .end(), brhs
        	            .begin(), brhs
        	            .end());
        	            		//実行：引数：１
        	            		asmlist
        	            .push_back(Inst::Apply | 1);
        	            	
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	    }
        	    break;
        	case 14:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:269:4: ^( DOT dexpr= expr[$code] IDENT )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_expr571);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_expr575);
        	        dexpr=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT14 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr578);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        {

        	            		asmlist
        	            .insert(asmlist
        	            .end(), dexpr
        	            .begin(), dexpr
        	            .end());
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT14->getText(IDENT14)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            	
        	        }


        	    }
        	    break;
        	case 15:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:275:4: ^( DOT SCOPE IDENT )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_expr588);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }

        	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_expr590);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        IDENT15 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_expr592);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }



        	        {

        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT15->getText(IDENT15)))));
        	            		
        	            asmlist
        	            .push_back(Inst::SearchScope);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT15->getText(IDENT15)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return asmlist;
}
/* $ANTLR end expr */

/**
 * $ANTLR start index
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:284:1: index[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : ^( IDX obj= expr[$code] ex= arglist[$code] ) ;
 */
static std::vector<donut::Instruction>
index(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    std::vector<donut::Instruction> obj;
    #undef	RETURN_TYPE_obj
    #define	RETURN_TYPE_obj std::vector<donut::Instruction>

    Compiler_arglist_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex Compiler_arglist_return

    /* Initialize rule variables
     */

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:285:2: ( ^( IDX obj= expr[$code] ex= arglist[$code] ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:285:4: ^( IDX obj= expr[$code] ex= arglist[$code] )
        {
             MATCHT(IDX, &FOLLOW_IDX_in_index614);
            if  (HASEXCEPTION())
            {
                goto ruleindexEx;
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL);
            if  (HASEXCEPTION())
            {
                goto ruleindexEx;
            }

            FOLLOWPUSH(FOLLOW_expr_in_index618);
            obj=expr(ctx, code);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexEx;
            }


            FOLLOWPUSH(FOLLOW_arglist_in_index623);
            ex=arglist(ctx, code);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexEx;
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL);
            if  (HASEXCEPTION())
            {
                goto ruleindexEx;
            }



            {

                		asmlist
                .insert(asmlist
                .end(), obj
                .begin(), obj
                .end());
                		asmlist
                .push_back(Inst::PushCopy);
                		asmlist
                .push_back(Inst::Push | code->constCode<string>("opIdxGet"));
                		
                asmlist
                .push_back(Inst::LoadObj);
                		asmlist
                .insert(asmlist
                .end(), ex.asmlist
                .begin(), ex.asmlist
                .end());
                		asmlist
                .push_back(Inst::Apply | ex.count
                );
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleindexEx; /* Prevent compiler warnings */
    ruleindexEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return asmlist;
}
/* $ANTLR end index */

/**
 * $ANTLR start apply
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:296:1: apply[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : ( ^( APPLY ^( DOT SCOPE IDENT ) ex= arglist[$code] ) | ^( APPLY ^( DOT obj= expr[$code] IDENT ) ex= arglist[$code] ) | ^( IF ifcond= expr[$code] ift= block[$code] iff= block[$code] ) | ^( FOR forstart= block[$code] forcond= block[$code] fornext= block[$code] forblock= block[$code] ) );
 */
static std::vector<donut::Instruction>
apply(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    pANTLR3_BASE_TREE    IDENT16;
    pANTLR3_BASE_TREE    IDENT17;
    Compiler_arglist_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex Compiler_arglist_return

    std::vector<donut::Instruction> obj;
    #undef	RETURN_TYPE_obj
    #define	RETURN_TYPE_obj std::vector<donut::Instruction>

    std::vector<donut::Instruction> ifcond;
    #undef	RETURN_TYPE_ifcond
    #define	RETURN_TYPE_ifcond std::vector<donut::Instruction>

    std::vector<donut::Instruction> ift;
    #undef	RETURN_TYPE_ift
    #define	RETURN_TYPE_ift std::vector<donut::Instruction>

    std::vector<donut::Instruction> iff;
    #undef	RETURN_TYPE_iff
    #define	RETURN_TYPE_iff std::vector<donut::Instruction>

    std::vector<donut::Instruction> forstart;
    #undef	RETURN_TYPE_forstart
    #define	RETURN_TYPE_forstart std::vector<donut::Instruction>

    std::vector<donut::Instruction> forcond;
    #undef	RETURN_TYPE_forcond
    #define	RETURN_TYPE_forcond std::vector<donut::Instruction>

    std::vector<donut::Instruction> fornext;
    #undef	RETURN_TYPE_fornext
    #define	RETURN_TYPE_fornext std::vector<donut::Instruction>

    std::vector<donut::Instruction> forblock;
    #undef	RETURN_TYPE_forblock
    #define	RETURN_TYPE_forblock std::vector<donut::Instruction>

    /* Initialize rule variables
     */

    IDENT16       = NULL;
    IDENT17       = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:297:2: ( ^( APPLY ^( DOT SCOPE IDENT ) ex= arglist[$code] ) | ^( APPLY ^( DOT obj= expr[$code] IDENT ) ex= arglist[$code] ) | ^( IF ifcond= expr[$code] ift= block[$code] iff= block[$code] ) | ^( FOR forstart= block[$code] forcond= block[$code] fornext= block[$code] forblock= block[$code] ) )

            ANTLR3_UINT32 alt6;

            alt6=4;

            switch ( LA(1) )
            {
            case APPLY:
            	{
            		switch ( LA(2) )
            		{
            		case DOWN:
            			{
            				switch ( LA(3) )
            				{
            				case DOT:
            					{
            						switch ( LA(4) )
            						{
            						case DOWN:
            							{
            								switch ( LA(5) )
            								{
            								case SCOPE:
            									{
            										alt6=1;
            									}
            								    break;
            								case ADD:
            								case AND:
            								case APPLY:
            								case ARRAY:
            								case ASSIGN:
            								case ASSIGN_OP:
            								case BIT_AND:
            								case BIT_OR:
            								case CEQ:
            								case CGE:
            								case CGT:
            								case CLE:
            								case CLOS:
            								case CLT:
            								case CNE:
            								case DIV:
            								case DOT:
            								case FLOAT_LITERAL:
            								case FOR:
            								case HEX_LITERAL:
            								case IDX:
            								case IF:
            								case INT_LITERAL:
            								case MINUS:
            								case MOD:
            								case MUL:
            								case NOT:
            								case OBJECT:
            								case OCT_LITERAL:
            								case OR:
            								case PLUS:
            								case POST_OP:
            								case PRE_OP:
            								case STRING_DOUBLE:
            								case STRING_SINGLE:
            								case SUB:
            								case 88:
            								case 92:
            								case 93:
            									{
            										alt6=2;
            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 6;
            								    EXCEPTION->state        = 6;


            								    goto ruleapplyEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 6;
            						    EXCEPTION->state        = 5;


            						    goto ruleapplyEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 6;
            				    EXCEPTION->state        = 4;


            				    goto ruleapplyEx;

            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 6;
            		    EXCEPTION->state        = 1;


            		    goto ruleapplyEx;

            		}

            	}
                break;
            case IF:
            	{
            		alt6=3;
            	}
                break;
            case FOR:
            	{
            		alt6=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto ruleapplyEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:297:4: ^( APPLY ^( DOT SCOPE IDENT ) ex= arglist[$code] )
        	    {
        	         MATCHT(APPLY, &FOLLOW_APPLY_in_apply646);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }

        	         MATCHT(DOT, &FOLLOW_DOT_in_apply649);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }

        	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_apply651);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        IDENT16 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_apply653);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }



        	        FOLLOWPUSH(FOLLOW_arglist_in_apply658);
        	        ex=arglist(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }



        	        {

        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT16->getText(IDENT16)))));
        	            		
        	            asmlist
        	            .push_back(Inst::SearchScope);
        	            		asmlist
        	            .push_back(Inst::PushCopy);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT16->getText(IDENT16)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            		asmlist
        	            .insert(asmlist
        	            .end(), ex.asmlist
        	            .begin(), ex.asmlist
        	            .end());
        	            		asmlist
        	            .push_back(Inst::Apply | ex.count
        	            );
        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:307:4: ^( APPLY ^( DOT obj= expr[$code] IDENT ) ex= arglist[$code] )
        	    {
        	         MATCHT(APPLY, &FOLLOW_APPLY_in_apply669);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }

        	         MATCHT(DOT, &FOLLOW_DOT_in_apply672);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_apply676);
        	        obj=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        IDENT17 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_apply679);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }



        	        FOLLOWPUSH(FOLLOW_arglist_in_apply684);
        	        ex=arglist(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }



        	        {

        	            		asmlist
        	            .insert(asmlist
        	            .end(), obj
        	            .begin(), obj
        	            .end());
        	            		asmlist
        	            .push_back(Inst::PushCopy);
        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT17->getText(IDENT17)))));
        	            		
        	            asmlist
        	            .push_back(Inst::LoadObj);
        	            		asmlist
        	            .insert(asmlist
        	            .end(), ex.asmlist
        	            .begin(), ex.asmlist
        	            .end());
        	            		asmlist
        	            .push_back(Inst::Apply | ex.count
        	            );
        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:316:4: ^( IF ifcond= expr[$code] ift= block[$code] iff= block[$code] )
        	    {
        	         MATCHT(IF, &FOLLOW_IF_in_apply695);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expr_in_apply699);
        	        ifcond=expr(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_block_in_apply704);
        	        ift=block(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_block_in_apply709);
        	        iff=block(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }



        	        {

        	            		asmlist
        	            .insert(asmlist
        	            .end(), ifcond
        	            .begin(), ifcond
        	            .end());
        	            		asmlist
        	            .push_back(Inst::BranchFalse | ift
        	            .size()+1);
        	            		asmlist
        	            .insert(asmlist
        	            .end(), ift
        	            .begin(), ift
        	            .end());
        	            		asmlist
        	            .push_back(Inst::Branch | iff
        	            .size());
        	            		asmlist
        	            .insert(asmlist
        	            .end(), iff
        	            .begin(), iff
        	            .end());
        	            	
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:324:4: ^( FOR forstart= block[$code] forcond= block[$code] fornext= block[$code] forblock= block[$code] )
        	    {
        	         MATCHT(FOR, &FOLLOW_FOR_in_apply720);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_block_in_apply724);
        	        forstart=block(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_block_in_apply729);
        	        forcond=block(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_block_in_apply734);
        	        fornext=block(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_block_in_apply739);
        	        forblock=block(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleapplyEx;
        	        }



        	        {

        	            		asmlist
        	            .insert(asmlist
        	            .end(), forstart
        	            .begin(), forstart
        	            .end());
        	            		asmlist
        	            .insert(asmlist
        	            .end(), forcond
        	            .begin(), forcond
        	            .end());
        	            		asmlist
        	            .push_back(Inst::BranchFalse | forblock
        	            .size() + fornext
        	            .size()+3);
        	            		asmlist
        	            .push_back(Inst::Pop);
        	            		asmlist
        	            .insert(asmlist
        	            .end(), forblock
        	            .begin(), forblock
        	            .end());
        	            		asmlist
        	            .insert(asmlist
        	            .end(), fornext
        	            .begin(), fornext
        	            .end());
        	            		asmlist
        	            .push_back(Inst::Pop);
        	            		asmlist
        	            .push_back(Inst::Branch | ((-(forcond
        	            .size()+forblock
        	            .size()+fornext
        	            .size()+4)) & 0xffff));
        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleapplyEx; /* Prevent compiler warnings */
    ruleapplyEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return asmlist;
}
/* $ANTLR end apply */

/**
 * $ANTLR start literal
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:337:1: literal[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : ( 'true' | 'false' | 'null' | HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL | STRING_SINGLE | STRING_DOUBLE | array[$code] | object[$code] | closure[$code] );
 */
static std::vector<donut::Instruction>
literal(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    pANTLR3_BASE_TREE    HEX_LITERAL18;
    pANTLR3_BASE_TREE    OCT_LITERAL19;
    pANTLR3_BASE_TREE    INT_LITERAL20;
    pANTLR3_BASE_TREE    FLOAT_LITERAL21;
    pANTLR3_BASE_TREE    STRING_SINGLE22;
    pANTLR3_BASE_TREE    STRING_DOUBLE23;
    std::vector<donut::Instruction> array24;
    #undef	RETURN_TYPE_array24
    #define	RETURN_TYPE_array24 std::vector<donut::Instruction>

    std::vector<donut::Instruction> object25;
    #undef	RETURN_TYPE_object25
    #define	RETURN_TYPE_object25 std::vector<donut::Instruction>

    Compiler_closure_return closure26;
    #undef	RETURN_TYPE_closure26
    #define	RETURN_TYPE_closure26 Compiler_closure_return

    /* Initialize rule variables
     */

    HEX_LITERAL18       = NULL;
    OCT_LITERAL19       = NULL;
    INT_LITERAL20       = NULL;
    FLOAT_LITERAL21       = NULL;
    STRING_SINGLE22       = NULL;
    STRING_DOUBLE23       = NULL;

    {
        {
            //  /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:338:2: ( 'true' | 'false' | 'null' | HEX_LITERAL | OCT_LITERAL | INT_LITERAL | FLOAT_LITERAL | STRING_SINGLE | STRING_DOUBLE | array[$code] | object[$code] | closure[$code] )

            ANTLR3_UINT32 alt7;

            alt7=12;

            switch ( LA(1) )
            {
            case 93:
            	{
            		alt7=1;
            	}
                break;
            case 88:
            	{
            		alt7=2;
            	}
                break;
            case 92:
            	{
            		alt7=3;
            	}
                break;
            case HEX_LITERAL:
            	{
            		alt7=4;
            	}
                break;
            case OCT_LITERAL:
            	{
            		alt7=5;
            	}
                break;
            case INT_LITERAL:
            	{
            		alt7=6;
            	}
                break;
            case FLOAT_LITERAL:
            	{
            		alt7=7;
            	}
                break;
            case STRING_SINGLE:
            	{
            		alt7=8;
            	}
                break;
            case STRING_DOUBLE:
            	{
            		alt7=9;
            	}
                break;
            case ARRAY:
            	{
            		alt7=10;
            	}
                break;
            case OBJECT:
            	{
            		alt7=11;
            	}
                break;
            case CLOS:
            	{
            		alt7=12;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 7;
                EXCEPTION->state        = 0;


                goto ruleliteralEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:338:4: 'true'
        	    {
        	         MATCHT(93, &FOLLOW_93_in_literal761);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<bool>(true));
        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:342:4: 'false'
        	    {
        	         MATCHT(88, &FOLLOW_88_in_literal769);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<bool>(false));
        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:346:4: 'null'
        	    {
        	         MATCHT(92, &FOLLOW_92_in_literal777);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		asmlist
        	            .push_back(Inst::Push | code->constCode<std::nullptr_t>(nullptr));
        	            	
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:350:4: HEX_LITERAL
        	    {
        	        HEX_LITERAL18 = (pANTLR3_BASE_TREE) MATCHT(HEX_LITERAL, &FOLLOW_HEX_LITERAL_in_literal785);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		std::string str(createStringFromString((HEX_LITERAL18->getText(HEX_LITERAL18))));
        	            		int const val = parseInt(str, 16);
        	            		
        	            asmlist
        	            .push_back(Inst::Push | code->constCode<int>(val));
        	            	
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:356:4: OCT_LITERAL
        	    {
        	        OCT_LITERAL19 = (pANTLR3_BASE_TREE) MATCHT(OCT_LITERAL, &FOLLOW_OCT_LITERAL_in_literal793);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		std::string str(createStringFromString((OCT_LITERAL19->getText(OCT_LITERAL19))));
        	            		int const val = parseInt(str, 8);
        	            		
        	            asmlist
        	            .push_back(Inst::Push | code->constCode<int>(val));
        	            	
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:362:4: INT_LITERAL
        	    {
        	        INT_LITERAL20 = (pANTLR3_BASE_TREE) MATCHT(INT_LITERAL, &FOLLOW_INT_LITERAL_in_literal801);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		std::string str(createStringFromString((INT_LITERAL20->getText(INT_LITERAL20))));
        	            		int const val = parseInt(str, 10);
        	            		
        	            asmlist
        	            .push_back(Inst::Push | code->constCode<int>(val));
        	            	
        	        }


        	    }
        	    break;
        	case 7:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:368:4: FLOAT_LITERAL
        	    {
        	        FLOAT_LITERAL21 = (pANTLR3_BASE_TREE) MATCHT(FLOAT_LITERAL, &FOLLOW_FLOAT_LITERAL_in_literal809);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		std::string str(createStringFromString((FLOAT_LITERAL21->getText(FLOAT_LITERAL21))));
        	            		float const val = parseFloat(str);
        	            		
        	            asmlist
        	            .push_back(Inst::Push | code->constCode<float>(val));
        	            	
        	        }


        	    }
        	    break;
        	case 8:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:374:4: STRING_SINGLE
        	    {
        	        STRING_SINGLE22 = (pANTLR3_BASE_TREE) MATCHT(STRING_SINGLE, &FOLLOW_STRING_SINGLE_in_literal817);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		std::string str(createStringFromString((STRING_SINGLE22->getText(STRING_SINGLE22))));
        	            		str = unescapeString(str.substr(1, str.length()-2));
        	            		
        	            asmlist
        	            .push_back(Inst::Push | code->constCode<string>(str));
        	            	
        	        }


        	    }
        	    break;
        	case 9:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:380:4: STRING_DOUBLE
        	    {
        	        STRING_DOUBLE23 = (pANTLR3_BASE_TREE) MATCHT(STRING_DOUBLE, &FOLLOW_STRING_DOUBLE_in_literal825);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {

        	            		std::string str(createStringFromString((STRING_DOUBLE23->getText(STRING_DOUBLE23))));
        	            		str = unescapeString(str.substr(1, str.length()-2));
        	            		
        	            asmlist
        	            .push_back(Inst::Push | code->constCode<string>(str));
        	            	
        	        }


        	    }
        	    break;
        	case 10:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:386:4: array[$code]
        	    {
        	        FOLLOWPUSH(FOLLOW_array_in_literal833);
        	        array24=array(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {
        	             asmlist
        	            .swap(array24
        	            ); 
        	        }


        	    }
        	    break;
        	case 11:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:387:4: object[$code]
        	    {
        	        FOLLOWPUSH(FOLLOW_object_in_literal841);
        	        object25=object(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {
        	             asmlist
        	            .swap(object25
        	            ); 
        	        }


        	    }
        	    break;
        	case 12:
        	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:388:4: closure[$code]
        	    {
        	        FOLLOWPUSH(FOLLOW_closure_in_literal849);
        	        closure26=closure(ctx, code);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralEx;
        	        }


        	        {
        	             asmlist
        	            .swap(closure26.asmlist
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return asmlist;
}
/* $ANTLR end literal */

/**
 * $ANTLR start object
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:391:1: object[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : ^( OBJECT (v= object_pair[$code] )* ) ;
 */
static std::vector<donut::Instruction>
object(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    std::vector<donut::Instruction> v;
    #undef	RETURN_TYPE_v
    #define	RETURN_TYPE_v std::vector<donut::Instruction>

    /* Initialize rule variables
     */


    	int size=0;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:395:2: ( ^( OBJECT (v= object_pair[$code] )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:395:4: ^( OBJECT (v= object_pair[$code] )* )
        {
             MATCHT(OBJECT, &FOLLOW_OBJECT_in_object875);
            if  (HASEXCEPTION())
            {
                goto ruleobjectEx;
            }


            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL);
                if  (HASEXCEPTION())
                {
                    goto ruleobjectEx;
                }

                // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:395:13: (v= object_pair[$code] )*

                for (;;)
                {
                    int alt8=2;
                    switch ( LA(1) )
                    {
                    case PAIR:
                    	{
                    		alt8=1;
                    	}
                        break;

                    }

                    switch (alt8)
                    {
                	case 1:
                	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:395:14: v= object_pair[$code]
                	    {
                	        FOLLOWPUSH(FOLLOW_object_pair_in_object880);
                	        v=object_pair(ctx, code);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleobjectEx;
                	        }


                	        {

                	            		asmlist
                	            .insert(asmlist
                	            .end(), v
                	            .begin(), v
                	            .end());
                	            		size+=1;
                	            	
                	        }


                	    }
                	    break;

                	default:
                	    goto loop8;	/* break out of the loop */
                	    break;
                    }
                }
                loop8: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL);
                if  (HASEXCEPTION())
                {
                    goto ruleobjectEx;
                }

            }


            {

                		asmlist
                .push_back(Inst::ConstructObject | size);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobjectEx; /* Prevent compiler warnings */
    ruleobjectEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return asmlist;
}
/* $ANTLR end object */

/**
 * $ANTLR start object_pair
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:404:1: object_pair[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : ^( PAIR IDENT v= expr[$code] ) ;
 */
static std::vector<donut::Instruction>
object_pair(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    pANTLR3_BASE_TREE    IDENT27;
    std::vector<donut::Instruction> v;
    #undef	RETURN_TYPE_v
    #define	RETURN_TYPE_v std::vector<donut::Instruction>

    /* Initialize rule variables
     */

    IDENT27       = NULL;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:405:2: ( ^( PAIR IDENT v= expr[$code] ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:405:4: ^( PAIR IDENT v= expr[$code] )
        {
             MATCHT(PAIR, &FOLLOW_PAIR_in_object_pair906);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }

            IDENT27 = (pANTLR3_BASE_TREE) MATCHT(IDENT, &FOLLOW_IDENT_in_object_pair908);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }


            FOLLOWPUSH(FOLLOW_expr_in_object_pair912);
            v=expr(ctx, code);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL);
            if  (HASEXCEPTION())
            {
                goto ruleobject_pairEx;
            }



            {

                		asmlist
                .push_back(Inst::Push | code->constCode<string>(createStringFromString((IDENT27->getText(IDENT27)))));
                		
                asmlist
                .insert(asmlist
                .end(), v
                .begin(), v
                .end());
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleobject_pairEx; /* Prevent compiler warnings */
    ruleobject_pairEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return asmlist;
}
/* $ANTLR end object_pair */

/**
 * $ANTLR start array
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:412:1: array[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist ] : ^( ARRAY (v= expr[$code] )* ) ;
 */
static std::vector<donut::Instruction>
array(pCompiler ctx, donut::Source* code)
{
    std::vector<donut::Instruction> asmlist;


    std::vector<donut::Instruction> v;
    #undef	RETURN_TYPE_v
    #define	RETURN_TYPE_v std::vector<donut::Instruction>

    /* Initialize rule variables
     */


    	int array_count=0;

    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:416:2: ( ^( ARRAY (v= expr[$code] )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:416:4: ^( ARRAY (v= expr[$code] )* )
        {
             MATCHT(ARRAY, &FOLLOW_ARRAY_in_array940);
            if  (HASEXCEPTION())
            {
                goto rulearrayEx;
            }


            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL);
                if  (HASEXCEPTION())
                {
                    goto rulearrayEx;
                }

                // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:416:13: (v= expr[$code] )*

                for (;;)
                {
                    int alt9=2;
                    switch ( LA(1) )
                    {
                    case ADD:
                    case AND:
                    case APPLY:
                    case ARRAY:
                    case ASSIGN:
                    case ASSIGN_OP:
                    case BIT_AND:
                    case BIT_OR:
                    case CEQ:
                    case CGE:
                    case CGT:
                    case CLE:
                    case CLOS:
                    case CLT:
                    case CNE:
                    case DIV:
                    case DOT:
                    case FLOAT_LITERAL:
                    case FOR:
                    case HEX_LITERAL:
                    case IDX:
                    case IF:
                    case INT_LITERAL:
                    case MINUS:
                    case MOD:
                    case MUL:
                    case NOT:
                    case OBJECT:
                    case OCT_LITERAL:
                    case OR:
                    case PLUS:
                    case POST_OP:
                    case PRE_OP:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case SUB:
                    case 88:
                    case 92:
                    case 93:
                    	{
                    		alt9=1;
                    	}
                        break;

                    }

                    switch (alt9)
                    {
                	case 1:
                	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:416:14: v= expr[$code]
                	    {
                	        FOLLOWPUSH(FOLLOW_expr_in_array946);
                	        v=expr(ctx, code);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulearrayEx;
                	        }


                	        {

                	            			asmlist
                	            .insert(asmlist
                	            .end(), v
                	            .begin(), v
                	            .end());
                	            			array_count+=1;
                	            		
                	        }


                	    }
                	    break;

                	default:
                	    goto loop9;	/* break out of the loop */
                	    break;
                    }
                }
                loop9: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL);
                if  (HASEXCEPTION())
                {
                    goto rulearrayEx;
                }

            }


            {

                		asmlist
                .push_back(Inst::ConstructArray | array_count);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return asmlist;
}
/* $ANTLR end array */

/**
 * $ANTLR start arglist
 * /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:425:1: arglist[ donut::Source* code ] returns [ std::vector<donut::Instruction> asmlist, int count ] : ^( ARGS (v= expr[$code] )* ) ;
 */
static Compiler_arglist_return
arglist(pCompiler ctx, donut::Source* code)
{
    Compiler_arglist_return retval;


    std::vector<donut::Instruction> v;
    #undef	RETURN_TYPE_v
    #define	RETURN_TYPE_v std::vector<donut::Instruction>

    /* Initialize rule variables
     */


    	retval.count=0;


    retval.start = LT(1); retval.stop = retval.start;


    {
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:429:2: ( ^( ARGS (v= expr[$code] )* ) )
        // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:429:4: ^( ARGS (v= expr[$code] )* )
        {
             MATCHT(ARGS, &FOLLOW_ARGS_in_arglist980);
            if  (HASEXCEPTION())
            {
                goto rulearglistEx;
            }


            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL);
                if  (HASEXCEPTION())
                {
                    goto rulearglistEx;
                }

                // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:429:11: (v= expr[$code] )*

                for (;;)
                {
                    int alt10=2;
                    switch ( LA(1) )
                    {
                    case ADD:
                    case AND:
                    case APPLY:
                    case ARRAY:
                    case ASSIGN:
                    case ASSIGN_OP:
                    case BIT_AND:
                    case BIT_OR:
                    case CEQ:
                    case CGE:
                    case CGT:
                    case CLE:
                    case CLOS:
                    case CLT:
                    case CNE:
                    case DIV:
                    case DOT:
                    case FLOAT_LITERAL:
                    case FOR:
                    case HEX_LITERAL:
                    case IDX:
                    case IF:
                    case INT_LITERAL:
                    case MINUS:
                    case MOD:
                    case MUL:
                    case NOT:
                    case OBJECT:
                    case OCT_LITERAL:
                    case OR:
                    case PLUS:
                    case POST_OP:
                    case PRE_OP:
                    case STRING_DOUBLE:
                    case STRING_SINGLE:
                    case SUB:
                    case 88:
                    case 92:
                    case 93:
                    	{
                    		alt10=1;
                    	}
                        break;

                    }

                    switch (alt10)
                    {
                	case 1:
                	    // /home/psi/Dropbox/src/chisa/src/chisa/donut/parser/Compiler.g:429:12: v= expr[$code]
                	    {
                	        FOLLOWPUSH(FOLLOW_expr_in_arglist985);
                	        v=expr(ctx, code);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulearglistEx;
                	        }


                	        {

                	            		retval.asmlist
                	            .insert(retval.asmlist
                	            .end(), v
                	            .begin(), v
                	            .end());
                	            		retval.count
                	            +=1;
                	            	
                	        }


                	    }
                	    break;

                	default:
                	    goto loop10;	/* break out of the loop */
                	    break;
                    }
                }
                loop10: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL);
                if  (HASEXCEPTION())
                {
                    goto rulearglistEx;
                }

            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end arglist */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
