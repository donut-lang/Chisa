Nes = {};
Nes.step_break = 0;
Nes.handle = func(msg) {
	if(msg.action == "nes-open"){
		Geist.loadNES(msg.filename);
	}else if(msg.action == "memcompare-const"){
		Geist[msg.method](World.findElementById("cmpval").getText().toInteger());
	}else if(msg.action == "memcompare"){
		Geist[msg.method]();
		World.findElementById("select-ne").setEnabled(false);
		World.findElementById("select-eq").setEnabled(false);
		World.findElementById("select-ge").setEnabled(false);
		World.findElementById("select-le").setEnabled(false);
		World.findElementById("select-gt").setEnabled(false);
		World.findElementById("select-lt").setEnabled(false);
	}else if(msg.action == "take-snapshot"){
		Geist.selectTakeSnapshot();
		World.findElementById("select-ne").setEnabled(true);
		World.findElementById("select-eq").setEnabled(true);
		World.findElementById("select-ge").setEnabled(true);
		World.findElementById("select-le").setEnabled(true);
		World.findElementById("select-gt").setEnabled(true);
		World.findElementById("select-lt").setEnabled(true);
	}else if(msg.action == "nes-step"){
		if(self.step_break == 0){
			self.step_break = Geist.addExecBreak(0,0xffff);
		}else{
			Geist.stepRunning();
		};
		World.findElementById("continue").setEnabled(true);
	}else if(msg.action == "nes-cont"){
		Geist.continueRunning();
		self.step_break = 0;
		World.findElementById("continue").setEnabled(false);
	}else{
		return false;
	};
	return true;
};

MemoryAngel = {};
MemoryAngel.angel = null;
MemoryAngel.handle = func(msg){
	if(msg.action == "new-angel"){
		heaven = World.heaven();
		if( self.angel != null ){
			heaven.detatchAngel(self.angel);
			self.angel = null;
		}else{};
		angel =  self.angel = heaven.newTwinAngel();
		self.addr = msg.addr;
		//target1
		t1 = angel.newWidgetTarget("nes-watcher", self.addr.toString());
		elm1 = t1.newElementServant("mem-edit");
		elm1.element().findElementById("val").setText(msg.val.toString());
		t1.attatchServant(elm1);
		t1.attatchServant(t1.newHaloServant("red"));
		//target2
		if( self.addr >= 0x8000 ) {
			t2 = angel.newWidgetTarget("nes-trace", self.addr.toString());
			elm2 = t2.newElementServant("asm-edit");
			elm2.element().findElementById("asm").setText(Geist.disasmAt(self.addr));
			t2.attatchServant(elm2);
			t2.attatchServant(t2.newHaloServant("red"));
		}else{
			t2 = angel.newWidgetTarget("nes-compare", self.addr.toString());
			t2.attatchServant(t2.newHaloServant("red"));
		};
		//最後にくっつける
		angel.attatchTarget(t1);
		angel.attatchTarget(t2);
		heaven.attatchAngel(angel);
	}else if(msg.action == "memchange"){
		elm = self.angel.findElementById("val");
		res = Geist.writeNES(self.addr, elm.getText());
		if( !res.isEmpty() ) {
			elm.setFrameColor("red");
			World.findElementById("status").setText(res);
		}else{
			World.findElementById("status").setText("");
			World.heaven().detatchAngel(self.angel);
			self.angel = null;
		};
	}else if(msg.action == "compile") {
		elm = self.angel.findElementById("asm");
		res = Geist.writeAsmNES(self.addr, elm.getText());
		if( !res.isEmpty() ) {
			elm.setFrameColor("red");
			World.findElementById("status").setText(res);
		} else {
			World.findElementById("status").setText("");
			World.heaven().detatchAngel(self.angel);
			self.angel = null;
		};
	}else{};
	return false;
};

handleNES = func(msg){
	if(Nes.handle(msg)){
		return true;
	}else if(MemoryAngel.handle(msg)){
		return true;
	}else{
		return false;
	};
};

main = func(){
	running = true;
	while(running){
		msg = interrupt null;
		if( handleNES(msg) ){
		}else{};
	};
};


main();
